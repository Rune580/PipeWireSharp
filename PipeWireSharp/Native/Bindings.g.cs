// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace PipeWireSharp.Native
{
    internal static unsafe partial class Bindings
    {
        const string __DllName = "libpipewire_bindings";

        internal const uint SPA_NSEC_PER_SEC = 1000000000;
        internal const uint SPA_NSEC_PER_MSEC = 1000000;
        internal const uint SPA_NSEC_PER_USEC = 1000;
        internal const uint SPA_USEC_PER_SEC = 1000000;
        internal const uint SPA_USEC_PER_MSEC = 1000;
        internal const uint SPA_MSEC_PER_SEC = 1000;
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_BASE => new byte[] { 83, 112, 97, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Flags => new byte[] { 83, 112, 97, 58, 70, 108, 97, 103, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FLAGS_BASE => new byte[] { 83, 112, 97, 58, 70, 108, 97, 103, 115, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Enum => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_ENUM_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Pod => new byte[] { 83, 112, 97, 58, 80, 111, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_POD_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Struct => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 83, 116, 114, 117, 99, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_STRUCT_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 83, 116, 114, 117, 99, 116, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Object => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_OBJECT_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Pointer => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_POINTER_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Interface => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_INTERFACE_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Event => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 69, 118, 101, 110, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_EVENT_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 69, 118, 101, 110, 116, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Command => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 67, 111, 109, 109, 97, 110, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_COMMAND_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 67, 111, 109, 109, 97, 110, 100, 58, 0 };
        internal const uint SPA_POD_PROP_FLAG_READONLY = 1;
        internal const uint SPA_POD_PROP_FLAG_HARDWARE = 2;
        internal const uint SPA_POD_PROP_FLAG_HINT_DICT = 4;
        internal const uint SPA_POD_PROP_FLAG_MANDATORY = 8;
        internal const uint SPA_POD_PROP_FLAG_DONT_FIXATE = 16;
        internal const uint SPA_META_HEADER_FLAG_DISCONT = 1;
        internal const uint SPA_META_HEADER_FLAG_CORRUPTED = 2;
        internal const uint SPA_META_HEADER_FLAG_MARKER = 4;
        internal const uint SPA_META_HEADER_FLAG_HEADER = 8;
        internal const uint SPA_META_HEADER_FLAG_GAP = 16;
        internal const uint SPA_META_HEADER_FLAG_DELTA_UNIT = 32;
        internal const uint SPA_CHUNK_FLAG_NONE = 0;
        internal const uint SPA_CHUNK_FLAG_CORRUPTED = 1;
        internal const uint SPA_CHUNK_FLAG_EMPTY = 2;
        internal const uint SPA_DATA_FLAG_NONE = 0;
        internal const uint SPA_DATA_FLAG_READABLE = 1;
        internal const uint SPA_DATA_FLAG_WRITABLE = 2;
        internal const uint SPA_DATA_FLAG_DYNAMIC = 4;
        internal const uint SPA_DATA_FLAG_READWRITE = 3;
        internal const uint SPA_DATA_FLAG_MAPPABLE = 8;
        internal const uint SPA_BUFFER_ALLOC_FLAG_INLINE_META = 1;
        internal const uint SPA_BUFFER_ALLOC_FLAG_INLINE_CHUNK = 2;
        internal const uint SPA_BUFFER_ALLOC_FLAG_INLINE_DATA = 4;
        internal const uint SPA_BUFFER_ALLOC_FLAG_INLINE_ALL = 7;
        internal const uint SPA_BUFFER_ALLOC_FLAG_NO_DATA = 8;
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Buffer => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 66, 117, 102, 102, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_BUFFER_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 66, 117, 102, 102, 101, 114, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Data => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 68, 97, 116, 97, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_DATA_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 68, 97, 116, 97, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_DATA_Fd => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 68, 97, 116, 97, 58, 70, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_DATA_FD_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 68, 97, 116, 97, 58, 70, 100, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Meta => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 77, 101, 116, 97, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_META_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 77, 101, 116, 97, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_META_Array => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 77, 101, 116, 97, 58, 65, 114, 114, 97, 121, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_META_ARRAY_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 77, 101, 116, 97, 58, 65, 114, 114, 97, 121, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_META_Region => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 77, 101, 116, 97, 58, 82, 101, 103, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_META_REGION_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 77, 101, 116, 97, 58, 82, 101, 103, 105, 111, 110, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_META_ARRAY_Region => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 77, 101, 116, 97, 58, 65, 114, 114, 97, 121, 58, 82, 101, 103, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_META_ARRAY_REGION_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 77, 101, 116, 97, 58, 65, 114, 114, 97, 121, 58, 82, 101, 103, 105, 111, 110, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_META_Transformation => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 77, 101, 116, 97, 58, 84, 114, 97, 110, 115, 102, 111, 114, 109, 97, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_META_TRANSFORMATION_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 77, 101, 116, 97, 58, 84, 114, 97, 110, 115, 102, 111, 114, 109, 97, 116, 105, 111, 110, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Control => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 67, 111, 110, 116, 114, 111, 108, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_CONTROL_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 67, 111, 110, 116, 114, 111, 108, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Direction => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_DIRECTION_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 68, 105, 114, 101, 99, 116, 105, 111, 110, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Choice => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 67, 104, 111, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_CHOICE_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 67, 104, 111, 105, 99, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_DeviceEvent => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 69, 118, 101, 110, 116, 58, 68, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_DEVICE_EVENT_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 69, 118, 101, 110, 116, 58, 68, 101, 118, 105, 99, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_DeviceEventId => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 68, 101, 118, 105, 99, 101, 69, 118, 101, 110, 116, 73, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_DEVICE_EVENT_ID_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 68, 101, 118, 105, 99, 101, 69, 118, 101, 110, 116, 73, 100, 58, 0 };
        internal const uint SPA_STATUS_OK = 0;
        internal const uint SPA_STATUS_NEED_DATA = 1;
        internal const uint SPA_STATUS_HAVE_DATA = 2;
        internal const uint SPA_STATUS_STOPPED = 4;
        internal const uint SPA_STATUS_DRAINED = 8;
        internal const uint SPA_IO_CLOCK_FLAG_FREEWHEEL = 1;
        internal const uint SPA_IO_CLOCK_FLAG_XRUN_RECOVER = 2;
        internal const uint SPA_IO_CLOCK_FLAG_LAZY = 4;
        internal const uint SPA_IO_CLOCK_FLAG_NO_RATE = 8;
        internal const uint SPA_IO_VIDEO_SIZE_VALID = 1;
        internal const uint SPA_IO_SEGMENT_BAR_FLAG_VALID = 1;
        internal const uint SPA_IO_SEGMENT_VIDEO_FLAG_VALID = 1;
        internal const uint SPA_IO_SEGMENT_VIDEO_FLAG_DROP_FRAME = 2;
        internal const uint SPA_IO_SEGMENT_VIDEO_FLAG_PULL_DOWN = 4;
        internal const uint SPA_IO_SEGMENT_VIDEO_FLAG_INTERLACED = 8;
        internal const uint SPA_IO_SEGMENT_FLAG_LOOPING = 1;
        internal const uint SPA_IO_SEGMENT_FLAG_NO_POSITION = 2;
        internal const uint SPA_IO_POSITION_MAX_SEGMENTS = 8;
        internal const uint SPA_IO_RATE_MATCH_FLAG_ACTIVE = 1;
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_IO => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 73, 79, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_IO_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 73, 79, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_NodeEvent => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 69, 118, 101, 110, 116, 58, 78, 111, 100, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_NODE_EVENT_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 69, 118, 101, 110, 116, 58, 78, 111, 100, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_NodeCommand => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 67, 111, 109, 109, 97, 110, 100, 58, 78, 111, 100, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_NODE_COMMAND_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 67, 111, 109, 109, 97, 110, 100, 58, 78, 111, 100, 101, 58, 0 };
        internal const uint SPA_PARAM_INFO_SERIAL = 1;
        internal const uint SPA_PARAM_INFO_READ = 2;
        internal const uint SPA_PARAM_INFO_WRITE = 4;
        internal const uint SPA_PARAM_INFO_READWRITE = 6;
        internal static ReadOnlySpan<byte> SPA_KEY_FORMAT_DSP => new byte[] { 102, 111, 114, 109, 97, 116, 46, 100, 115, 112, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_ParamId => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 80, 97, 114, 97, 109, 73, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_ID_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 80, 97, 114, 97, 109, 73, 100, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Param => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 0 };
        internal const uint SPA_AUDIO_MAX_CHANNELS = 64;
        internal const uint SPA_AUDIO_FLAG_NONE = 0;
        internal const uint SPA_AUDIO_FLAG_UNPOSITIONED = 1;
        internal static ReadOnlySpan<byte> SPA_KEY_AUDIO_FORMAT => new byte[] { 97, 117, 100, 105, 111, 46, 102, 111, 114, 109, 97, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_AUDIO_CHANNEL => new byte[] { 97, 117, 100, 105, 111, 46, 99, 104, 97, 110, 110, 101, 108, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_AUDIO_CHANNELS => new byte[] { 97, 117, 100, 105, 111, 46, 99, 104, 97, 110, 110, 101, 108, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_AUDIO_RATE => new byte[] { 97, 117, 100, 105, 111, 46, 114, 97, 116, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_AUDIO_POSITION => new byte[] { 97, 117, 100, 105, 111, 46, 112, 111, 115, 105, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_AUDIO_ALLOWED_RATES => new byte[] { 97, 117, 100, 105, 111, 46, 97, 108, 108, 111, 119, 101, 100, 45, 114, 97, 116, 101, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AudioFormat => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 70, 111, 114, 109, 97, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AUDIO_FORMAT_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 70, 111, 114, 109, 97, 116, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AudioFlags => new byte[] { 83, 112, 97, 58, 70, 108, 97, 103, 115, 58, 65, 117, 100, 105, 111, 70, 108, 97, 103, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AUDIO_FLAGS_BASE => new byte[] { 83, 112, 97, 58, 70, 108, 97, 103, 115, 58, 65, 117, 100, 105, 111, 70, 108, 97, 103, 115, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AudioChannel => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 67, 104, 97, 110, 110, 101, 108, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AUDIO_CHANNEL_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 67, 104, 97, 110, 110, 101, 108, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AudioIEC958Codec => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 73, 69, 67, 57, 53, 56, 67, 111, 100, 101, 99, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AUDIO_IEC958_CODEC_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 73, 69, 67, 57, 53, 56, 67, 111, 100, 101, 99, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AudioMP3ChannelMode => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 77, 80, 51, 67, 104, 97, 110, 110, 101, 108, 77, 111, 100, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AUDIO_MP3_CHANNEL_MODE_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 77, 80, 51, 67, 104, 97, 110, 110, 101, 108, 77, 111, 100, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AudioAACStreamFormat => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 65, 65, 67, 83, 116, 114, 101, 97, 109, 70, 111, 114, 109, 97, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AUDIO_AAC_STREAM_FORMAT_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 65, 65, 67, 83, 116, 114, 101, 97, 109, 70, 111, 114, 109, 97, 116, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AudioWMAProfile => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 87, 77, 65, 80, 114, 111, 102, 105, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AUDIO_WMA_PROFILE_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 87, 77, 65, 80, 114, 111, 102, 105, 108, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AudioAMRBandMode => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 65, 77, 82, 66, 97, 110, 100, 77, 111, 100, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_AUDIO_AMR_BAND_MODE_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 65, 117, 100, 105, 111, 65, 77, 82, 66, 97, 110, 100, 77, 111, 100, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_ParamBitorder => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 80, 97, 114, 97, 109, 66, 105, 116, 111, 114, 100, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_BITORDER_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 80, 97, 114, 97, 109, 66, 105, 116, 111, 114, 100, 101, 114, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_ParamAvailability => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 80, 97, 114, 97, 109, 65, 118, 97, 105, 108, 97, 98, 105, 108, 105, 116, 121, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_AVAILABILITY_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 80, 97, 114, 97, 109, 65, 118, 97, 105, 108, 97, 98, 105, 108, 105, 116, 121, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_Meta => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 77, 101, 116, 97, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_META_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 77, 101, 116, 97, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_IO => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 73, 79, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_IO_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 73, 79, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_Buffers => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 66, 117, 102, 102, 101, 114, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_BUFFERS_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 66, 117, 102, 102, 101, 114, 115, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_BlockInfo => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 66, 117, 102, 102, 101, 114, 115, 58, 66, 108, 111, 99, 107, 73, 110, 102, 111, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_BLOCK_INFO_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 66, 117, 102, 102, 101, 114, 115, 58, 66, 108, 111, 99, 107, 73, 110, 102, 111, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_BluetoothAudioCodec => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 66, 108, 117, 101, 116, 111, 111, 116, 104, 65, 117, 100, 105, 111, 67, 111, 100, 101, 99, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_BLUETOOTH_AUDIO_CODEC_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 66, 108, 117, 101, 116, 111, 111, 116, 104, 65, 117, 100, 105, 111, 67, 111, 100, 101, 99, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Props => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 80, 114, 111, 112, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PROPS_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 80, 114, 111, 112, 115, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PropInfo => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 80, 114, 111, 112, 73, 110, 102, 111, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PROP_INFO_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 80, 114, 111, 112, 73, 110, 102, 111, 58, 0 };
        internal const uint SPA_VIDEO_MAX_PLANES = 4;
        internal const uint SPA_VIDEO_MAX_COMPONENTS = 4;
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_VideoFormat => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 86, 105, 100, 101, 111, 70, 111, 114, 109, 97, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_VIDEO_FORMAT_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 86, 105, 100, 101, 111, 70, 111, 114, 109, 97, 116, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_VideoFlags => new byte[] { 83, 112, 97, 58, 70, 108, 97, 103, 115, 58, 86, 105, 100, 101, 111, 70, 108, 97, 103, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_VIDEO_FLAGS_BASE => new byte[] { 83, 112, 97, 58, 70, 108, 97, 103, 115, 58, 86, 105, 100, 101, 111, 70, 108, 97, 103, 115, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_VideoInterlaceMode => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 86, 105, 100, 101, 111, 73, 110, 116, 101, 114, 108, 97, 99, 101, 77, 111, 100, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_VIDEO_INTERLACE_MODE_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 86, 105, 100, 101, 111, 73, 110, 116, 101, 114, 108, 97, 99, 101, 77, 111, 100, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Format => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_MediaType => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 77, 101, 100, 105, 97, 84, 121, 112, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_MEDIA_TYPE_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 77, 101, 100, 105, 97, 84, 121, 112, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_MediaSubtype => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 77, 101, 100, 105, 97, 83, 117, 98, 116, 121, 112, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_MEDIA_SUBTYPE_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 77, 101, 100, 105, 97, 83, 117, 98, 116, 121, 112, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FormatAudio => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 65, 117, 100, 105, 111, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_AUDIO_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 65, 117, 100, 105, 111, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_AUDIO_AAC => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 65, 117, 100, 105, 111, 58, 65, 65, 67, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_AUDIO_AAC_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 65, 117, 100, 105, 111, 58, 65, 65, 67, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_AUDIO_WMA => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 65, 117, 100, 105, 111, 58, 87, 77, 65, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_AUDIO_WMA_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 65, 117, 100, 105, 111, 58, 87, 77, 65, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_AUDIO_AMR => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 65, 117, 100, 105, 111, 58, 65, 77, 82, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_AUDIO_AMR_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 65, 117, 100, 105, 111, 58, 65, 77, 82, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FormatVideo => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 86, 105, 100, 101, 111, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_VIDEO_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 86, 105, 100, 101, 111, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_VIDEO_H264 => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 86, 105, 100, 101, 111, 58, 72, 50, 54, 52, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_VIDEO_H264_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 86, 105, 100, 101, 111, 58, 72, 50, 54, 52, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FormatControl => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 67, 111, 110, 116, 114, 111, 108, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_FORMAT_CONTROL_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 70, 111, 114, 109, 97, 116, 58, 67, 111, 110, 116, 114, 111, 108, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_Latency => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 76, 97, 116, 101, 110, 99, 121, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_LATENCY_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 76, 97, 116, 101, 110, 99, 121, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_ProcessLatency => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 80, 114, 111, 99, 101, 115, 115, 76, 97, 116, 101, 110, 99, 121, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_PROCESS_LATENCY_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 80, 114, 111, 99, 101, 115, 115, 76, 97, 116, 101, 110, 99, 121, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_ParamPortConfigMode => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 80, 97, 114, 97, 109, 80, 111, 114, 116, 67, 111, 110, 102, 105, 103, 77, 111, 100, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_PORT_CONFIG_MODE_BASE => new byte[] { 83, 112, 97, 58, 69, 110, 117, 109, 58, 80, 97, 114, 97, 109, 80, 111, 114, 116, 67, 111, 110, 102, 105, 103, 77, 111, 100, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_PortConfig => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 80, 111, 114, 116, 67, 111, 110, 102, 105, 103, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_PORT_CONFIG_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 80, 111, 114, 116, 67, 111, 110, 102, 105, 103, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Profiler => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 114, 111, 102, 105, 108, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PROFILER_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 114, 111, 102, 105, 108, 101, 114, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_Profile => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 80, 114, 111, 102, 105, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_PROFILE_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 80, 114, 111, 102, 105, 108, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_Route => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 82, 111, 117, 116, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_ROUTE_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 82, 111, 117, 116, 101, 58, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_Tag => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 84, 97, 103, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_PARAM_TAG_BASE => new byte[] { 83, 112, 97, 58, 80, 111, 100, 58, 79, 98, 106, 101, 99, 116, 58, 80, 97, 114, 97, 109, 58, 84, 97, 103, 58, 0 };
        internal const uint SPA_DICT_FLAG_SORTED = 1;
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_Node => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 78, 111, 100, 101, 0 };
        internal const uint SPA_VERSION_NODE = 0;
        internal const uint SPA_NODE_CHANGE_MASK_FLAGS = 1;
        internal const uint SPA_NODE_CHANGE_MASK_PROPS = 2;
        internal const uint SPA_NODE_CHANGE_MASK_PARAMS = 4;
        internal const uint SPA_NODE_FLAG_RT = 1;
        internal const uint SPA_NODE_FLAG_IN_DYNAMIC_PORTS = 2;
        internal const uint SPA_NODE_FLAG_OUT_DYNAMIC_PORTS = 4;
        internal const uint SPA_NODE_FLAG_IN_PORT_CONFIG = 8;
        internal const uint SPA_NODE_FLAG_OUT_PORT_CONFIG = 16;
        internal const uint SPA_NODE_FLAG_NEED_CONFIGURE = 32;
        internal const uint SPA_NODE_FLAG_ASYNC = 64;
        internal const uint SPA_PORT_CHANGE_MASK_FLAGS = 1;
        internal const uint SPA_PORT_CHANGE_MASK_RATE = 2;
        internal const uint SPA_PORT_CHANGE_MASK_PROPS = 4;
        internal const uint SPA_PORT_CHANGE_MASK_PARAMS = 8;
        internal const uint SPA_PORT_FLAG_REMOVABLE = 1;
        internal const uint SPA_PORT_FLAG_OPTIONAL = 2;
        internal const uint SPA_PORT_FLAG_CAN_ALLOC_BUFFERS = 4;
        internal const uint SPA_PORT_FLAG_IN_PLACE = 8;
        internal const uint SPA_PORT_FLAG_NO_REF = 16;
        internal const uint SPA_PORT_FLAG_LIVE = 32;
        internal const uint SPA_PORT_FLAG_PHYSICAL = 64;
        internal const uint SPA_PORT_FLAG_TERMINAL = 128;
        internal const uint SPA_PORT_FLAG_DYNAMIC_DATA = 256;
        internal const uint SPA_RESULT_TYPE_NODE_ERROR = 1;
        internal const uint SPA_RESULT_TYPE_NODE_PARAMS = 2;
        internal const uint SPA_NODE_EVENT_INFO = 0;
        internal const uint SPA_NODE_EVENT_PORT_INFO = 1;
        internal const uint SPA_NODE_EVENT_RESULT = 2;
        internal const uint SPA_NODE_EVENT_EVENT = 3;
        internal const uint SPA_NODE_EVENT_NUM = 4;
        internal const uint SPA_VERSION_NODE_EVENTS = 0;
        internal const uint SPA_NODE_CALLBACK_READY = 0;
        internal const uint SPA_NODE_CALLBACK_REUSE_BUFFER = 1;
        internal const uint SPA_NODE_CALLBACK_XRUN = 2;
        internal const uint SPA_NODE_CALLBACK_NUM = 3;
        internal const uint SPA_VERSION_NODE_CALLBACKS = 0;
        internal const uint SPA_NODE_PARAM_FLAG_TEST_ONLY = 1;
        internal const uint SPA_NODE_PARAM_FLAG_FIXATE = 2;
        internal const uint SPA_NODE_PARAM_FLAG_NEAREST = 4;
        internal const uint SPA_NODE_BUFFERS_FLAG_ALLOC = 1;
        internal const uint SPA_NODE_METHOD_ADD_LISTENER = 0;
        internal const uint SPA_NODE_METHOD_SET_CALLBACKS = 1;
        internal const uint SPA_NODE_METHOD_SYNC = 2;
        internal const uint SPA_NODE_METHOD_ENUM_PARAMS = 3;
        internal const uint SPA_NODE_METHOD_SET_PARAM = 4;
        internal const uint SPA_NODE_METHOD_SET_IO = 5;
        internal const uint SPA_NODE_METHOD_SEND_COMMAND = 6;
        internal const uint SPA_NODE_METHOD_ADD_PORT = 7;
        internal const uint SPA_NODE_METHOD_REMOVE_PORT = 8;
        internal const uint SPA_NODE_METHOD_PORT_ENUM_PARAMS = 9;
        internal const uint SPA_NODE_METHOD_PORT_SET_PARAM = 10;
        internal const uint SPA_NODE_METHOD_PORT_USE_BUFFERS = 11;
        internal const uint SPA_NODE_METHOD_PORT_SET_IO = 12;
        internal const uint SPA_NODE_METHOD_PORT_REUSE_BUFFER = 13;
        internal const uint SPA_NODE_METHOD_PROCESS = 14;
        internal const uint SPA_NODE_METHOD_NUM = 15;
        internal const uint SPA_VERSION_NODE_METHODS = 0;
        internal const uint SPA_VERSION_GRAPH_NODE_CALLBACKS = 0;
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_Device => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 68, 101, 118, 105, 99, 101, 0 };
        internal const uint SPA_VERSION_DEVICE = 0;
        internal const uint SPA_VERSION_DEVICE_INFO = 0;
        internal const uint SPA_DEVICE_CHANGE_MASK_FLAGS = 1;
        internal const uint SPA_DEVICE_CHANGE_MASK_PROPS = 2;
        internal const uint SPA_DEVICE_CHANGE_MASK_PARAMS = 4;
        internal const uint SPA_VERSION_DEVICE_OBJECT_INFO = 0;
        internal const uint SPA_DEVICE_OBJECT_CHANGE_MASK_FLAGS = 1;
        internal const uint SPA_DEVICE_OBJECT_CHANGE_MASK_PROPS = 2;
        internal const uint SPA_RESULT_TYPE_DEVICE_PARAMS = 1;
        internal const uint SPA_DEVICE_EVENT_INFO = 0;
        internal const uint SPA_DEVICE_EVENT_RESULT = 1;
        internal const uint SPA_DEVICE_EVENT_EVENT = 2;
        internal const uint SPA_DEVICE_EVENT_OBJECT_INFO = 3;
        internal const uint SPA_DEVICE_EVENT_NUM = 4;
        internal const uint SPA_VERSION_DEVICE_EVENTS = 0;
        internal const uint SPA_DEVICE_METHOD_ADD_LISTENER = 0;
        internal const uint SPA_DEVICE_METHOD_SYNC = 1;
        internal const uint SPA_DEVICE_METHOD_ENUM_PARAMS = 2;
        internal const uint SPA_DEVICE_METHOD_SET_PARAM = 3;
        internal const uint SPA_DEVICE_METHOD_NUM = 4;
        internal const uint SPA_VERSION_DEVICE_METHODS = 0;
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_ENUM_API => new byte[] { 100, 101, 118, 105, 99, 101, 46, 101, 110, 117, 109, 46, 97, 112, 105, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_API => new byte[] { 100, 101, 118, 105, 99, 101, 46, 97, 112, 105, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_NAME => new byte[] { 100, 101, 118, 105, 99, 101, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_ALIAS => new byte[] { 100, 101, 118, 105, 99, 101, 46, 97, 108, 105, 97, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_NICK => new byte[] { 100, 101, 118, 105, 99, 101, 46, 110, 105, 99, 107, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_DESCRIPTION => new byte[] { 100, 101, 118, 105, 99, 101, 46, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_ICON => new byte[] { 100, 101, 118, 105, 99, 101, 46, 105, 99, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_ICON_NAME => new byte[] { 100, 101, 118, 105, 99, 101, 46, 105, 99, 111, 110, 45, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_PLUGGED_USEC => new byte[] { 100, 101, 118, 105, 99, 101, 46, 112, 108, 117, 103, 103, 101, 100, 46, 117, 115, 101, 99, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_BUS_ID => new byte[] { 100, 101, 118, 105, 99, 101, 46, 98, 117, 115, 45, 105, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_BUS_PATH => new byte[] { 100, 101, 118, 105, 99, 101, 46, 98, 117, 115, 45, 112, 97, 116, 104, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_BUS => new byte[] { 100, 101, 118, 105, 99, 101, 46, 98, 117, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_SUBSYSTEM => new byte[] { 100, 101, 118, 105, 99, 101, 46, 115, 117, 98, 115, 121, 115, 116, 101, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_SYSFS_PATH => new byte[] { 100, 101, 118, 105, 99, 101, 46, 115, 121, 115, 102, 115, 46, 112, 97, 116, 104, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_VENDOR_ID => new byte[] { 100, 101, 118, 105, 99, 101, 46, 118, 101, 110, 100, 111, 114, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_VENDOR_NAME => new byte[] { 100, 101, 118, 105, 99, 101, 46, 118, 101, 110, 100, 111, 114, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_PRODUCT_ID => new byte[] { 100, 101, 118, 105, 99, 101, 46, 112, 114, 111, 100, 117, 99, 116, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_PRODUCT_NAME => new byte[] { 100, 101, 118, 105, 99, 101, 46, 112, 114, 111, 100, 117, 99, 116, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_SERIAL => new byte[] { 100, 101, 118, 105, 99, 101, 46, 115, 101, 114, 105, 97, 108, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_CLASS => new byte[] { 100, 101, 118, 105, 99, 101, 46, 99, 108, 97, 115, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_CAPABILITIES => new byte[] { 100, 101, 118, 105, 99, 101, 46, 99, 97, 112, 97, 98, 105, 108, 105, 116, 105, 101, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_FORM_FACTOR => new byte[] { 100, 101, 118, 105, 99, 101, 46, 102, 111, 114, 109, 45, 102, 97, 99, 116, 111, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_PROFILE => new byte[] { 100, 101, 118, 105, 99, 101, 46, 112, 114, 111, 102, 105, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_PROFILE_SET => new byte[] { 100, 101, 118, 105, 99, 101, 46, 112, 114, 111, 102, 105, 108, 101, 45, 115, 101, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_STRING => new byte[] { 100, 101, 118, 105, 99, 101, 46, 115, 116, 114, 105, 110, 103, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_DEVICE_DEVIDS => new byte[] { 100, 101, 118, 105, 99, 101, 46, 100, 101, 118, 105, 100, 115, 0 };
        internal const uint SPA_POD_BUILDER_FLAG_BODY = 1;
        internal const uint SPA_POD_BUILDER_FLAG_FIRST = 2;
        internal const uint SPA_VERSION_POD_BUILDER_CALLBACKS = 0;
        internal static ReadOnlySpan<byte> SPA_KEY_NODE_NAME => new byte[] { 110, 111, 100, 101, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_NODE_DESCRIPTION => new byte[] { 110, 111, 100, 101, 46, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_NODE_LATENCY => new byte[] { 110, 111, 100, 101, 46, 108, 97, 116, 101, 110, 99, 121, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_NODE_MAX_LATENCY => new byte[] { 110, 111, 100, 101, 46, 109, 97, 120, 45, 108, 97, 116, 101, 110, 99, 121, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_NODE_DRIVER => new byte[] { 110, 111, 100, 101, 46, 100, 114, 105, 118, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_NODE_ALWAYS_PROCESS => new byte[] { 110, 111, 100, 101, 46, 97, 108, 119, 97, 121, 115, 45, 112, 114, 111, 99, 101, 115, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_NODE_PAUSE_ON_IDLE => new byte[] { 110, 111, 100, 101, 46, 112, 97, 117, 115, 101, 45, 111, 110, 45, 105, 100, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_NODE_MONITOR => new byte[] { 110, 111, 100, 101, 46, 109, 111, 110, 105, 116, 111, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_PORT_NAME => new byte[] { 112, 111, 114, 116, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_PORT_ALIAS => new byte[] { 112, 111, 114, 116, 46, 97, 108, 105, 97, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_PORT_MONITOR => new byte[] { 112, 111, 114, 116, 46, 109, 111, 110, 105, 116, 111, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_PORT_IGNORE_LATENCY => new byte[] { 112, 111, 114, 116, 46, 105, 103, 110, 111, 114, 101, 45, 108, 97, 116, 101, 110, 99, 121, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_PORT_GROUP => new byte[] { 112, 111, 114, 116, 46, 103, 114, 111, 117, 112, 0 };
        internal const uint SPA_AUDIO_DSD_FLAG_NONE = 0;
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_CPU => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 67, 80, 85, 0 };
        internal const uint SPA_VERSION_CPU = 0;
        internal const uint SPA_CPU_FLAG_MMX = 1;
        internal const uint SPA_CPU_FLAG_MMXEXT = 2;
        internal const uint SPA_CPU_FLAG_3DNOW = 4;
        internal const uint SPA_CPU_FLAG_SSE = 8;
        internal const uint SPA_CPU_FLAG_SSE2 = 16;
        internal const uint SPA_CPU_FLAG_3DNOWEXT = 32;
        internal const uint SPA_CPU_FLAG_SSE3 = 64;
        internal const uint SPA_CPU_FLAG_SSSE3 = 128;
        internal const uint SPA_CPU_FLAG_SSE41 = 256;
        internal const uint SPA_CPU_FLAG_SSE42 = 512;
        internal const uint SPA_CPU_FLAG_AESNI = 1024;
        internal const uint SPA_CPU_FLAG_AVX = 2048;
        internal const uint SPA_CPU_FLAG_XOP = 4096;
        internal const uint SPA_CPU_FLAG_FMA4 = 8192;
        internal const uint SPA_CPU_FLAG_CMOV = 16384;
        internal const uint SPA_CPU_FLAG_AVX2 = 32768;
        internal const uint SPA_CPU_FLAG_FMA3 = 65536;
        internal const uint SPA_CPU_FLAG_BMI1 = 131072;
        internal const uint SPA_CPU_FLAG_BMI2 = 262144;
        internal const uint SPA_CPU_FLAG_AVX512 = 524288;
        internal const uint SPA_CPU_FLAG_SLOW_UNALIGNED = 1048576;
        internal const uint SPA_CPU_FLAG_ALTIVEC = 1;
        internal const uint SPA_CPU_FLAG_VSX = 2;
        internal const uint SPA_CPU_FLAG_POWER8 = 4;
        internal const uint SPA_CPU_FLAG_ARMV5TE = 1;
        internal const uint SPA_CPU_FLAG_ARMV6 = 2;
        internal const uint SPA_CPU_FLAG_ARMV6T2 = 4;
        internal const uint SPA_CPU_FLAG_VFP = 8;
        internal const uint SPA_CPU_FLAG_VFPV3 = 16;
        internal const uint SPA_CPU_FLAG_NEON = 32;
        internal const uint SPA_CPU_FLAG_ARMV8 = 64;
        internal const uint SPA_CPU_FLAG_RISCV_V = 1;
        internal const uint SPA_CPU_VM_NONE = 0;
        internal const uint SPA_CPU_VM_OTHER = 1;
        internal const uint SPA_CPU_VM_KVM = 2;
        internal const uint SPA_CPU_VM_QEMU = 4;
        internal const uint SPA_CPU_VM_BOCHS = 8;
        internal const uint SPA_CPU_VM_XEN = 16;
        internal const uint SPA_CPU_VM_UML = 32;
        internal const uint SPA_CPU_VM_VMWARE = 64;
        internal const uint SPA_CPU_VM_ORACLE = 128;
        internal const uint SPA_CPU_VM_MICROSOFT = 256;
        internal const uint SPA_CPU_VM_ZVM = 512;
        internal const uint SPA_CPU_VM_PARALLELS = 1024;
        internal const uint SPA_CPU_VM_BHYVE = 2048;
        internal const uint SPA_CPU_VM_QNX = 4096;
        internal const uint SPA_CPU_VM_ACRN = 8192;
        internal const uint SPA_CPU_VM_POWERVM = 16384;
        internal const uint SPA_VERSION_CPU_METHODS = 2;
        internal static ReadOnlySpan<byte> SPA_KEY_CPU_FORCE => new byte[] { 99, 112, 117, 46, 102, 111, 114, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_CPU_VM_TYPE => new byte[] { 99, 112, 117, 46, 118, 109, 46, 116, 121, 112, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_CPU_ZERO_DENORMALS => new byte[] { 99, 112, 117, 46, 122, 101, 114, 111, 46, 100, 101, 110, 111, 114, 109, 97, 108, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_System => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 83, 121, 115, 116, 101, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_DataSystem => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 68, 97, 116, 97, 83, 121, 115, 116, 101, 109, 0 };
        internal const uint SPA_VERSION_SYSTEM = 0;
        internal const uint SPA_IO_IN = 1;
        internal const uint SPA_IO_OUT = 4;
        internal const uint SPA_IO_ERR = 8;
        internal const uint SPA_IO_HUP = 16;
        internal const uint SPA_FD_CLOEXEC = 1;
        internal const uint SPA_FD_NONBLOCK = 2;
        internal const uint SPA_FD_EVENT_SEMAPHORE = 4;
        internal const uint SPA_FD_TIMER_ABSTIME = 8;
        internal const uint SPA_FD_TIMER_CANCEL_ON_SET = 16;
        internal const uint SPA_VERSION_SYSTEM_METHODS = 0;
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_Loop => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 76, 111, 111, 112, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_DataLoop => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 68, 97, 116, 97, 76, 111, 111, 112, 0 };
        internal const uint SPA_VERSION_LOOP = 0;
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_LoopControl => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 76, 111, 111, 112, 67, 111, 110, 116, 114, 111, 108, 0 };
        internal const uint SPA_VERSION_LOOP_CONTROL = 1;
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_LoopUtils => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 76, 111, 111, 112, 85, 116, 105, 108, 115, 0 };
        internal const uint SPA_VERSION_LOOP_UTILS = 0;
        internal const uint SPA_VERSION_LOOP_METHODS = 0;
        internal const uint SPA_VERSION_LOOP_CONTROL_HOOKS = 0;
        internal const uint SPA_VERSION_LOOP_CONTROL_METHODS = 1;
        internal const uint SPA_VERSION_LOOP_UTILS_METHODS = 0;
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_DBus => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 68, 66, 117, 115, 0 };
        internal const uint SPA_VERSION_DBUS = 0;
        internal const uint SPA_DBUS_CONNECTION_EVENT_DESTROY = 0;
        internal const uint SPA_DBUS_CONNECTION_EVENT_DISCONNECTED = 1;
        internal const uint SPA_DBUS_CONNECTION_EVENT_NUM = 2;
        internal const uint SPA_VERSION_DBUS_CONNECTION_EVENTS = 0;
        internal const uint SPA_VERSION_DBUS_CONNECTION = 1;
        internal const uint SPA_VERSION_DBUS_METHODS = 0;
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_I18N => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 73, 49, 56, 78, 0 };
        internal const uint SPA_VERSION_I18N = 0;
        internal const uint SPA_VERSION_I18N_METHODS = 0;
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_Log => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 76, 111, 103, 0 };
        internal const uint SPA_VERSION_LOG = 0;
        internal const uint SPA_VERSION_LOG_TOPIC = 0;
        internal const uint SPA_VERSION_LOG_TOPIC_ENUM = 0;
        internal const uint SPA_VERSION_LOG_METHODS = 1;
        internal static ReadOnlySpan<byte> SPA_LOG_TOPIC_ENUM_NAME => new byte[] { 115, 112, 97, 95, 108, 111, 103, 95, 116, 111, 112, 105, 99, 95, 101, 110, 117, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_LOG_LEVEL => new byte[] { 108, 111, 103, 46, 108, 101, 118, 101, 108, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_LOG_COLORS => new byte[] { 108, 111, 103, 46, 99, 111, 108, 111, 114, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_LOG_FILE => new byte[] { 108, 111, 103, 46, 102, 105, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_LOG_TIMESTAMP => new byte[] { 108, 111, 103, 46, 116, 105, 109, 101, 115, 116, 97, 109, 112, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_LOG_LINE => new byte[] { 108, 111, 103, 46, 108, 105, 110, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_LOG_PATTERNS => new byte[] { 108, 111, 103, 46, 112, 97, 116, 116, 101, 114, 110, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_PluginLoader => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 80, 108, 117, 103, 105, 110, 76, 111, 97, 100, 101, 114, 0 };
        internal const uint SPA_VERSION_PLUGIN_LOADER = 0;
        internal const uint SPA_VERSION_PLUGIN_LOADER_METHODS = 0;
        internal const uint SPA_VERSION_HANDLE = 0;
        internal const uint SPA_VERSION_HANDLE_FACTORY = 1;
        internal static ReadOnlySpan<byte> SPA_HANDLE_FACTORY_ENUM_FUNC_NAME => new byte[] { 115, 112, 97, 95, 104, 97, 110, 100, 108, 101, 95, 102, 97, 99, 116, 111, 114, 121, 95, 101, 110, 117, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_FACTORY_NAME => new byte[] { 102, 97, 99, 116, 111, 114, 121, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_FACTORY_AUTHOR => new byte[] { 102, 97, 99, 116, 111, 114, 121, 46, 97, 117, 116, 104, 111, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_FACTORY_DESCRIPTION => new byte[] { 102, 97, 99, 116, 111, 114, 121, 46, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_FACTORY_USAGE => new byte[] { 102, 97, 99, 116, 111, 114, 121, 46, 117, 115, 97, 103, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_LIBRARY_NAME => new byte[] { 108, 105, 98, 114, 97, 114, 121, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INFO_Thread => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 84, 104, 114, 101, 97, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_TYPE_INTERFACE_ThreadUtils => new byte[] { 83, 112, 97, 58, 80, 111, 105, 110, 116, 101, 114, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 84, 104, 114, 101, 97, 100, 85, 116, 105, 108, 115, 0 };
        internal const uint SPA_VERSION_THREAD_UTILS = 0;
        internal const uint SPA_VERSION_THREAD_UTILS_METHODS = 0;
        internal static ReadOnlySpan<byte> SPA_KEY_THREAD_NAME => new byte[] { 116, 104, 114, 101, 97, 100, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_THREAD_STACK_SIZE => new byte[] { 116, 104, 114, 101, 97, 100, 46, 115, 116, 97, 99, 107, 45, 115, 105, 122, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_THREAD_AFFINITY => new byte[] { 116, 104, 114, 101, 97, 100, 46, 97, 102, 102, 105, 110, 105, 116, 121, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_THREAD_CREATOR => new byte[] { 116, 104, 114, 101, 97, 100, 46, 99, 114, 101, 97, 116, 111, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_RESET => new byte[] { 27, 91, 48, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BOLD => new byte[] { 27, 91, 49, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_ITALIC => new byte[] { 27, 91, 51, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_UNDERLINE => new byte[] { 27, 91, 52, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BLACK => new byte[] { 27, 91, 48, 59, 51, 48, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_RED => new byte[] { 27, 91, 48, 59, 51, 49, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_GREEN => new byte[] { 27, 91, 48, 59, 51, 50, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_YELLOW => new byte[] { 27, 91, 48, 59, 51, 51, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BLUE => new byte[] { 27, 91, 48, 59, 51, 52, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_MAGENTA => new byte[] { 27, 91, 48, 59, 51, 53, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_CYAN => new byte[] { 27, 91, 48, 59, 51, 54, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_WHITE => new byte[] { 27, 91, 48, 59, 51, 55, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BRIGHT_BLACK => new byte[] { 27, 91, 57, 48, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BRIGHT_RED => new byte[] { 27, 91, 57, 49, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BRIGHT_GREEN => new byte[] { 27, 91, 57, 50, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BRIGHT_YELLOW => new byte[] { 27, 91, 57, 51, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BRIGHT_BLUE => new byte[] { 27, 91, 57, 52, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BRIGHT_MAGENTA => new byte[] { 27, 91, 57, 53, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BRIGHT_CYAN => new byte[] { 27, 91, 57, 54, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BRIGHT_WHITE => new byte[] { 27, 91, 57, 55, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BOLD_BLACK => new byte[] { 27, 91, 49, 59, 51, 48, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BOLD_RED => new byte[] { 27, 91, 49, 59, 51, 49, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BOLD_GREEN => new byte[] { 27, 91, 49, 59, 51, 50, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BOLD_YELLOW => new byte[] { 27, 91, 49, 59, 51, 51, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BOLD_BLUE => new byte[] { 27, 91, 49, 59, 51, 52, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BOLD_MAGENTA => new byte[] { 27, 91, 49, 59, 51, 53, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BOLD_CYAN => new byte[] { 27, 91, 49, 59, 51, 54, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BOLD_WHITE => new byte[] { 27, 91, 49, 59, 51, 55, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_DARK_BLACK => new byte[] { 27, 91, 50, 59, 51, 48, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_DARK_RED => new byte[] { 27, 91, 50, 59, 51, 49, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_DARK_GREEN => new byte[] { 27, 91, 50, 59, 51, 50, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_DARK_YELLOW => new byte[] { 27, 91, 50, 59, 51, 51, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_DARK_BLUE => new byte[] { 27, 91, 50, 59, 51, 52, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_DARK_MAGENTA => new byte[] { 27, 91, 50, 59, 51, 53, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_DARK_CYAN => new byte[] { 27, 91, 50, 59, 51, 54, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_DARK_WHITE => new byte[] { 27, 91, 50, 59, 51, 55, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_BLACK => new byte[] { 27, 91, 48, 59, 52, 48, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_RED => new byte[] { 27, 91, 48, 59, 52, 49, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_GREEN => new byte[] { 27, 91, 48, 59, 52, 50, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_YELLOW => new byte[] { 27, 91, 48, 59, 52, 51, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_BLUE => new byte[] { 27, 91, 48, 59, 52, 52, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_MAGENTA => new byte[] { 27, 91, 48, 59, 52, 53, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_CYAN => new byte[] { 27, 91, 48, 59, 52, 54, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_WHITE => new byte[] { 27, 91, 48, 59, 52, 55, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_BRIGHT_BLACK => new byte[] { 27, 91, 49, 48, 48, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_BRIGHT_RED => new byte[] { 27, 91, 49, 48, 49, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_BRIGHT_GREEN => new byte[] { 27, 91, 49, 48, 50, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_BRIGHT_YELLOW => new byte[] { 27, 91, 49, 48, 51, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_BRIGHT_BLUE => new byte[] { 27, 91, 49, 48, 52, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_BRIGHT_MAGENTA => new byte[] { 27, 91, 49, 48, 53, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_BRIGHT_CYAN => new byte[] { 27, 91, 49, 48, 54, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_ANSI_BG_BRIGHT_WHITE => new byte[] { 27, 91, 49, 48, 55, 109, 0 };
        internal const uint SPA_JSON_ERROR_FLAG = 256;
        internal static ReadOnlySpan<byte> SPA_KEY_OBJECT_PATH => new byte[] { 111, 98, 106, 101, 99, 116, 46, 112, 97, 116, 104, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_MEDIA_CLASS => new byte[] { 109, 101, 100, 105, 97, 46, 99, 108, 97, 115, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_MEDIA_ROLE => new byte[] { 109, 101, 100, 105, 97, 46, 114, 111, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_UDEV => new byte[] { 97, 112, 105, 46, 117, 100, 101, 118, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_UDEV_MATCH => new byte[] { 97, 112, 105, 46, 117, 100, 101, 118, 46, 109, 97, 116, 99, 104, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PATH => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 97, 116, 104, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_CARD => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 99, 97, 114, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_USE_UCM => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 117, 115, 101, 45, 117, 99, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_IGNORE_DB => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 105, 103, 110, 111, 114, 101, 45, 100, 66, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_OPEN_UCM => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 111, 112, 101, 110, 46, 117, 99, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_DISABLE_LONGNAME => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 100, 105, 115, 97, 98, 108, 101, 45, 108, 111, 110, 103, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_BIND_CTLS => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 98, 105, 110, 100, 45, 99, 116, 108, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_SPLIT_ENABLE => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 115, 112, 108, 105, 116, 45, 101, 110, 97, 98, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_SPLIT_PARENT => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 115, 112, 108, 105, 116, 46, 112, 97, 114, 101, 110, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_CARD_ID => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 99, 97, 114, 100, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_CARD_COMPONENTS => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 99, 97, 114, 100, 46, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_CARD_DRIVER => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 99, 97, 114, 100, 46, 100, 114, 105, 118, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_CARD_NAME => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 99, 97, 114, 100, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_CARD_LONGNAME => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 99, 97, 114, 100, 46, 108, 111, 110, 103, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_CARD_MIXERNAME => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 99, 97, 114, 100, 46, 109, 105, 120, 101, 114, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PCM_ID => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PCM_CARD => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 99, 97, 114, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PCM_NAME => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PCM_SUBNAME => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 115, 117, 98, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PCM_STREAM => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 115, 116, 114, 101, 97, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PCM_CLASS => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 99, 108, 97, 115, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PCM_DEVICE => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PCM_SUBDEVICE => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 115, 117, 98, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PCM_SUBCLASS => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 115, 117, 98, 99, 108, 97, 115, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_PCM_SYNC_ID => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 115, 121, 110, 99, 45, 105, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_SPLIT_POSITION => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 115, 112, 108, 105, 116, 46, 112, 111, 115, 105, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_ALSA_SPLIT_HW_POSITION => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 115, 112, 108, 105, 116, 46, 104, 119, 45, 112, 111, 115, 105, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_V4L2 => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_V4L2_PATH => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 46, 112, 97, 116, 104, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_LIBCAMERA => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_LIBCAMERA_PATH => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 112, 97, 116, 104, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_LIBCAMERA_LOCATION => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 108, 111, 99, 97, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_LIBCAMERA_ROTATION => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 114, 111, 116, 97, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_LIBCAMERA_CAP_DRIVER => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 99, 97, 112, 46, 100, 114, 105, 118, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_LIBCAMERA_CAP_CARD => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 99, 97, 112, 46, 99, 97, 114, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_LIBCAMERA_CAP_BUS_INFO => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 99, 97, 112, 46, 98, 117, 115, 95, 105, 110, 102, 111, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_LIBCAMERA_CAP_VERSION => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 99, 97, 112, 46, 118, 101, 114, 115, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_LIBCAMERA_CAP_CAPABILITIES => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 99, 97, 112, 46, 99, 97, 112, 97, 98, 105, 108, 105, 116, 105, 101, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_LIBCAMERA_CAP_DEVICE_CAPS => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 99, 97, 112, 46, 100, 101, 118, 105, 99, 101, 45, 99, 97, 112, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_V4L2_CAP_DRIVER => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 46, 99, 97, 112, 46, 100, 114, 105, 118, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_V4L2_CAP_CARD => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 46, 99, 97, 112, 46, 99, 97, 114, 100, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_V4L2_CAP_BUS_INFO => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 46, 99, 97, 112, 46, 98, 117, 115, 95, 105, 110, 102, 111, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_V4L2_CAP_VERSION => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 46, 99, 97, 112, 46, 118, 101, 114, 115, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_V4L2_CAP_CAPABILITIES => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 46, 99, 97, 112, 46, 99, 97, 112, 97, 98, 105, 108, 105, 116, 105, 101, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_V4L2_CAP_DEVICE_CAPS => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 46, 99, 97, 112, 46, 100, 101, 118, 105, 99, 101, 45, 99, 97, 112, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5 => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5_PATH => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 112, 97, 116, 104, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5_DEVICE => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5_CONNECTION => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5_TRANSPORT => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5_PROFILE => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 112, 114, 111, 102, 105, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5_ADDRESS => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 97, 100, 100, 114, 101, 115, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5_CODEC => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 99, 111, 100, 101, 99, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5_CLASS => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 99, 108, 97, 115, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5_ICON => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 105, 99, 111, 110, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_BLUEZ5_ROLE => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 114, 111, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_JACK => new byte[] { 97, 112, 105, 46, 106, 97, 99, 107, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_JACK_SERVER => new byte[] { 97, 112, 105, 46, 106, 97, 99, 107, 46, 115, 101, 114, 118, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_JACK_CLIENT => new byte[] { 97, 112, 105, 46, 106, 97, 99, 107, 46, 99, 108, 105, 101, 110, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_KEY_API_GLIB_MAINLOOP => new byte[] { 97, 112, 105, 46, 103, 108, 105, 98, 46, 109, 97, 105, 110, 108, 111, 111, 112, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_SUPPORT_CPU => new byte[] { 115, 117, 112, 112, 111, 114, 116, 46, 99, 112, 117, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_SUPPORT_DBUS => new byte[] { 115, 117, 112, 112, 111, 114, 116, 46, 100, 98, 117, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_SUPPORT_LOG => new byte[] { 115, 117, 112, 112, 111, 114, 116, 46, 108, 111, 103, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_SUPPORT_LOOP => new byte[] { 115, 117, 112, 112, 111, 114, 116, 46, 108, 111, 111, 112, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_SUPPORT_SYSTEM => new byte[] { 115, 117, 112, 112, 111, 114, 116, 46, 115, 121, 115, 116, 101, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_SUPPORT_NODE_DRIVER => new byte[] { 115, 117, 112, 112, 111, 114, 116, 46, 110, 111, 100, 101, 46, 100, 114, 105, 118, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_CONTROL_MIXER => new byte[] { 99, 111, 110, 116, 114, 111, 108, 46, 109, 105, 120, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_AUDIO_MIXER => new byte[] { 97, 117, 100, 105, 111, 46, 109, 105, 120, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_AUDIO_MIXER_DSP => new byte[] { 97, 117, 100, 105, 111, 46, 109, 105, 120, 101, 114, 46, 100, 115, 112, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_AUDIO_PROCESS_FORMAT => new byte[] { 97, 117, 100, 105, 111, 46, 112, 114, 111, 99, 101, 115, 115, 46, 102, 111, 114, 109, 97, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_AUDIO_PROCESS_CHANNELMIX => new byte[] { 97, 117, 100, 105, 111, 46, 112, 114, 111, 99, 101, 115, 115, 46, 99, 104, 97, 110, 110, 101, 108, 109, 105, 120, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_AUDIO_PROCESS_RESAMPLE => new byte[] { 97, 117, 100, 105, 111, 46, 112, 114, 111, 99, 101, 115, 115, 46, 114, 101, 115, 97, 109, 112, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_AUDIO_PROCESS_DEINTERLEAVE => new byte[] { 97, 117, 100, 105, 111, 46, 112, 114, 111, 99, 101, 115, 115, 46, 100, 101, 105, 110, 116, 101, 114, 108, 101, 97, 118, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_AUDIO_PROCESS_INTERLEAVE => new byte[] { 97, 117, 100, 105, 111, 46, 112, 114, 111, 99, 101, 115, 115, 46, 105, 110, 116, 101, 114, 108, 101, 97, 118, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_AUDIO_CONVERT => new byte[] { 97, 117, 100, 105, 111, 46, 99, 111, 110, 118, 101, 114, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_AUDIO_ADAPT => new byte[] { 97, 117, 100, 105, 111, 46, 97, 100, 97, 112, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_AEC => new byte[] { 97, 117, 100, 105, 111, 46, 97, 101, 99, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_VIDEO_PROCESS_FORMAT => new byte[] { 118, 105, 100, 101, 111, 46, 112, 114, 111, 99, 101, 115, 115, 46, 102, 111, 114, 109, 97, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_VIDEO_PROCESS_SCALE => new byte[] { 118, 105, 100, 101, 111, 46, 112, 114, 111, 99, 101, 115, 115, 46, 115, 99, 97, 108, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_VIDEO_CONVERT => new byte[] { 118, 105, 100, 101, 111, 46, 99, 111, 110, 118, 101, 114, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_VIDEO_CONVERT_DUMMY => new byte[] { 118, 105, 100, 101, 111, 46, 99, 111, 110, 118, 101, 114, 116, 46, 100, 117, 109, 109, 121, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_VIDEO_ADAPT => new byte[] { 118, 105, 100, 101, 111, 46, 97, 100, 97, 112, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_ENUM_UDEV => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 101, 110, 117, 109, 46, 117, 100, 101, 118, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_PCM_DEVICE => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_PCM_SOURCE => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 115, 111, 117, 114, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_PCM_SINK => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 112, 99, 109, 46, 115, 105, 110, 107, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_SEQ_DEVICE => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 115, 101, 113, 46, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_SEQ_SOURCE => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 115, 101, 113, 46, 115, 111, 117, 114, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_SEQ_SINK => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 115, 101, 113, 46, 115, 105, 110, 107, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_SEQ_BRIDGE => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 115, 101, 113, 46, 98, 114, 105, 100, 103, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_ACP_DEVICE => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 97, 99, 112, 46, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_COMPRESS_OFFLOAD_DEVICE => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 99, 111, 109, 112, 114, 101, 115, 115, 46, 111, 102, 102, 108, 111, 97, 100, 46, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_ALSA_COMPRESS_OFFLOAD_SINK => new byte[] { 97, 112, 105, 46, 97, 108, 115, 97, 46, 99, 111, 109, 112, 114, 101, 115, 115, 46, 111, 102, 102, 108, 111, 97, 100, 46, 115, 105, 110, 107, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_BLUEZ5_ENUM_DBUS => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 101, 110, 117, 109, 46, 100, 98, 117, 115, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_BLUEZ5_DEVICE => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_BLUEZ5_MEDIA_SINK => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 109, 101, 100, 105, 97, 46, 115, 105, 110, 107, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_BLUEZ5_MEDIA_SOURCE => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 109, 101, 100, 105, 97, 46, 115, 111, 117, 114, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_BLUEZ5_A2DP_SINK => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 97, 50, 100, 112, 46, 115, 105, 110, 107, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_BLUEZ5_A2DP_SOURCE => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 97, 50, 100, 112, 46, 115, 111, 117, 114, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_BLUEZ5_SCO_SINK => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 115, 99, 111, 46, 115, 105, 110, 107, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_BLUEZ5_SCO_SOURCE => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 115, 99, 111, 46, 115, 111, 117, 114, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_BLUEZ5_MIDI_ENUM => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 109, 105, 100, 105, 46, 101, 110, 117, 109, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_BLUEZ5_MIDI_NODE => new byte[] { 97, 112, 105, 46, 98, 108, 117, 101, 122, 53, 46, 109, 105, 100, 105, 46, 110, 111, 100, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_CODEC_BLUEZ5_MEDIA => new byte[] { 97, 112, 105, 46, 99, 111, 100, 101, 99, 46, 98, 108, 117, 101, 122, 53, 46, 109, 101, 100, 105, 97, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_V4L2_ENUM_UDEV => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 46, 101, 110, 117, 109, 46, 117, 100, 101, 118, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_V4L2_DEVICE => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 46, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_V4L2_SOURCE => new byte[] { 97, 112, 105, 46, 118, 52, 108, 50, 46, 115, 111, 117, 114, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_LIBCAMERA_ENUM_CLIENT => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 101, 110, 117, 109, 46, 99, 108, 105, 101, 110, 116, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_LIBCAMERA_ENUM_MANAGER => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 101, 110, 117, 109, 46, 109, 97, 110, 97, 103, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_LIBCAMERA_DEVICE => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_LIBCAMERA_SOURCE => new byte[] { 97, 112, 105, 46, 108, 105, 98, 99, 97, 109, 101, 114, 97, 46, 115, 111, 117, 114, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_JACK_DEVICE => new byte[] { 97, 112, 105, 46, 106, 97, 99, 107, 46, 100, 101, 118, 105, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_JACK_SOURCE => new byte[] { 97, 112, 105, 46, 106, 97, 99, 107, 46, 115, 111, 117, 114, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_JACK_SINK => new byte[] { 97, 112, 105, 46, 106, 97, 99, 107, 46, 115, 105, 110, 107, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_VULKAN_COMPUTE_SOURCE => new byte[] { 97, 112, 105, 46, 118, 117, 108, 107, 97, 110, 46, 99, 111, 109, 112, 117, 116, 101, 46, 115, 111, 117, 114, 99, 101, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_VULKAN_COMPUTE_FILTER => new byte[] { 97, 112, 105, 46, 118, 117, 108, 107, 97, 110, 46, 99, 111, 109, 112, 117, 116, 101, 46, 102, 105, 108, 116, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_VULKAN_BLIT_FILTER => new byte[] { 97, 112, 105, 46, 118, 117, 108, 107, 97, 110, 46, 98, 108, 105, 116, 46, 102, 105, 108, 116, 101, 114, 0 };
        internal static ReadOnlySpan<byte> SPA_NAME_API_VULKAN_BLIT_DSP_FILTER => new byte[] { 97, 112, 105, 46, 118, 117, 108, 107, 97, 110, 46, 98, 108, 105, 116, 46, 100, 115, 112, 45, 102, 105, 108, 116, 101, 114, 0 };
        internal const uint SPA_ASYNC_BIT = 1073741824;
        internal const uint SPA_ASYNC_SEQ_MASK = 1073741823;
        internal const uint SPA_DIRECTION_INPUT = 0;
        internal const uint SPA_DIRECTION_OUTPUT = 1;
        internal const uint SPA_TYPE_START = 0;
        internal const uint SPA_TYPE_None = 1;
        internal const uint SPA_TYPE_Bool = 2;
        internal const uint SPA_TYPE_Id = 3;
        internal const uint SPA_TYPE_Int = 4;
        internal const uint SPA_TYPE_Long = 5;
        internal const uint SPA_TYPE_Float = 6;
        internal const uint SPA_TYPE_Double = 7;
        internal const uint SPA_TYPE_String = 8;
        internal const uint SPA_TYPE_Bytes = 9;
        internal const uint SPA_TYPE_Rectangle = 10;
        internal const uint SPA_TYPE_Fraction = 11;
        internal const uint SPA_TYPE_Bitmap = 12;
        internal const uint SPA_TYPE_Array = 13;
        internal const uint SPA_TYPE_Struct = 14;
        internal const uint SPA_TYPE_Object = 15;
        internal const uint SPA_TYPE_Sequence = 16;
        internal const uint SPA_TYPE_Pointer = 17;
        internal const uint SPA_TYPE_Fd = 18;
        internal const uint SPA_TYPE_Choice = 19;
        internal const uint SPA_TYPE_Pod = 20;
        internal const uint SPA_TYPE_POINTER_START = 65536;
        internal const uint SPA_TYPE_POINTER_Buffer = 65537;
        internal const uint SPA_TYPE_POINTER_Meta = 65538;
        internal const uint SPA_TYPE_POINTER_Dict = 65539;
        internal const uint SPA_TYPE_EVENT_START = 131072;
        internal const uint SPA_TYPE_EVENT_Device = 131073;
        internal const uint SPA_TYPE_EVENT_Node = 131074;
        internal const uint SPA_TYPE_COMMAND_START = 196608;
        internal const uint SPA_TYPE_COMMAND_Device = 196609;
        internal const uint SPA_TYPE_COMMAND_Node = 196610;
        internal const uint SPA_TYPE_OBJECT_START = 262144;
        internal const uint SPA_TYPE_OBJECT_PropInfo = 262145;
        internal const uint SPA_TYPE_OBJECT_Props = 262146;
        internal const uint SPA_TYPE_OBJECT_Format = 262147;
        internal const uint SPA_TYPE_OBJECT_ParamBuffers = 262148;
        internal const uint SPA_TYPE_OBJECT_ParamMeta = 262149;
        internal const uint SPA_TYPE_OBJECT_ParamIO = 262150;
        internal const uint SPA_TYPE_OBJECT_ParamProfile = 262151;
        internal const uint SPA_TYPE_OBJECT_ParamPortConfig = 262152;
        internal const uint SPA_TYPE_OBJECT_ParamRoute = 262153;
        internal const uint SPA_TYPE_OBJECT_Profiler = 262154;
        internal const uint SPA_TYPE_OBJECT_ParamLatency = 262155;
        internal const uint SPA_TYPE_OBJECT_ParamProcessLatency = 262156;
        internal const uint SPA_TYPE_OBJECT_ParamTag = 262157;
        internal const uint SPA_TYPE_VENDOR_PipeWire = 33554432;
        internal const uint SPA_TYPE_VENDOR_Other = 2130706432;
        internal const uint SPA_CHOICE_None = 0;
        internal const uint SPA_CHOICE_Range = 1;
        internal const uint SPA_CHOICE_Step = 2;
        internal const uint SPA_CHOICE_Enum = 3;
        internal const uint SPA_CHOICE_Flags = 4;
        internal const uint SPA_META_Invalid = 0;
        internal const uint SPA_META_Header = 1;
        internal const uint SPA_META_VideoCrop = 2;
        internal const uint SPA_META_VideoDamage = 3;
        internal const uint SPA_META_Bitmap = 4;
        internal const uint SPA_META_Cursor = 5;
        internal const uint SPA_META_Control = 6;
        internal const uint SPA_META_Busy = 7;
        internal const uint SPA_META_VideoTransform = 8;
        internal const uint SPA_META_SyncTimeline = 9;
        internal const uint SPA_META_TRANSFORMATION_None = 0;
        internal const uint SPA_META_TRANSFORMATION_90 = 1;
        internal const uint SPA_META_TRANSFORMATION_180 = 2;
        internal const uint SPA_META_TRANSFORMATION_270 = 3;
        internal const uint SPA_META_TRANSFORMATION_Flipped = 4;
        internal const uint SPA_META_TRANSFORMATION_Flipped90 = 5;
        internal const uint SPA_META_TRANSFORMATION_Flipped180 = 6;
        internal const uint SPA_META_TRANSFORMATION_Flipped270 = 7;
        internal const uint SPA_DATA_Invalid = 0;
        internal const uint SPA_DATA_MemPtr = 1;
        internal const uint SPA_DATA_MemFd = 2;
        internal const uint SPA_DATA_DmaBuf = 3;
        internal const uint SPA_DATA_MemId = 4;
        internal const uint SPA_DATA_SyncObj = 5;
        internal const uint SPA_CONTROL_Invalid = 0;
        internal const uint SPA_CONTROL_Properties = 1;
        internal const uint SPA_CONTROL_Midi = 2;
        internal const uint SPA_CONTROL_OSC = 3;
        internal const uint SPA_CONTROL_UMP = 4;
        internal const uint SPA_DEVICE_EVENT_ObjectConfig = 0;
        internal const uint SPA_EVENT_DEVICE_START = 0;
        internal const uint SPA_EVENT_DEVICE_Object = 1;
        internal const uint SPA_EVENT_DEVICE_Props = 2;
        internal const uint SPA_NODE_COMMAND_Suspend = 0;
        internal const uint SPA_NODE_COMMAND_Pause = 1;
        internal const uint SPA_NODE_COMMAND_Start = 2;
        internal const uint SPA_NODE_COMMAND_Enable = 3;
        internal const uint SPA_NODE_COMMAND_Disable = 4;
        internal const uint SPA_NODE_COMMAND_Flush = 5;
        internal const uint SPA_NODE_COMMAND_Drain = 6;
        internal const uint SPA_NODE_COMMAND_Marker = 7;
        internal const uint SPA_NODE_COMMAND_ParamBegin = 8;
        internal const uint SPA_NODE_COMMAND_ParamEnd = 9;
        internal const uint SPA_NODE_COMMAND_RequestProcess = 10;
        internal const uint SPA_NODE_EVENT_Error = 0;
        internal const uint SPA_NODE_EVENT_Buffering = 1;
        internal const uint SPA_NODE_EVENT_RequestRefresh = 2;
        internal const uint SPA_NODE_EVENT_RequestProcess = 3;
        internal const uint SPA_EVENT_NODE_START = 0;
        internal const uint SPA_IO_Invalid = 0;
        internal const uint SPA_IO_Buffers = 1;
        internal const uint SPA_IO_Range = 2;
        internal const uint SPA_IO_Clock = 3;
        internal const uint SPA_IO_Latency = 4;
        internal const uint SPA_IO_Control = 5;
        internal const uint SPA_IO_Notify = 6;
        internal const uint SPA_IO_Position = 7;
        internal const uint SPA_IO_RateMatch = 8;
        internal const uint SPA_IO_Memory = 9;
        internal const uint SPA_IO_AsyncBuffers = 10;
        internal const uint SPA_IO_POSITION_STATE_STOPPED = 0;
        internal const uint SPA_IO_POSITION_STATE_STARTING = 1;
        internal const uint SPA_IO_POSITION_STATE_RUNNING = 2;
        internal const uint SPA_PARAM_Invalid = 0;
        internal const uint SPA_PARAM_PropInfo = 1;
        internal const uint SPA_PARAM_Props = 2;
        internal const uint SPA_PARAM_EnumFormat = 3;
        internal const uint SPA_PARAM_Format = 4;
        internal const uint SPA_PARAM_Buffers = 5;
        internal const uint SPA_PARAM_Meta = 6;
        internal const uint SPA_PARAM_IO = 7;
        internal const uint SPA_PARAM_EnumProfile = 8;
        internal const uint SPA_PARAM_Profile = 9;
        internal const uint SPA_PARAM_EnumPortConfig = 10;
        internal const uint SPA_PARAM_PortConfig = 11;
        internal const uint SPA_PARAM_EnumRoute = 12;
        internal const uint SPA_PARAM_Route = 13;
        internal const uint SPA_PARAM_Control = 14;
        internal const uint SPA_PARAM_Latency = 15;
        internal const uint SPA_PARAM_ProcessLatency = 16;
        internal const uint SPA_PARAM_Tag = 17;
        internal const uint SPA_PARAM_BITORDER_unknown = 0;
        internal const uint SPA_PARAM_BITORDER_msb = 1;
        internal const uint SPA_PARAM_BITORDER_lsb = 2;
        internal const uint SPA_PARAM_AVAILABILITY_unknown = 0;
        internal const uint SPA_PARAM_AVAILABILITY_no = 1;
        internal const uint SPA_PARAM_AVAILABILITY_yes = 2;
        internal const uint SPA_PARAM_BUFFERS_START = 0;
        internal const uint SPA_PARAM_BUFFERS_buffers = 1;
        internal const uint SPA_PARAM_BUFFERS_blocks = 2;
        internal const uint SPA_PARAM_BUFFERS_size = 3;
        internal const uint SPA_PARAM_BUFFERS_stride = 4;
        internal const uint SPA_PARAM_BUFFERS_align = 5;
        internal const uint SPA_PARAM_BUFFERS_dataType = 6;
        internal const uint SPA_PARAM_BUFFERS_metaType = 7;
        internal const uint SPA_PARAM_META_START = 0;
        internal const uint SPA_PARAM_META_type = 1;
        internal const uint SPA_PARAM_META_size = 2;
        internal const uint SPA_PARAM_IO_START = 0;
        internal const uint SPA_PARAM_IO_id = 1;
        internal const uint SPA_PARAM_IO_size = 2;
        internal const uint SPA_PARAM_PROFILE_START = 0;
        internal const uint SPA_PARAM_PROFILE_index = 1;
        internal const uint SPA_PARAM_PROFILE_name = 2;
        internal const uint SPA_PARAM_PROFILE_description = 3;
        internal const uint SPA_PARAM_PROFILE_priority = 4;
        internal const uint SPA_PARAM_PROFILE_available = 5;
        internal const uint SPA_PARAM_PROFILE_info = 6;
        internal const uint SPA_PARAM_PROFILE_classes = 7;
        internal const uint SPA_PARAM_PROFILE_save = 8;
        internal const uint SPA_PARAM_PORT_CONFIG_MODE_none = 0;
        internal const uint SPA_PARAM_PORT_CONFIG_MODE_passthrough = 1;
        internal const uint SPA_PARAM_PORT_CONFIG_MODE_convert = 2;
        internal const uint SPA_PARAM_PORT_CONFIG_MODE_dsp = 3;
        internal const uint SPA_PARAM_PORT_CONFIG_START = 0;
        internal const uint SPA_PARAM_PORT_CONFIG_direction = 1;
        internal const uint SPA_PARAM_PORT_CONFIG_mode = 2;
        internal const uint SPA_PARAM_PORT_CONFIG_monitor = 3;
        internal const uint SPA_PARAM_PORT_CONFIG_control = 4;
        internal const uint SPA_PARAM_PORT_CONFIG_format = 5;
        internal const uint SPA_PARAM_ROUTE_START = 0;
        internal const uint SPA_PARAM_ROUTE_index = 1;
        internal const uint SPA_PARAM_ROUTE_direction = 2;
        internal const uint SPA_PARAM_ROUTE_device = 3;
        internal const uint SPA_PARAM_ROUTE_name = 4;
        internal const uint SPA_PARAM_ROUTE_description = 5;
        internal const uint SPA_PARAM_ROUTE_priority = 6;
        internal const uint SPA_PARAM_ROUTE_available = 7;
        internal const uint SPA_PARAM_ROUTE_info = 8;
        internal const uint SPA_PARAM_ROUTE_profiles = 9;
        internal const uint SPA_PARAM_ROUTE_props = 10;
        internal const uint SPA_PARAM_ROUTE_devices = 11;
        internal const uint SPA_PARAM_ROUTE_profile = 12;
        internal const uint SPA_PARAM_ROUTE_save = 13;
        internal const uint SPA_PROP_INFO_START = 0;
        internal const uint SPA_PROP_INFO_id = 1;
        internal const uint SPA_PROP_INFO_name = 2;
        internal const uint SPA_PROP_INFO_type = 3;
        internal const uint SPA_PROP_INFO_labels = 4;
        internal const uint SPA_PROP_INFO_container = 5;
        internal const uint SPA_PROP_INFO_params = 6;
        internal const uint SPA_PROP_INFO_description = 7;
        internal const uint SPA_PROP_START = 0;
        internal const uint SPA_PROP_unknown = 1;
        internal const uint SPA_PROP_START_Device = 256;
        internal const uint SPA_PROP_device = 257;
        internal const uint SPA_PROP_deviceName = 258;
        internal const uint SPA_PROP_deviceFd = 259;
        internal const uint SPA_PROP_card = 260;
        internal const uint SPA_PROP_cardName = 261;
        internal const uint SPA_PROP_minLatency = 262;
        internal const uint SPA_PROP_maxLatency = 263;
        internal const uint SPA_PROP_periods = 264;
        internal const uint SPA_PROP_periodSize = 265;
        internal const uint SPA_PROP_periodEvent = 266;
        internal const uint SPA_PROP_live = 267;
        internal const uint SPA_PROP_rate = 268;
        internal const uint SPA_PROP_quality = 269;
        internal const uint SPA_PROP_bluetoothAudioCodec = 270;
        internal const uint SPA_PROP_bluetoothOffloadActive = 271;
        internal const uint SPA_PROP_START_Audio = 65536;
        internal const uint SPA_PROP_waveType = 65537;
        internal const uint SPA_PROP_frequency = 65538;
        internal const uint SPA_PROP_volume = 65539;
        internal const uint SPA_PROP_mute = 65540;
        internal const uint SPA_PROP_patternType = 65541;
        internal const uint SPA_PROP_ditherType = 65542;
        internal const uint SPA_PROP_truncate = 65543;
        internal const uint SPA_PROP_channelVolumes = 65544;
        internal const uint SPA_PROP_volumeBase = 65545;
        internal const uint SPA_PROP_volumeStep = 65546;
        internal const uint SPA_PROP_channelMap = 65547;
        internal const uint SPA_PROP_monitorMute = 65548;
        internal const uint SPA_PROP_monitorVolumes = 65549;
        internal const uint SPA_PROP_latencyOffsetNsec = 65550;
        internal const uint SPA_PROP_softMute = 65551;
        internal const uint SPA_PROP_softVolumes = 65552;
        internal const uint SPA_PROP_iec958Codecs = 65553;
        internal const uint SPA_PROP_volumeRampSamples = 65554;
        internal const uint SPA_PROP_volumeRampStepSamples = 65555;
        internal const uint SPA_PROP_volumeRampTime = 65556;
        internal const uint SPA_PROP_volumeRampStepTime = 65557;
        internal const uint SPA_PROP_volumeRampScale = 65558;
        internal const uint SPA_PROP_START_Video = 131072;
        internal const uint SPA_PROP_brightness = 131073;
        internal const uint SPA_PROP_contrast = 131074;
        internal const uint SPA_PROP_saturation = 131075;
        internal const uint SPA_PROP_hue = 131076;
        internal const uint SPA_PROP_gamma = 131077;
        internal const uint SPA_PROP_exposure = 131078;
        internal const uint SPA_PROP_gain = 131079;
        internal const uint SPA_PROP_sharpness = 131080;
        internal const uint SPA_PROP_START_Other = 524288;
        internal const uint SPA_PROP_params = 524289;
        internal const uint SPA_PROP_START_CUSTOM = 16777216;
        internal const uint SPA_MEDIA_TYPE_unknown = 0;
        internal const uint SPA_MEDIA_TYPE_audio = 1;
        internal const uint SPA_MEDIA_TYPE_video = 2;
        internal const uint SPA_MEDIA_TYPE_image = 3;
        internal const uint SPA_MEDIA_TYPE_binary = 4;
        internal const uint SPA_MEDIA_TYPE_stream = 5;
        internal const uint SPA_MEDIA_TYPE_application = 6;
        internal const uint SPA_MEDIA_SUBTYPE_unknown = 0;
        internal const uint SPA_MEDIA_SUBTYPE_raw = 1;
        internal const uint SPA_MEDIA_SUBTYPE_dsp = 2;
        internal const uint SPA_MEDIA_SUBTYPE_iec958 = 3;
        internal const uint SPA_MEDIA_SUBTYPE_dsd = 4;
        internal const uint SPA_MEDIA_SUBTYPE_START_Audio = 65536;
        internal const uint SPA_MEDIA_SUBTYPE_mp3 = 65537;
        internal const uint SPA_MEDIA_SUBTYPE_aac = 65538;
        internal const uint SPA_MEDIA_SUBTYPE_vorbis = 65539;
        internal const uint SPA_MEDIA_SUBTYPE_wma = 65540;
        internal const uint SPA_MEDIA_SUBTYPE_ra = 65541;
        internal const uint SPA_MEDIA_SUBTYPE_sbc = 65542;
        internal const uint SPA_MEDIA_SUBTYPE_adpcm = 65543;
        internal const uint SPA_MEDIA_SUBTYPE_g723 = 65544;
        internal const uint SPA_MEDIA_SUBTYPE_g726 = 65545;
        internal const uint SPA_MEDIA_SUBTYPE_g729 = 65546;
        internal const uint SPA_MEDIA_SUBTYPE_amr = 65547;
        internal const uint SPA_MEDIA_SUBTYPE_gsm = 65548;
        internal const uint SPA_MEDIA_SUBTYPE_alac = 65549;
        internal const uint SPA_MEDIA_SUBTYPE_flac = 65550;
        internal const uint SPA_MEDIA_SUBTYPE_ape = 65551;
        internal const uint SPA_MEDIA_SUBTYPE_opus = 65552;
        internal const uint SPA_MEDIA_SUBTYPE_START_Video = 131072;
        internal const uint SPA_MEDIA_SUBTYPE_h264 = 131073;
        internal const uint SPA_MEDIA_SUBTYPE_mjpg = 131074;
        internal const uint SPA_MEDIA_SUBTYPE_dv = 131075;
        internal const uint SPA_MEDIA_SUBTYPE_mpegts = 131076;
        internal const uint SPA_MEDIA_SUBTYPE_h263 = 131077;
        internal const uint SPA_MEDIA_SUBTYPE_mpeg1 = 131078;
        internal const uint SPA_MEDIA_SUBTYPE_mpeg2 = 131079;
        internal const uint SPA_MEDIA_SUBTYPE_mpeg4 = 131080;
        internal const uint SPA_MEDIA_SUBTYPE_xvid = 131081;
        internal const uint SPA_MEDIA_SUBTYPE_vc1 = 131082;
        internal const uint SPA_MEDIA_SUBTYPE_vp8 = 131083;
        internal const uint SPA_MEDIA_SUBTYPE_vp9 = 131084;
        internal const uint SPA_MEDIA_SUBTYPE_bayer = 131085;
        internal const uint SPA_MEDIA_SUBTYPE_START_Image = 196608;
        internal const uint SPA_MEDIA_SUBTYPE_jpeg = 196609;
        internal const uint SPA_MEDIA_SUBTYPE_START_Binary = 262144;
        internal const uint SPA_MEDIA_SUBTYPE_START_Stream = 327680;
        internal const uint SPA_MEDIA_SUBTYPE_midi = 327681;
        internal const uint SPA_MEDIA_SUBTYPE_START_Application = 393216;
        internal const uint SPA_MEDIA_SUBTYPE_control = 393217;
        internal const uint SPA_FORMAT_START = 0;
        internal const uint SPA_FORMAT_mediaType = 1;
        internal const uint SPA_FORMAT_mediaSubtype = 2;
        internal const uint SPA_FORMAT_START_Audio = 65536;
        internal const uint SPA_FORMAT_AUDIO_format = 65537;
        internal const uint SPA_FORMAT_AUDIO_flags = 65538;
        internal const uint SPA_FORMAT_AUDIO_rate = 65539;
        internal const uint SPA_FORMAT_AUDIO_channels = 65540;
        internal const uint SPA_FORMAT_AUDIO_position = 65541;
        internal const uint SPA_FORMAT_AUDIO_iec958Codec = 65542;
        internal const uint SPA_FORMAT_AUDIO_bitorder = 65543;
        internal const uint SPA_FORMAT_AUDIO_interleave = 65544;
        internal const uint SPA_FORMAT_AUDIO_bitrate = 65545;
        internal const uint SPA_FORMAT_AUDIO_blockAlign = 65546;
        internal const uint SPA_FORMAT_AUDIO_AAC_streamFormat = 65547;
        internal const uint SPA_FORMAT_AUDIO_WMA_profile = 65548;
        internal const uint SPA_FORMAT_AUDIO_AMR_bandMode = 65549;
        internal const uint SPA_FORMAT_START_Video = 131072;
        internal const uint SPA_FORMAT_VIDEO_format = 131073;
        internal const uint SPA_FORMAT_VIDEO_modifier = 131074;
        internal const uint SPA_FORMAT_VIDEO_size = 131075;
        internal const uint SPA_FORMAT_VIDEO_framerate = 131076;
        internal const uint SPA_FORMAT_VIDEO_maxFramerate = 131077;
        internal const uint SPA_FORMAT_VIDEO_views = 131078;
        internal const uint SPA_FORMAT_VIDEO_interlaceMode = 131079;
        internal const uint SPA_FORMAT_VIDEO_pixelAspectRatio = 131080;
        internal const uint SPA_FORMAT_VIDEO_multiviewMode = 131081;
        internal const uint SPA_FORMAT_VIDEO_multiviewFlags = 131082;
        internal const uint SPA_FORMAT_VIDEO_chromaSite = 131083;
        internal const uint SPA_FORMAT_VIDEO_colorRange = 131084;
        internal const uint SPA_FORMAT_VIDEO_colorMatrix = 131085;
        internal const uint SPA_FORMAT_VIDEO_transferFunction = 131086;
        internal const uint SPA_FORMAT_VIDEO_colorPrimaries = 131087;
        internal const uint SPA_FORMAT_VIDEO_profile = 131088;
        internal const uint SPA_FORMAT_VIDEO_level = 131089;
        internal const uint SPA_FORMAT_VIDEO_H264_streamFormat = 131090;
        internal const uint SPA_FORMAT_VIDEO_H264_alignment = 131091;
        internal const uint SPA_FORMAT_START_Image = 196608;
        internal const uint SPA_FORMAT_START_Binary = 262144;
        internal const uint SPA_FORMAT_START_Stream = 327680;
        internal const uint SPA_FORMAT_START_Application = 393216;
        internal const uint SPA_FORMAT_CONTROL_types = 393217;
        internal const uint SPA_AUDIO_FORMAT_UNKNOWN = 0;
        internal const uint SPA_AUDIO_FORMAT_ENCODED = 1;
        internal const uint SPA_AUDIO_FORMAT_START_Interleaved = 256;
        internal const uint SPA_AUDIO_FORMAT_S8 = 257;
        internal const uint SPA_AUDIO_FORMAT_U8 = 258;
        internal const uint SPA_AUDIO_FORMAT_S16_LE = 259;
        internal const uint SPA_AUDIO_FORMAT_S16_BE = 260;
        internal const uint SPA_AUDIO_FORMAT_U16_LE = 261;
        internal const uint SPA_AUDIO_FORMAT_U16_BE = 262;
        internal const uint SPA_AUDIO_FORMAT_S24_32_LE = 263;
        internal const uint SPA_AUDIO_FORMAT_S24_32_BE = 264;
        internal const uint SPA_AUDIO_FORMAT_U24_32_LE = 265;
        internal const uint SPA_AUDIO_FORMAT_U24_32_BE = 266;
        internal const uint SPA_AUDIO_FORMAT_S32_LE = 267;
        internal const uint SPA_AUDIO_FORMAT_S32_BE = 268;
        internal const uint SPA_AUDIO_FORMAT_U32_LE = 269;
        internal const uint SPA_AUDIO_FORMAT_U32_BE = 270;
        internal const uint SPA_AUDIO_FORMAT_S24_LE = 271;
        internal const uint SPA_AUDIO_FORMAT_S24_BE = 272;
        internal const uint SPA_AUDIO_FORMAT_U24_LE = 273;
        internal const uint SPA_AUDIO_FORMAT_U24_BE = 274;
        internal const uint SPA_AUDIO_FORMAT_S20_LE = 275;
        internal const uint SPA_AUDIO_FORMAT_S20_BE = 276;
        internal const uint SPA_AUDIO_FORMAT_U20_LE = 277;
        internal const uint SPA_AUDIO_FORMAT_U20_BE = 278;
        internal const uint SPA_AUDIO_FORMAT_S18_LE = 279;
        internal const uint SPA_AUDIO_FORMAT_S18_BE = 280;
        internal const uint SPA_AUDIO_FORMAT_U18_LE = 281;
        internal const uint SPA_AUDIO_FORMAT_U18_BE = 282;
        internal const uint SPA_AUDIO_FORMAT_F32_LE = 283;
        internal const uint SPA_AUDIO_FORMAT_F32_BE = 284;
        internal const uint SPA_AUDIO_FORMAT_F64_LE = 285;
        internal const uint SPA_AUDIO_FORMAT_F64_BE = 286;
        internal const uint SPA_AUDIO_FORMAT_ULAW = 287;
        internal const uint SPA_AUDIO_FORMAT_ALAW = 288;
        internal const uint SPA_AUDIO_FORMAT_START_Planar = 512;
        internal const uint SPA_AUDIO_FORMAT_U8P = 513;
        internal const uint SPA_AUDIO_FORMAT_S16P = 514;
        internal const uint SPA_AUDIO_FORMAT_S24_32P = 515;
        internal const uint SPA_AUDIO_FORMAT_S32P = 516;
        internal const uint SPA_AUDIO_FORMAT_S24P = 517;
        internal const uint SPA_AUDIO_FORMAT_F32P = 518;
        internal const uint SPA_AUDIO_FORMAT_F64P = 519;
        internal const uint SPA_AUDIO_FORMAT_S8P = 520;
        internal const uint SPA_AUDIO_FORMAT_START_Other = 1024;
        internal const uint SPA_AUDIO_FORMAT_DSP_S32 = 515;
        internal const uint SPA_AUDIO_FORMAT_DSP_F32 = 518;
        internal const uint SPA_AUDIO_FORMAT_DSP_F64 = 519;
        internal const uint SPA_AUDIO_FORMAT_S16 = 259;
        internal const uint SPA_AUDIO_FORMAT_U16 = 261;
        internal const uint SPA_AUDIO_FORMAT_S24_32 = 263;
        internal const uint SPA_AUDIO_FORMAT_U24_32 = 265;
        internal const uint SPA_AUDIO_FORMAT_S32 = 267;
        internal const uint SPA_AUDIO_FORMAT_U32 = 269;
        internal const uint SPA_AUDIO_FORMAT_S24 = 271;
        internal const uint SPA_AUDIO_FORMAT_U24 = 273;
        internal const uint SPA_AUDIO_FORMAT_S20 = 275;
        internal const uint SPA_AUDIO_FORMAT_U20 = 277;
        internal const uint SPA_AUDIO_FORMAT_S18 = 279;
        internal const uint SPA_AUDIO_FORMAT_U18 = 281;
        internal const uint SPA_AUDIO_FORMAT_F32 = 283;
        internal const uint SPA_AUDIO_FORMAT_F64 = 285;
        internal const uint SPA_AUDIO_FORMAT_S16_OE = 260;
        internal const uint SPA_AUDIO_FORMAT_U16_OE = 262;
        internal const uint SPA_AUDIO_FORMAT_S24_32_OE = 264;
        internal const uint SPA_AUDIO_FORMAT_U24_32_OE = 266;
        internal const uint SPA_AUDIO_FORMAT_S32_OE = 268;
        internal const uint SPA_AUDIO_FORMAT_U32_OE = 270;
        internal const uint SPA_AUDIO_FORMAT_S24_OE = 272;
        internal const uint SPA_AUDIO_FORMAT_U24_OE = 274;
        internal const uint SPA_AUDIO_FORMAT_S20_OE = 276;
        internal const uint SPA_AUDIO_FORMAT_U20_OE = 278;
        internal const uint SPA_AUDIO_FORMAT_S18_OE = 280;
        internal const uint SPA_AUDIO_FORMAT_U18_OE = 282;
        internal const uint SPA_AUDIO_FORMAT_F32_OE = 284;
        internal const uint SPA_AUDIO_FORMAT_F64_OE = 286;
        internal const uint SPA_AUDIO_CHANNEL_UNKNOWN = 0;
        internal const uint SPA_AUDIO_CHANNEL_NA = 1;
        internal const uint SPA_AUDIO_CHANNEL_MONO = 2;
        internal const uint SPA_AUDIO_CHANNEL_FL = 3;
        internal const uint SPA_AUDIO_CHANNEL_FR = 4;
        internal const uint SPA_AUDIO_CHANNEL_FC = 5;
        internal const uint SPA_AUDIO_CHANNEL_LFE = 6;
        internal const uint SPA_AUDIO_CHANNEL_SL = 7;
        internal const uint SPA_AUDIO_CHANNEL_SR = 8;
        internal const uint SPA_AUDIO_CHANNEL_FLC = 9;
        internal const uint SPA_AUDIO_CHANNEL_FRC = 10;
        internal const uint SPA_AUDIO_CHANNEL_RC = 11;
        internal const uint SPA_AUDIO_CHANNEL_RL = 12;
        internal const uint SPA_AUDIO_CHANNEL_RR = 13;
        internal const uint SPA_AUDIO_CHANNEL_TC = 14;
        internal const uint SPA_AUDIO_CHANNEL_TFL = 15;
        internal const uint SPA_AUDIO_CHANNEL_TFC = 16;
        internal const uint SPA_AUDIO_CHANNEL_TFR = 17;
        internal const uint SPA_AUDIO_CHANNEL_TRL = 18;
        internal const uint SPA_AUDIO_CHANNEL_TRC = 19;
        internal const uint SPA_AUDIO_CHANNEL_TRR = 20;
        internal const uint SPA_AUDIO_CHANNEL_RLC = 21;
        internal const uint SPA_AUDIO_CHANNEL_RRC = 22;
        internal const uint SPA_AUDIO_CHANNEL_FLW = 23;
        internal const uint SPA_AUDIO_CHANNEL_FRW = 24;
        internal const uint SPA_AUDIO_CHANNEL_LFE2 = 25;
        internal const uint SPA_AUDIO_CHANNEL_FLH = 26;
        internal const uint SPA_AUDIO_CHANNEL_FCH = 27;
        internal const uint SPA_AUDIO_CHANNEL_FRH = 28;
        internal const uint SPA_AUDIO_CHANNEL_TFLC = 29;
        internal const uint SPA_AUDIO_CHANNEL_TFRC = 30;
        internal const uint SPA_AUDIO_CHANNEL_TSL = 31;
        internal const uint SPA_AUDIO_CHANNEL_TSR = 32;
        internal const uint SPA_AUDIO_CHANNEL_LLFE = 33;
        internal const uint SPA_AUDIO_CHANNEL_RLFE = 34;
        internal const uint SPA_AUDIO_CHANNEL_BC = 35;
        internal const uint SPA_AUDIO_CHANNEL_BLC = 36;
        internal const uint SPA_AUDIO_CHANNEL_BRC = 37;
        internal const uint SPA_AUDIO_CHANNEL_START_Aux = 4096;
        internal const uint SPA_AUDIO_CHANNEL_AUX0 = 4096;
        internal const uint SPA_AUDIO_CHANNEL_AUX1 = 4097;
        internal const uint SPA_AUDIO_CHANNEL_AUX2 = 4098;
        internal const uint SPA_AUDIO_CHANNEL_AUX3 = 4099;
        internal const uint SPA_AUDIO_CHANNEL_AUX4 = 4100;
        internal const uint SPA_AUDIO_CHANNEL_AUX5 = 4101;
        internal const uint SPA_AUDIO_CHANNEL_AUX6 = 4102;
        internal const uint SPA_AUDIO_CHANNEL_AUX7 = 4103;
        internal const uint SPA_AUDIO_CHANNEL_AUX8 = 4104;
        internal const uint SPA_AUDIO_CHANNEL_AUX9 = 4105;
        internal const uint SPA_AUDIO_CHANNEL_AUX10 = 4106;
        internal const uint SPA_AUDIO_CHANNEL_AUX11 = 4107;
        internal const uint SPA_AUDIO_CHANNEL_AUX12 = 4108;
        internal const uint SPA_AUDIO_CHANNEL_AUX13 = 4109;
        internal const uint SPA_AUDIO_CHANNEL_AUX14 = 4110;
        internal const uint SPA_AUDIO_CHANNEL_AUX15 = 4111;
        internal const uint SPA_AUDIO_CHANNEL_AUX16 = 4112;
        internal const uint SPA_AUDIO_CHANNEL_AUX17 = 4113;
        internal const uint SPA_AUDIO_CHANNEL_AUX18 = 4114;
        internal const uint SPA_AUDIO_CHANNEL_AUX19 = 4115;
        internal const uint SPA_AUDIO_CHANNEL_AUX20 = 4116;
        internal const uint SPA_AUDIO_CHANNEL_AUX21 = 4117;
        internal const uint SPA_AUDIO_CHANNEL_AUX22 = 4118;
        internal const uint SPA_AUDIO_CHANNEL_AUX23 = 4119;
        internal const uint SPA_AUDIO_CHANNEL_AUX24 = 4120;
        internal const uint SPA_AUDIO_CHANNEL_AUX25 = 4121;
        internal const uint SPA_AUDIO_CHANNEL_AUX26 = 4122;
        internal const uint SPA_AUDIO_CHANNEL_AUX27 = 4123;
        internal const uint SPA_AUDIO_CHANNEL_AUX28 = 4124;
        internal const uint SPA_AUDIO_CHANNEL_AUX29 = 4125;
        internal const uint SPA_AUDIO_CHANNEL_AUX30 = 4126;
        internal const uint SPA_AUDIO_CHANNEL_AUX31 = 4127;
        internal const uint SPA_AUDIO_CHANNEL_AUX32 = 4128;
        internal const uint SPA_AUDIO_CHANNEL_AUX33 = 4129;
        internal const uint SPA_AUDIO_CHANNEL_AUX34 = 4130;
        internal const uint SPA_AUDIO_CHANNEL_AUX35 = 4131;
        internal const uint SPA_AUDIO_CHANNEL_AUX36 = 4132;
        internal const uint SPA_AUDIO_CHANNEL_AUX37 = 4133;
        internal const uint SPA_AUDIO_CHANNEL_AUX38 = 4134;
        internal const uint SPA_AUDIO_CHANNEL_AUX39 = 4135;
        internal const uint SPA_AUDIO_CHANNEL_AUX40 = 4136;
        internal const uint SPA_AUDIO_CHANNEL_AUX41 = 4137;
        internal const uint SPA_AUDIO_CHANNEL_AUX42 = 4138;
        internal const uint SPA_AUDIO_CHANNEL_AUX43 = 4139;
        internal const uint SPA_AUDIO_CHANNEL_AUX44 = 4140;
        internal const uint SPA_AUDIO_CHANNEL_AUX45 = 4141;
        internal const uint SPA_AUDIO_CHANNEL_AUX46 = 4142;
        internal const uint SPA_AUDIO_CHANNEL_AUX47 = 4143;
        internal const uint SPA_AUDIO_CHANNEL_AUX48 = 4144;
        internal const uint SPA_AUDIO_CHANNEL_AUX49 = 4145;
        internal const uint SPA_AUDIO_CHANNEL_AUX50 = 4146;
        internal const uint SPA_AUDIO_CHANNEL_AUX51 = 4147;
        internal const uint SPA_AUDIO_CHANNEL_AUX52 = 4148;
        internal const uint SPA_AUDIO_CHANNEL_AUX53 = 4149;
        internal const uint SPA_AUDIO_CHANNEL_AUX54 = 4150;
        internal const uint SPA_AUDIO_CHANNEL_AUX55 = 4151;
        internal const uint SPA_AUDIO_CHANNEL_AUX56 = 4152;
        internal const uint SPA_AUDIO_CHANNEL_AUX57 = 4153;
        internal const uint SPA_AUDIO_CHANNEL_AUX58 = 4154;
        internal const uint SPA_AUDIO_CHANNEL_AUX59 = 4155;
        internal const uint SPA_AUDIO_CHANNEL_AUX60 = 4156;
        internal const uint SPA_AUDIO_CHANNEL_AUX61 = 4157;
        internal const uint SPA_AUDIO_CHANNEL_AUX62 = 4158;
        internal const uint SPA_AUDIO_CHANNEL_AUX63 = 4159;
        internal const uint SPA_AUDIO_CHANNEL_LAST_Aux = 8191;
        internal const uint SPA_AUDIO_CHANNEL_START_Custom = 65536;
        internal const uint SPA_AUDIO_VOLUME_RAMP_INVALID = 0;
        internal const uint SPA_AUDIO_VOLUME_RAMP_LINEAR = 1;
        internal const uint SPA_AUDIO_VOLUME_RAMP_CUBIC = 2;
        internal const uint SPA_AUDIO_IEC958_CODEC_UNKNOWN = 0;
        internal const uint SPA_AUDIO_IEC958_CODEC_PCM = 1;
        internal const uint SPA_AUDIO_IEC958_CODEC_DTS = 2;
        internal const uint SPA_AUDIO_IEC958_CODEC_AC3 = 3;
        internal const uint SPA_AUDIO_IEC958_CODEC_MPEG = 4;
        internal const uint SPA_AUDIO_IEC958_CODEC_MPEG2_AAC = 5;
        internal const uint SPA_AUDIO_IEC958_CODEC_EAC3 = 6;
        internal const uint SPA_AUDIO_IEC958_CODEC_TRUEHD = 7;
        internal const uint SPA_AUDIO_IEC958_CODEC_DTSHD = 8;
        internal const uint SPA_AUDIO_MP3_CHANNEL_MODE_UNKNOWN = 0;
        internal const uint SPA_AUDIO_MP3_CHANNEL_MODE_MONO = 1;
        internal const uint SPA_AUDIO_MP3_CHANNEL_MODE_STEREO = 2;
        internal const uint SPA_AUDIO_MP3_CHANNEL_MODE_JOINTSTEREO = 3;
        internal const uint SPA_AUDIO_MP3_CHANNEL_MODE_DUAL = 4;
        internal const uint SPA_AUDIO_AAC_STREAM_FORMAT_UNKNOWN = 0;
        internal const uint SPA_AUDIO_AAC_STREAM_FORMAT_RAW = 1;
        internal const uint SPA_AUDIO_AAC_STREAM_FORMAT_MP2ADTS = 2;
        internal const uint SPA_AUDIO_AAC_STREAM_FORMAT_MP4ADTS = 3;
        internal const uint SPA_AUDIO_AAC_STREAM_FORMAT_MP4LOAS = 4;
        internal const uint SPA_AUDIO_AAC_STREAM_FORMAT_MP4LATM = 5;
        internal const uint SPA_AUDIO_AAC_STREAM_FORMAT_ADIF = 6;
        internal const uint SPA_AUDIO_AAC_STREAM_FORMAT_MP4FF = 7;
        internal const uint SPA_AUDIO_AAC_STREAM_FORMAT_CUSTOM = 65536;
        internal const uint SPA_AUDIO_WMA_PROFILE_UNKNOWN = 0;
        internal const uint SPA_AUDIO_WMA_PROFILE_WMA7 = 1;
        internal const uint SPA_AUDIO_WMA_PROFILE_WMA8 = 2;
        internal const uint SPA_AUDIO_WMA_PROFILE_WMA9 = 3;
        internal const uint SPA_AUDIO_WMA_PROFILE_WMA10 = 4;
        internal const uint SPA_AUDIO_WMA_PROFILE_WMA9_PRO = 5;
        internal const uint SPA_AUDIO_WMA_PROFILE_WMA9_LOSSLESS = 6;
        internal const uint SPA_AUDIO_WMA_PROFILE_WMA10_LOSSLESS = 7;
        internal const uint SPA_AUDIO_WMA_PROFILE_CUSTOM = 65536;
        internal const uint SPA_AUDIO_AMR_BAND_MODE_UNKNOWN = 0;
        internal const uint SPA_AUDIO_AMR_BAND_MODE_NB = 1;
        internal const uint SPA_AUDIO_AMR_BAND_MODE_WB = 2;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_START = 0;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_SBC = 1;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_SBC_XQ = 2;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_MPEG = 3;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_AAC = 4;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_AAC_ELD = 5;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_APTX = 6;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_APTX_HD = 7;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_LDAC = 8;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_APTX_LL = 9;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_APTX_LL_DUPLEX = 10;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_FASTSTREAM = 11;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_FASTSTREAM_DUPLEX = 12;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_LC3PLUS_HR = 13;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_OPUS_05 = 14;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_OPUS_05_51 = 15;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_OPUS_05_71 = 16;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_OPUS_05_DUPLEX = 17;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_OPUS_05_PRO = 18;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_OPUS_G = 19;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_CVSD = 256;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_MSBC = 257;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_LC3_SWB = 258;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_LC3 = 512;
        internal const uint SPA_BLUETOOTH_AUDIO_CODEC_G722 = 768;
        internal const uint SPA_VIDEO_CHROMA_SITE_UNKNOWN = 0;
        internal const uint SPA_VIDEO_CHROMA_SITE_NONE = 1;
        internal const uint SPA_VIDEO_CHROMA_SITE_H_COSITED = 2;
        internal const uint SPA_VIDEO_CHROMA_SITE_V_COSITED = 4;
        internal const uint SPA_VIDEO_CHROMA_SITE_ALT_LINE = 8;
        internal const uint SPA_VIDEO_CHROMA_SITE_COSITED = 6;
        internal const uint SPA_VIDEO_CHROMA_SITE_JPEG = 1;
        internal const uint SPA_VIDEO_CHROMA_SITE_MPEG2 = 2;
        internal const uint SPA_VIDEO_CHROMA_SITE_DV = 14;
        internal const uint SPA_VIDEO_COLOR_RANGE_UNKNOWN = 0;
        internal const uint SPA_VIDEO_COLOR_RANGE_0_255 = 1;
        internal const uint SPA_VIDEO_COLOR_RANGE_16_235 = 2;
        internal const uint SPA_VIDEO_COLOR_MATRIX_UNKNOWN = 0;
        internal const uint SPA_VIDEO_COLOR_MATRIX_RGB = 1;
        internal const uint SPA_VIDEO_COLOR_MATRIX_FCC = 2;
        internal const uint SPA_VIDEO_COLOR_MATRIX_BT709 = 3;
        internal const uint SPA_VIDEO_COLOR_MATRIX_BT601 = 4;
        internal const uint SPA_VIDEO_COLOR_MATRIX_SMPTE240M = 5;
        internal const uint SPA_VIDEO_COLOR_MATRIX_BT2020 = 6;
        internal const uint SPA_VIDEO_TRANSFER_UNKNOWN = 0;
        internal const uint SPA_VIDEO_TRANSFER_GAMMA10 = 1;
        internal const uint SPA_VIDEO_TRANSFER_GAMMA18 = 2;
        internal const uint SPA_VIDEO_TRANSFER_GAMMA20 = 3;
        internal const uint SPA_VIDEO_TRANSFER_GAMMA22 = 4;
        internal const uint SPA_VIDEO_TRANSFER_BT709 = 5;
        internal const uint SPA_VIDEO_TRANSFER_SMPTE240M = 6;
        internal const uint SPA_VIDEO_TRANSFER_SRGB = 7;
        internal const uint SPA_VIDEO_TRANSFER_GAMMA28 = 8;
        internal const uint SPA_VIDEO_TRANSFER_LOG100 = 9;
        internal const uint SPA_VIDEO_TRANSFER_LOG316 = 10;
        internal const uint SPA_VIDEO_TRANSFER_BT2020_12 = 11;
        internal const uint SPA_VIDEO_TRANSFER_ADOBERGB = 12;
        internal const uint SPA_VIDEO_COLOR_PRIMARIES_UNKNOWN = 0;
        internal const uint SPA_VIDEO_COLOR_PRIMARIES_BT709 = 1;
        internal const uint SPA_VIDEO_COLOR_PRIMARIES_BT470M = 2;
        internal const uint SPA_VIDEO_COLOR_PRIMARIES_BT470BG = 3;
        internal const uint SPA_VIDEO_COLOR_PRIMARIES_SMPTE170M = 4;
        internal const uint SPA_VIDEO_COLOR_PRIMARIES_SMPTE240M = 5;
        internal const uint SPA_VIDEO_COLOR_PRIMARIES_FILM = 6;
        internal const uint SPA_VIDEO_COLOR_PRIMARIES_BT2020 = 7;
        internal const uint SPA_VIDEO_COLOR_PRIMARIES_ADOBERGB = 8;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_MONO = 0;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_LEFT = 1;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_RIGHT = 2;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_SIDE_BY_SIDE = 3;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_SIDE_BY_SIDE_QUINCUNX = 4;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_COLUMN_INTERLEAVED = 5;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_ROW_INTERLEAVED = 6;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_TOP_BOTTOM = 7;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_CHECKERBOARD = 8;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_FRAME_BY_FRAME = 32;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_MULTIVIEW_FRAME_BY_FRAME = 33;
        internal const int SPA_VIDEO_MULTIVIEW_MODE_SEPARATED = 34;
        internal const uint SPA_VIDEO_MULTIVIEW_FLAGS_NONE = 0;
        internal const uint SPA_VIDEO_MULTIVIEW_FLAGS_RIGHT_VIEW_FIRST = 1;
        internal const uint SPA_VIDEO_MULTIVIEW_FLAGS_LEFT_FLIPPED = 2;
        internal const uint SPA_VIDEO_MULTIVIEW_FLAGS_LEFT_FLOPPED = 4;
        internal const uint SPA_VIDEO_MULTIVIEW_FLAGS_RIGHT_FLIPPED = 8;
        internal const uint SPA_VIDEO_MULTIVIEW_FLAGS_RIGHT_FLOPPED = 16;
        internal const uint SPA_VIDEO_MULTIVIEW_FLAGS_HALF_ASPECT = 16384;
        internal const uint SPA_VIDEO_MULTIVIEW_FLAGS_MIXED_MONO = 32768;
        internal const uint SPA_VIDEO_FORMAT_UNKNOWN = 0;
        internal const uint SPA_VIDEO_FORMAT_ENCODED = 1;
        internal const uint SPA_VIDEO_FORMAT_I420 = 2;
        internal const uint SPA_VIDEO_FORMAT_YV12 = 3;
        internal const uint SPA_VIDEO_FORMAT_YUY2 = 4;
        internal const uint SPA_VIDEO_FORMAT_UYVY = 5;
        internal const uint SPA_VIDEO_FORMAT_AYUV = 6;
        internal const uint SPA_VIDEO_FORMAT_RGBx = 7;
        internal const uint SPA_VIDEO_FORMAT_BGRx = 8;
        internal const uint SPA_VIDEO_FORMAT_xRGB = 9;
        internal const uint SPA_VIDEO_FORMAT_xBGR = 10;
        internal const uint SPA_VIDEO_FORMAT_RGBA = 11;
        internal const uint SPA_VIDEO_FORMAT_BGRA = 12;
        internal const uint SPA_VIDEO_FORMAT_ARGB = 13;
        internal const uint SPA_VIDEO_FORMAT_ABGR = 14;
        internal const uint SPA_VIDEO_FORMAT_RGB = 15;
        internal const uint SPA_VIDEO_FORMAT_BGR = 16;
        internal const uint SPA_VIDEO_FORMAT_Y41B = 17;
        internal const uint SPA_VIDEO_FORMAT_Y42B = 18;
        internal const uint SPA_VIDEO_FORMAT_YVYU = 19;
        internal const uint SPA_VIDEO_FORMAT_Y444 = 20;
        internal const uint SPA_VIDEO_FORMAT_v210 = 21;
        internal const uint SPA_VIDEO_FORMAT_v216 = 22;
        internal const uint SPA_VIDEO_FORMAT_NV12 = 23;
        internal const uint SPA_VIDEO_FORMAT_NV21 = 24;
        internal const uint SPA_VIDEO_FORMAT_GRAY8 = 25;
        internal const uint SPA_VIDEO_FORMAT_GRAY16_BE = 26;
        internal const uint SPA_VIDEO_FORMAT_GRAY16_LE = 27;
        internal const uint SPA_VIDEO_FORMAT_v308 = 28;
        internal const uint SPA_VIDEO_FORMAT_RGB16 = 29;
        internal const uint SPA_VIDEO_FORMAT_BGR16 = 30;
        internal const uint SPA_VIDEO_FORMAT_RGB15 = 31;
        internal const uint SPA_VIDEO_FORMAT_BGR15 = 32;
        internal const uint SPA_VIDEO_FORMAT_UYVP = 33;
        internal const uint SPA_VIDEO_FORMAT_A420 = 34;
        internal const uint SPA_VIDEO_FORMAT_RGB8P = 35;
        internal const uint SPA_VIDEO_FORMAT_YUV9 = 36;
        internal const uint SPA_VIDEO_FORMAT_YVU9 = 37;
        internal const uint SPA_VIDEO_FORMAT_IYU1 = 38;
        internal const uint SPA_VIDEO_FORMAT_ARGB64 = 39;
        internal const uint SPA_VIDEO_FORMAT_AYUV64 = 40;
        internal const uint SPA_VIDEO_FORMAT_r210 = 41;
        internal const uint SPA_VIDEO_FORMAT_I420_10BE = 42;
        internal const uint SPA_VIDEO_FORMAT_I420_10LE = 43;
        internal const uint SPA_VIDEO_FORMAT_I422_10BE = 44;
        internal const uint SPA_VIDEO_FORMAT_I422_10LE = 45;
        internal const uint SPA_VIDEO_FORMAT_Y444_10BE = 46;
        internal const uint SPA_VIDEO_FORMAT_Y444_10LE = 47;
        internal const uint SPA_VIDEO_FORMAT_GBR = 48;
        internal const uint SPA_VIDEO_FORMAT_GBR_10BE = 49;
        internal const uint SPA_VIDEO_FORMAT_GBR_10LE = 50;
        internal const uint SPA_VIDEO_FORMAT_NV16 = 51;
        internal const uint SPA_VIDEO_FORMAT_NV24 = 52;
        internal const uint SPA_VIDEO_FORMAT_NV12_64Z32 = 53;
        internal const uint SPA_VIDEO_FORMAT_A420_10BE = 54;
        internal const uint SPA_VIDEO_FORMAT_A420_10LE = 55;
        internal const uint SPA_VIDEO_FORMAT_A422_10BE = 56;
        internal const uint SPA_VIDEO_FORMAT_A422_10LE = 57;
        internal const uint SPA_VIDEO_FORMAT_A444_10BE = 58;
        internal const uint SPA_VIDEO_FORMAT_A444_10LE = 59;
        internal const uint SPA_VIDEO_FORMAT_NV61 = 60;
        internal const uint SPA_VIDEO_FORMAT_P010_10BE = 61;
        internal const uint SPA_VIDEO_FORMAT_P010_10LE = 62;
        internal const uint SPA_VIDEO_FORMAT_IYU2 = 63;
        internal const uint SPA_VIDEO_FORMAT_VYUY = 64;
        internal const uint SPA_VIDEO_FORMAT_GBRA = 65;
        internal const uint SPA_VIDEO_FORMAT_GBRA_10BE = 66;
        internal const uint SPA_VIDEO_FORMAT_GBRA_10LE = 67;
        internal const uint SPA_VIDEO_FORMAT_GBR_12BE = 68;
        internal const uint SPA_VIDEO_FORMAT_GBR_12LE = 69;
        internal const uint SPA_VIDEO_FORMAT_GBRA_12BE = 70;
        internal const uint SPA_VIDEO_FORMAT_GBRA_12LE = 71;
        internal const uint SPA_VIDEO_FORMAT_I420_12BE = 72;
        internal const uint SPA_VIDEO_FORMAT_I420_12LE = 73;
        internal const uint SPA_VIDEO_FORMAT_I422_12BE = 74;
        internal const uint SPA_VIDEO_FORMAT_I422_12LE = 75;
        internal const uint SPA_VIDEO_FORMAT_Y444_12BE = 76;
        internal const uint SPA_VIDEO_FORMAT_Y444_12LE = 77;
        internal const uint SPA_VIDEO_FORMAT_RGBA_F16 = 78;
        internal const uint SPA_VIDEO_FORMAT_RGBA_F32 = 79;
        internal const uint SPA_VIDEO_FORMAT_xRGB_210LE = 80;
        internal const uint SPA_VIDEO_FORMAT_xBGR_210LE = 81;
        internal const uint SPA_VIDEO_FORMAT_RGBx_102LE = 82;
        internal const uint SPA_VIDEO_FORMAT_BGRx_102LE = 83;
        internal const uint SPA_VIDEO_FORMAT_ARGB_210LE = 84;
        internal const uint SPA_VIDEO_FORMAT_ABGR_210LE = 85;
        internal const uint SPA_VIDEO_FORMAT_RGBA_102LE = 86;
        internal const uint SPA_VIDEO_FORMAT_BGRA_102LE = 87;
        internal const uint SPA_VIDEO_FORMAT_DSP_F32 = 79;
        internal const uint SPA_VIDEO_FLAG_NONE = 0;
        internal const uint SPA_VIDEO_FLAG_VARIABLE_FPS = 1;
        internal const uint SPA_VIDEO_FLAG_PREMULTIPLIED_ALPHA = 2;
        internal const uint SPA_VIDEO_FLAG_MODIFIER = 4;
        internal const uint SPA_VIDEO_FLAG_MODIFIER_FIXATION_REQUIRED = 8;
        internal const uint SPA_VIDEO_INTERLACE_MODE_PROGRESSIVE = 0;
        internal const uint SPA_VIDEO_INTERLACE_MODE_INTERLEAVED = 1;
        internal const uint SPA_VIDEO_INTERLACE_MODE_MIXED = 2;
        internal const uint SPA_VIDEO_INTERLACE_MODE_FIELDS = 3;
        internal const uint SPA_PARAM_LATENCY_START = 0;
        internal const uint SPA_PARAM_LATENCY_direction = 1;
        internal const uint SPA_PARAM_LATENCY_minQuantum = 2;
        internal const uint SPA_PARAM_LATENCY_maxQuantum = 3;
        internal const uint SPA_PARAM_LATENCY_minRate = 4;
        internal const uint SPA_PARAM_LATENCY_maxRate = 5;
        internal const uint SPA_PARAM_LATENCY_minNs = 6;
        internal const uint SPA_PARAM_LATENCY_maxNs = 7;
        internal const uint SPA_PARAM_PROCESS_LATENCY_START = 0;
        internal const uint SPA_PARAM_PROCESS_LATENCY_quantum = 1;
        internal const uint SPA_PARAM_PROCESS_LATENCY_rate = 2;
        internal const uint SPA_PARAM_PROCESS_LATENCY_ns = 3;
        internal const uint SPA_PROFILER_START = 0;
        internal const uint SPA_PROFILER_START_Driver = 65536;
        internal const uint SPA_PROFILER_info = 65537;
        internal const uint SPA_PROFILER_clock = 65538;
        internal const uint SPA_PROFILER_driverBlock = 65539;
        internal const uint SPA_PROFILER_START_Follower = 131072;
        internal const uint SPA_PROFILER_followerBlock = 131073;
        internal const uint SPA_PROFILER_followerClock = 131074;
        internal const uint SPA_PROFILER_START_CUSTOM = 16777216;
        internal const uint SPA_PARAM_TAG_START = 0;
        internal const uint SPA_PARAM_TAG_direction = 1;
        internal const uint SPA_PARAM_TAG_info = 2;
        internal const uint SPA_H264_STREAM_FORMAT_UNKNOWN = 0;
        internal const uint SPA_H264_STREAM_FORMAT_AVC = 1;
        internal const uint SPA_H264_STREAM_FORMAT_AVC3 = 2;
        internal const uint SPA_H264_STREAM_FORMAT_BYTESTREAM = 3;
        internal const uint SPA_H264_ALIGNMENT_UNKNOWN = 0;
        internal const uint SPA_H264_ALIGNMENT_AU = 1;
        internal const uint SPA_H264_ALIGNMENT_NAL = 2;
        internal const uint SPA_DBUS_TYPE_SESSION = 0;
        internal const uint SPA_DBUS_TYPE_SYSTEM = 1;
        internal const uint SPA_DBUS_TYPE_STARTER = 2;
        internal const uint SPA_LOG_LEVEL_NONE = 0;
        internal const uint SPA_LOG_LEVEL_ERROR = 1;
        internal const uint SPA_LOG_LEVEL_WARN = 2;
        internal const uint SPA_LOG_LEVEL_INFO = 3;
        internal const uint SPA_LOG_LEVEL_DEBUG = 4;
        internal const uint SPA_LOG_LEVEL_TRACE = 5;
        internal static ReadOnlySpan<byte> PW_TYPE_INFO_BASE => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 0 };
        internal static ReadOnlySpan<byte> PW_TYPE_INFO_Object => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 79, 98, 106, 101, 99, 116, 0 };
        internal static ReadOnlySpan<byte> PW_TYPE_INFO_OBJECT_BASE => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 79, 98, 106, 101, 99, 116, 58, 0 };
        internal static ReadOnlySpan<byte> PW_TYPE_INFO_Interface => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 0 };
        internal static ReadOnlySpan<byte> PW_TYPE_INFO_INTERFACE_BASE => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 0 };
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Core => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 67, 111, 114, 101, 0 };
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Registry => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 82, 101, 103, 105, 115, 116, 114, 121, 0 };
        internal const uint PW_VERSION_CORE = 4;
        internal const uint PW_VERSION_REGISTRY = 3;
        internal static ReadOnlySpan<byte> PW_DEFAULT_REMOTE => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 45, 48, 0 };
        internal const uint PW_ID_CORE = 0;
        internal const uint PW_CORE_CHANGE_MASK_PROPS = 1;
        internal const uint PW_CORE_CHANGE_MASK_ALL = 1;
        internal const uint PW_PROPERTIES_FLAG_NL = 1;
        internal const uint PW_PROPERTIES_FLAG_RECURSE = 2;
        internal const uint PW_PROPERTIES_FLAG_ENCLOSE = 4;
        internal const uint PW_PROPERTIES_FLAG_ARRAY = 8;
        internal const uint PW_PROPERTIES_FLAG_COLORS = 16;
        internal const uint PW_CORE_EVENT_INFO = 0;
        internal const uint PW_CORE_EVENT_DONE = 1;
        internal const uint PW_CORE_EVENT_PING = 2;
        internal const uint PW_CORE_EVENT_ERROR = 3;
        internal const uint PW_CORE_EVENT_REMOVE_ID = 4;
        internal const uint PW_CORE_EVENT_BOUND_ID = 5;
        internal const uint PW_CORE_EVENT_ADD_MEM = 6;
        internal const uint PW_CORE_EVENT_REMOVE_MEM = 7;
        internal const uint PW_CORE_EVENT_BOUND_PROPS = 8;
        internal const uint PW_CORE_EVENT_NUM = 9;
        internal const uint PW_VERSION_CORE_EVENTS = 1;
        internal const uint PW_CORE_METHOD_ADD_LISTENER = 0;
        internal const uint PW_CORE_METHOD_HELLO = 1;
        internal const uint PW_CORE_METHOD_SYNC = 2;
        internal const uint PW_CORE_METHOD_PONG = 3;
        internal const uint PW_CORE_METHOD_ERROR = 4;
        internal const uint PW_CORE_METHOD_GET_REGISTRY = 5;
        internal const uint PW_CORE_METHOD_CREATE_OBJECT = 6;
        internal const uint PW_CORE_METHOD_DESTROY = 7;
        internal const uint PW_CORE_METHOD_NUM = 8;
        internal const uint PW_VERSION_CORE_METHODS = 0;
        internal const uint PW_REGISTRY_EVENT_GLOBAL = 0;
        internal const uint PW_REGISTRY_EVENT_GLOBAL_REMOVE = 1;
        internal const uint PW_REGISTRY_EVENT_NUM = 2;
        internal const uint PW_VERSION_REGISTRY_EVENTS = 0;
        internal const uint PW_REGISTRY_METHOD_ADD_LISTENER = 0;
        internal const uint PW_REGISTRY_METHOD_BIND = 1;
        internal const uint PW_REGISTRY_METHOD_DESTROY = 2;
        internal const uint PW_REGISTRY_METHOD_NUM = 3;
        internal const uint PW_VERSION_REGISTRY_METHODS = 0;
        internal const uint PW_VERSION_CONTEXT_EVENTS = 1;
        internal static ReadOnlySpan<byte> PW_TYPE_INFO_Protocol => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 80, 114, 111, 116, 111, 99, 111, 108, 0 };
        internal static ReadOnlySpan<byte> PW_TYPE_INFO_PROTOCOL_BASE => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 80, 114, 111, 116, 111, 99, 111, 108, 58, 0 };
        internal const uint PW_PROTOCOL_MARSHAL_FLAG_IMPL = 1;
        internal const uint PW_VERSION_PROTOCOL_IMPLEMENTATION = 1;
        internal const uint PW_VERSION_PROTOCOL_EVENTS = 0;
        internal const uint PW_VERSION_PROXY_EVENTS = 1;
        internal const uint PW_PERM_R = 256;
        internal const uint PW_PERM_W = 128;
        internal const uint PW_PERM_X = 64;
        internal const uint PW_PERM_M = 8;
        internal const uint PW_PERM_L = 16;
        internal const uint PW_PERM_RW = 384;
        internal const uint PW_PERM_RWX = 448;
        internal const uint PW_PERM_RWXM = 456;
        internal const uint PW_PERM_RWXML = 472;
        internal const uint PW_PERM_ALL = 456;
        internal static ReadOnlySpan<byte> PW_PERMISSION_FORMAT => new byte[] { 37, 99, 37, 99, 37, 99, 37, 99, 37, 99, 0 };
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Client => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 67, 108, 105, 101, 110, 116, 0 };
        internal const uint PW_CLIENT_PERM_MASK = 456;
        internal const uint PW_VERSION_CLIENT = 3;
        internal const uint PW_ID_CLIENT = 1;
        internal const uint PW_CLIENT_CHANGE_MASK_PROPS = 1;
        internal const uint PW_CLIENT_CHANGE_MASK_ALL = 1;
        internal const uint PW_CLIENT_EVENT_INFO = 0;
        internal const uint PW_CLIENT_EVENT_PERMISSIONS = 1;
        internal const uint PW_CLIENT_EVENT_NUM = 2;
        internal const uint PW_VERSION_CLIENT_EVENTS = 0;
        internal const uint PW_CLIENT_METHOD_ADD_LISTENER = 0;
        internal const uint PW_CLIENT_METHOD_ERROR = 1;
        internal const uint PW_CLIENT_METHOD_UPDATE_PROPERTIES = 2;
        internal const uint PW_CLIENT_METHOD_GET_PERMISSIONS = 3;
        internal const uint PW_CLIENT_METHOD_UPDATE_PERMISSIONS = 4;
        internal const uint PW_CLIENT_METHOD_NUM = 5;
        internal const uint PW_VERSION_CLIENT_METHODS = 0;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Device => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 68, 101, 118, 105, 99, 101, 0 };
        internal const uint PW_DEVICE_PERM_MASK = 456;
        internal const uint PW_VERSION_DEVICE = 3;
        internal const uint PW_DEVICE_CHANGE_MASK_PROPS = 1;
        internal const uint PW_DEVICE_CHANGE_MASK_PARAMS = 2;
        internal const uint PW_DEVICE_CHANGE_MASK_ALL = 3;
        internal const uint PW_DEVICE_EVENT_INFO = 0;
        internal const uint PW_DEVICE_EVENT_PARAM = 1;
        internal const uint PW_DEVICE_EVENT_NUM = 2;
        internal const uint PW_VERSION_DEVICE_EVENTS = 0;
        internal const uint PW_DEVICE_METHOD_ADD_LISTENER = 0;
        internal const uint PW_DEVICE_METHOD_SUBSCRIBE_PARAMS = 1;
        internal const uint PW_DEVICE_METHOD_ENUM_PARAMS = 2;
        internal const uint PW_DEVICE_METHOD_SET_PARAM = 3;
        internal const uint PW_DEVICE_METHOD_NUM = 4;
        internal const uint PW_VERSION_DEVICE_METHODS = 0;
        internal const uint PW_VERSION_MEMPOOL_EVENTS = 0;
        internal const uint PW_BUFFERS_FLAG_NONE = 0;
        internal const uint PW_BUFFERS_FLAG_NO_MEM = 1;
        internal const uint PW_BUFFERS_FLAG_SHARED = 2;
        internal const uint PW_BUFFERS_FLAG_DYNAMIC = 4;
        internal const uint PW_BUFFERS_FLAG_SHARED_MEM = 8;
        internal const uint PW_BUFFERS_FLAG_IN_PRIORITY = 16;
        internal const uint PW_BUFFERS_FLAG_ASYNC = 32;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Factory => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 70, 97, 99, 116, 111, 114, 121, 0 };
        internal const uint PW_FACTORY_PERM_MASK = 264;
        internal const uint PW_VERSION_FACTORY = 3;
        internal const uint PW_FACTORY_CHANGE_MASK_PROPS = 1;
        internal const uint PW_FACTORY_CHANGE_MASK_ALL = 1;
        internal const uint PW_FACTORY_EVENT_INFO = 0;
        internal const uint PW_FACTORY_EVENT_NUM = 1;
        internal const uint PW_VERSION_FACTORY_EVENTS = 0;
        internal const uint PW_FACTORY_METHOD_ADD_LISTENER = 0;
        internal const uint PW_FACTORY_METHOD_NUM = 1;
        internal const uint PW_VERSION_FACTORY_METHODS = 0;
        internal static ReadOnlySpan<byte> PW_KEY_PROTOCOL => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 112, 114, 111, 116, 111, 99, 111, 108, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ACCESS => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 97, 99, 99, 101, 115, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CLIENT_ACCESS => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 99, 108, 105, 101, 110, 116, 46, 97, 99, 99, 101, 115, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_SEC_PID => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 115, 101, 99, 46, 112, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_SEC_UID => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 115, 101, 99, 46, 117, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_SEC_GID => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 115, 101, 99, 46, 103, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_SEC_LABEL => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 115, 101, 99, 46, 108, 97, 98, 101, 108, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_SEC_SOCKET => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 115, 101, 99, 46, 115, 111, 99, 107, 101, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_SEC_ENGINE => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 115, 101, 99, 46, 101, 110, 103, 105, 110, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_SEC_APP_ID => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 115, 101, 99, 46, 97, 112, 112, 45, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_SEC_INSTANCE_ID => new byte[] { 112, 105, 112, 101, 119, 105, 114, 101, 46, 115, 101, 99, 46, 105, 110, 115, 116, 97, 110, 99, 101, 45, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LIBRARY_NAME_SYSTEM => new byte[] { 108, 105, 98, 114, 97, 114, 121, 46, 110, 97, 109, 101, 46, 115, 121, 115, 116, 101, 109, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LIBRARY_NAME_LOOP => new byte[] { 108, 105, 98, 114, 97, 114, 121, 46, 110, 97, 109, 101, 46, 108, 111, 111, 112, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LIBRARY_NAME_DBUS => new byte[] { 108, 105, 98, 114, 97, 114, 121, 46, 110, 97, 109, 101, 46, 100, 98, 117, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_OBJECT_PATH => new byte[] { 111, 98, 106, 101, 99, 116, 46, 112, 97, 116, 104, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_OBJECT_ID => new byte[] { 111, 98, 106, 101, 99, 116, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_OBJECT_SERIAL => new byte[] { 111, 98, 106, 101, 99, 116, 46, 115, 101, 114, 105, 97, 108, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_OBJECT_LINGER => new byte[] { 111, 98, 106, 101, 99, 116, 46, 108, 105, 110, 103, 101, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_OBJECT_REGISTER => new byte[] { 111, 98, 106, 101, 99, 116, 46, 114, 101, 103, 105, 115, 116, 101, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_OBJECT_EXPORT => new byte[] { 111, 98, 106, 101, 99, 116, 46, 101, 120, 112, 111, 114, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CONFIG_PREFIX => new byte[] { 99, 111, 110, 102, 105, 103, 46, 112, 114, 101, 102, 105, 120, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CONFIG_NAME => new byte[] { 99, 111, 110, 102, 105, 103, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CONFIG_OVERRIDE_PREFIX => new byte[] { 99, 111, 110, 102, 105, 103, 46, 111, 118, 101, 114, 114, 105, 100, 101, 46, 112, 114, 101, 102, 105, 120, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CONFIG_OVERRIDE_NAME => new byte[] { 99, 111, 110, 102, 105, 103, 46, 111, 118, 101, 114, 114, 105, 100, 101, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LOOP_NAME => new byte[] { 108, 111, 111, 112, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LOOP_CLASS => new byte[] { 108, 111, 111, 112, 46, 99, 108, 97, 115, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LOOP_RT_PRIO => new byte[] { 108, 111, 111, 112, 46, 114, 116, 45, 112, 114, 105, 111, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LOOP_CANCEL => new byte[] { 108, 111, 111, 112, 46, 99, 97, 110, 99, 101, 108, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CONTEXT_PROFILE_MODULES => new byte[] { 99, 111, 110, 116, 101, 120, 116, 46, 112, 114, 111, 102, 105, 108, 101, 46, 109, 111, 100, 117, 108, 101, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_USER_NAME => new byte[] { 99, 111, 110, 116, 101, 120, 116, 46, 117, 115, 101, 114, 45, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_HOST_NAME => new byte[] { 99, 111, 110, 116, 101, 120, 116, 46, 104, 111, 115, 116, 45, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CORE_NAME => new byte[] { 99, 111, 114, 101, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CORE_VERSION => new byte[] { 99, 111, 114, 101, 46, 118, 101, 114, 115, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CORE_DAEMON => new byte[] { 99, 111, 114, 101, 46, 100, 97, 101, 109, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CORE_ID => new byte[] { 99, 111, 114, 101, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CORE_MONITORS => new byte[] { 99, 111, 114, 101, 46, 109, 111, 110, 105, 116, 111, 114, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CPU_MAX_ALIGN => new byte[] { 99, 112, 117, 46, 109, 97, 120, 45, 97, 108, 105, 103, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CPU_CORES => new byte[] { 99, 112, 117, 46, 99, 111, 114, 101, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PRIORITY_SESSION => new byte[] { 112, 114, 105, 111, 114, 105, 116, 121, 46, 115, 101, 115, 115, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PRIORITY_DRIVER => new byte[] { 112, 114, 105, 111, 114, 105, 116, 121, 46, 100, 114, 105, 118, 101, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_REMOTE_NAME => new byte[] { 114, 101, 109, 111, 116, 101, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_REMOTE_INTENTION => new byte[] { 114, 101, 109, 111, 116, 101, 46, 105, 110, 116, 101, 110, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_NAME => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_ID => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_VERSION => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 118, 101, 114, 115, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_ICON => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 105, 99, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_ICON_NAME => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 105, 99, 111, 110, 45, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_LANGUAGE => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 108, 97, 110, 103, 117, 97, 103, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_PROCESS_ID => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 115, 115, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_PROCESS_BINARY => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 115, 115, 46, 98, 105, 110, 97, 114, 121, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_PROCESS_USER => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 115, 115, 46, 117, 115, 101, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_PROCESS_HOST => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 115, 115, 46, 104, 111, 115, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_PROCESS_MACHINE_ID => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 115, 115, 46, 109, 97, 99, 104, 105, 110, 101, 45, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_APP_PROCESS_SESSION_ID => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 115, 115, 46, 115, 101, 115, 115, 105, 111, 110, 45, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_WINDOW_X11_DISPLAY => new byte[] { 119, 105, 110, 100, 111, 119, 46, 120, 49, 49, 46, 100, 105, 115, 112, 108, 97, 121, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CLIENT_ID => new byte[] { 99, 108, 105, 101, 110, 116, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CLIENT_NAME => new byte[] { 99, 108, 105, 101, 110, 116, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_CLIENT_API => new byte[] { 99, 108, 105, 101, 110, 116, 46, 97, 112, 105, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_ID => new byte[] { 110, 111, 100, 101, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_NAME => new byte[] { 110, 111, 100, 101, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_NICK => new byte[] { 110, 111, 100, 101, 46, 110, 105, 99, 107, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_DESCRIPTION => new byte[] { 110, 111, 100, 101, 46, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_PLUGGED => new byte[] { 110, 111, 100, 101, 46, 112, 108, 117, 103, 103, 101, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_SESSION => new byte[] { 110, 111, 100, 101, 46, 115, 101, 115, 115, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_GROUP => new byte[] { 110, 111, 100, 101, 46, 103, 114, 111, 117, 112, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_SYNC_GROUP => new byte[] { 110, 111, 100, 101, 46, 115, 121, 110, 99, 45, 103, 114, 111, 117, 112, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_SYNC => new byte[] { 110, 111, 100, 101, 46, 115, 121, 110, 99, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_TRANSPORT => new byte[] { 110, 111, 100, 101, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_EXCLUSIVE => new byte[] { 110, 111, 100, 101, 46, 101, 120, 99, 108, 117, 115, 105, 118, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_AUTOCONNECT => new byte[] { 110, 111, 100, 101, 46, 97, 117, 116, 111, 99, 111, 110, 110, 101, 99, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_LATENCY => new byte[] { 110, 111, 100, 101, 46, 108, 97, 116, 101, 110, 99, 121, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_MAX_LATENCY => new byte[] { 110, 111, 100, 101, 46, 109, 97, 120, 45, 108, 97, 116, 101, 110, 99, 121, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_LOCK_QUANTUM => new byte[] { 110, 111, 100, 101, 46, 108, 111, 99, 107, 45, 113, 117, 97, 110, 116, 117, 109, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_FORCE_QUANTUM => new byte[] { 110, 111, 100, 101, 46, 102, 111, 114, 99, 101, 45, 113, 117, 97, 110, 116, 117, 109, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_RATE => new byte[] { 110, 111, 100, 101, 46, 114, 97, 116, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_LOCK_RATE => new byte[] { 110, 111, 100, 101, 46, 108, 111, 99, 107, 45, 114, 97, 116, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_FORCE_RATE => new byte[] { 110, 111, 100, 101, 46, 102, 111, 114, 99, 101, 45, 114, 97, 116, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_DONT_RECONNECT => new byte[] { 110, 111, 100, 101, 46, 100, 111, 110, 116, 45, 114, 101, 99, 111, 110, 110, 101, 99, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_ALWAYS_PROCESS => new byte[] { 110, 111, 100, 101, 46, 97, 108, 119, 97, 121, 115, 45, 112, 114, 111, 99, 101, 115, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_WANT_DRIVER => new byte[] { 110, 111, 100, 101, 46, 119, 97, 110, 116, 45, 100, 114, 105, 118, 101, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_PAUSE_ON_IDLE => new byte[] { 110, 111, 100, 101, 46, 112, 97, 117, 115, 101, 45, 111, 110, 45, 105, 100, 108, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_SUSPEND_ON_IDLE => new byte[] { 110, 111, 100, 101, 46, 115, 117, 115, 112, 101, 110, 100, 45, 111, 110, 45, 105, 100, 108, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_CACHE_PARAMS => new byte[] { 110, 111, 100, 101, 46, 99, 97, 99, 104, 101, 45, 112, 97, 114, 97, 109, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_TRANSPORT_SYNC => new byte[] { 110, 111, 100, 101, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 46, 115, 121, 110, 99, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_DRIVER => new byte[] { 110, 111, 100, 101, 46, 100, 114, 105, 118, 101, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_SUPPORTS_LAZY => new byte[] { 110, 111, 100, 101, 46, 115, 117, 112, 112, 111, 114, 116, 115, 45, 108, 97, 122, 121, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_SUPPORTS_REQUEST => new byte[] { 110, 111, 100, 101, 46, 115, 117, 112, 112, 111, 114, 116, 115, 45, 114, 101, 113, 117, 101, 115, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_DRIVER_ID => new byte[] { 110, 111, 100, 101, 46, 100, 114, 105, 118, 101, 114, 45, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_ASYNC => new byte[] { 110, 111, 100, 101, 46, 97, 115, 121, 110, 99, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_LOOP_NAME => new byte[] { 110, 111, 100, 101, 46, 108, 111, 111, 112, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_LOOP_CLASS => new byte[] { 110, 111, 100, 101, 46, 108, 111, 111, 112, 46, 99, 108, 97, 115, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_STREAM => new byte[] { 110, 111, 100, 101, 46, 115, 116, 114, 101, 97, 109, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_VIRTUAL => new byte[] { 110, 111, 100, 101, 46, 118, 105, 114, 116, 117, 97, 108, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_PASSIVE => new byte[] { 110, 111, 100, 101, 46, 112, 97, 115, 115, 105, 118, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_LINK_GROUP => new byte[] { 110, 111, 100, 101, 46, 108, 105, 110, 107, 45, 103, 114, 111, 117, 112, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_NETWORK => new byte[] { 110, 111, 100, 101, 46, 110, 101, 116, 119, 111, 114, 107, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_TRIGGER => new byte[] { 110, 111, 100, 101, 46, 116, 114, 105, 103, 103, 101, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_CHANNELNAMES => new byte[] { 110, 111, 100, 101, 46, 99, 104, 97, 110, 110, 101, 108, 45, 110, 97, 109, 101, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_NODE_DEVICE_PORT_NAME_PREFIX => new byte[] { 110, 111, 100, 101, 46, 100, 101, 118, 105, 99, 101, 45, 112, 111, 114, 116, 45, 110, 97, 109, 101, 45, 112, 114, 101, 102, 105, 120, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_ID => new byte[] { 112, 111, 114, 116, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_NAME => new byte[] { 112, 111, 114, 116, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_DIRECTION => new byte[] { 112, 111, 114, 116, 46, 100, 105, 114, 101, 99, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_ALIAS => new byte[] { 112, 111, 114, 116, 46, 97, 108, 105, 97, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_PHYSICAL => new byte[] { 112, 111, 114, 116, 46, 112, 104, 121, 115, 105, 99, 97, 108, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_TERMINAL => new byte[] { 112, 111, 114, 116, 46, 116, 101, 114, 109, 105, 110, 97, 108, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_CONTROL => new byte[] { 112, 111, 114, 116, 46, 99, 111, 110, 116, 114, 111, 108, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_MONITOR => new byte[] { 112, 111, 114, 116, 46, 109, 111, 110, 105, 116, 111, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_CACHE_PARAMS => new byte[] { 112, 111, 114, 116, 46, 99, 97, 99, 104, 101, 45, 112, 97, 114, 97, 109, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_EXTRA => new byte[] { 112, 111, 114, 116, 46, 101, 120, 116, 114, 97, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_PASSIVE => new byte[] { 112, 111, 114, 116, 46, 112, 97, 115, 115, 105, 118, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_IGNORE_LATENCY => new byte[] { 112, 111, 114, 116, 46, 105, 103, 110, 111, 114, 101, 45, 108, 97, 116, 101, 110, 99, 121, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_PORT_GROUP => new byte[] { 112, 111, 114, 116, 46, 103, 114, 111, 117, 112, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LINK_ID => new byte[] { 108, 105, 110, 107, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LINK_INPUT_NODE => new byte[] { 108, 105, 110, 107, 46, 105, 110, 112, 117, 116, 46, 110, 111, 100, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LINK_INPUT_PORT => new byte[] { 108, 105, 110, 107, 46, 105, 110, 112, 117, 116, 46, 112, 111, 114, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LINK_OUTPUT_NODE => new byte[] { 108, 105, 110, 107, 46, 111, 117, 116, 112, 117, 116, 46, 110, 111, 100, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LINK_OUTPUT_PORT => new byte[] { 108, 105, 110, 107, 46, 111, 117, 116, 112, 117, 116, 46, 112, 111, 114, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LINK_PASSIVE => new byte[] { 108, 105, 110, 107, 46, 112, 97, 115, 115, 105, 118, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LINK_FEEDBACK => new byte[] { 108, 105, 110, 107, 46, 102, 101, 101, 100, 98, 97, 99, 107, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_LINK_ASYNC => new byte[] { 108, 105, 110, 107, 46, 97, 115, 121, 110, 99, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_ID => new byte[] { 100, 101, 118, 105, 99, 101, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_NAME => new byte[] { 100, 101, 118, 105, 99, 101, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_PLUGGED => new byte[] { 100, 101, 118, 105, 99, 101, 46, 112, 108, 117, 103, 103, 101, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_NICK => new byte[] { 100, 101, 118, 105, 99, 101, 46, 110, 105, 99, 107, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_STRING => new byte[] { 100, 101, 118, 105, 99, 101, 46, 115, 116, 114, 105, 110, 103, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_API => new byte[] { 100, 101, 118, 105, 99, 101, 46, 97, 112, 105, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_DESCRIPTION => new byte[] { 100, 101, 118, 105, 99, 101, 46, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_BUS_PATH => new byte[] { 100, 101, 118, 105, 99, 101, 46, 98, 117, 115, 45, 112, 97, 116, 104, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_SERIAL => new byte[] { 100, 101, 118, 105, 99, 101, 46, 115, 101, 114, 105, 97, 108, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_VENDOR_ID => new byte[] { 100, 101, 118, 105, 99, 101, 46, 118, 101, 110, 100, 111, 114, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_VENDOR_NAME => new byte[] { 100, 101, 118, 105, 99, 101, 46, 118, 101, 110, 100, 111, 114, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_PRODUCT_ID => new byte[] { 100, 101, 118, 105, 99, 101, 46, 112, 114, 111, 100, 117, 99, 116, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_PRODUCT_NAME => new byte[] { 100, 101, 118, 105, 99, 101, 46, 112, 114, 111, 100, 117, 99, 116, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_CLASS => new byte[] { 100, 101, 118, 105, 99, 101, 46, 99, 108, 97, 115, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_FORM_FACTOR => new byte[] { 100, 101, 118, 105, 99, 101, 46, 102, 111, 114, 109, 45, 102, 97, 99, 116, 111, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_BUS => new byte[] { 100, 101, 118, 105, 99, 101, 46, 98, 117, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_SUBSYSTEM => new byte[] { 100, 101, 118, 105, 99, 101, 46, 115, 117, 98, 115, 121, 115, 116, 101, 109, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_SYSFS_PATH => new byte[] { 100, 101, 118, 105, 99, 101, 46, 115, 121, 115, 102, 115, 46, 112, 97, 116, 104, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_ICON => new byte[] { 100, 101, 118, 105, 99, 101, 46, 105, 99, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_ICON_NAME => new byte[] { 100, 101, 118, 105, 99, 101, 46, 105, 99, 111, 110, 45, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_INTENDED_ROLES => new byte[] { 100, 101, 118, 105, 99, 101, 46, 105, 110, 116, 101, 110, 100, 101, 100, 45, 114, 111, 108, 101, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_DEVICE_CACHE_PARAMS => new byte[] { 100, 101, 118, 105, 99, 101, 46, 99, 97, 99, 104, 101, 45, 112, 97, 114, 97, 109, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MODULE_ID => new byte[] { 109, 111, 100, 117, 108, 101, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MODULE_NAME => new byte[] { 109, 111, 100, 117, 108, 101, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MODULE_AUTHOR => new byte[] { 109, 111, 100, 117, 108, 101, 46, 97, 117, 116, 104, 111, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MODULE_DESCRIPTION => new byte[] { 109, 111, 100, 117, 108, 101, 46, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MODULE_USAGE => new byte[] { 109, 111, 100, 117, 108, 101, 46, 117, 115, 97, 103, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MODULE_VERSION => new byte[] { 109, 111, 100, 117, 108, 101, 46, 118, 101, 114, 115, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MODULE_DEPRECATED => new byte[] { 109, 111, 100, 117, 108, 101, 46, 100, 101, 112, 114, 101, 99, 97, 116, 101, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_FACTORY_ID => new byte[] { 102, 97, 99, 116, 111, 114, 121, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_FACTORY_NAME => new byte[] { 102, 97, 99, 116, 111, 114, 121, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_FACTORY_USAGE => new byte[] { 102, 97, 99, 116, 111, 114, 121, 46, 117, 115, 97, 103, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_FACTORY_TYPE_NAME => new byte[] { 102, 97, 99, 116, 111, 114, 121, 46, 116, 121, 112, 101, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_FACTORY_TYPE_VERSION => new byte[] { 102, 97, 99, 116, 111, 114, 121, 46, 116, 121, 112, 101, 46, 118, 101, 114, 115, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_STREAM_IS_LIVE => new byte[] { 115, 116, 114, 101, 97, 109, 46, 105, 115, 45, 108, 105, 118, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_STREAM_LATENCY_MIN => new byte[] { 115, 116, 114, 101, 97, 109, 46, 108, 97, 116, 101, 110, 99, 121, 46, 109, 105, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_STREAM_LATENCY_MAX => new byte[] { 115, 116, 114, 101, 97, 109, 46, 108, 97, 116, 101, 110, 99, 121, 46, 109, 97, 120, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_STREAM_MONITOR => new byte[] { 115, 116, 114, 101, 97, 109, 46, 109, 111, 110, 105, 116, 111, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_STREAM_DONT_REMIX => new byte[] { 115, 116, 114, 101, 97, 109, 46, 100, 111, 110, 116, 45, 114, 101, 109, 105, 120, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_STREAM_CAPTURE_SINK => new byte[] { 115, 116, 114, 101, 97, 109, 46, 99, 97, 112, 116, 117, 114, 101, 46, 115, 105, 110, 107, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_TYPE => new byte[] { 109, 101, 100, 105, 97, 46, 116, 121, 112, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_CATEGORY => new byte[] { 109, 101, 100, 105, 97, 46, 99, 97, 116, 101, 103, 111, 114, 121, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_ROLE => new byte[] { 109, 101, 100, 105, 97, 46, 114, 111, 108, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_CLASS => new byte[] { 109, 101, 100, 105, 97, 46, 99, 108, 97, 115, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_NAME => new byte[] { 109, 101, 100, 105, 97, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_TITLE => new byte[] { 109, 101, 100, 105, 97, 46, 116, 105, 116, 108, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_ARTIST => new byte[] { 109, 101, 100, 105, 97, 46, 97, 114, 116, 105, 115, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_ALBUM => new byte[] { 109, 101, 100, 105, 97, 46, 97, 108, 98, 117, 109, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_COPYRIGHT => new byte[] { 109, 101, 100, 105, 97, 46, 99, 111, 112, 121, 114, 105, 103, 104, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_SOFTWARE => new byte[] { 109, 101, 100, 105, 97, 46, 115, 111, 102, 116, 119, 97, 114, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_LANGUAGE => new byte[] { 109, 101, 100, 105, 97, 46, 108, 97, 110, 103, 117, 97, 103, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_FILENAME => new byte[] { 109, 101, 100, 105, 97, 46, 102, 105, 108, 101, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_ICON => new byte[] { 109, 101, 100, 105, 97, 46, 105, 99, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_ICON_NAME => new byte[] { 109, 101, 100, 105, 97, 46, 105, 99, 111, 110, 45, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_COMMENT => new byte[] { 109, 101, 100, 105, 97, 46, 99, 111, 109, 109, 101, 110, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_DATE => new byte[] { 109, 101, 100, 105, 97, 46, 100, 97, 116, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_MEDIA_FORMAT => new byte[] { 109, 101, 100, 105, 97, 46, 102, 111, 114, 109, 97, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_FORMAT_DSP => new byte[] { 102, 111, 114, 109, 97, 116, 46, 100, 115, 112, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_AUDIO_CHANNEL => new byte[] { 97, 117, 100, 105, 111, 46, 99, 104, 97, 110, 110, 101, 108, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_AUDIO_RATE => new byte[] { 97, 117, 100, 105, 111, 46, 114, 97, 116, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_AUDIO_CHANNELS => new byte[] { 97, 117, 100, 105, 111, 46, 99, 104, 97, 110, 110, 101, 108, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_AUDIO_FORMAT => new byte[] { 97, 117, 100, 105, 111, 46, 102, 111, 114, 109, 97, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_AUDIO_ALLOWED_RATES => new byte[] { 97, 117, 100, 105, 111, 46, 97, 108, 108, 111, 119, 101, 100, 45, 114, 97, 116, 101, 115, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_VIDEO_RATE => new byte[] { 118, 105, 100, 101, 111, 46, 102, 114, 97, 109, 101, 114, 97, 116, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_VIDEO_FORMAT => new byte[] { 118, 105, 100, 101, 111, 46, 102, 111, 114, 109, 97, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_VIDEO_SIZE => new byte[] { 118, 105, 100, 101, 111, 46, 115, 105, 122, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_TARGET_OBJECT => new byte[] { 116, 97, 114, 103, 101, 116, 46, 111, 98, 106, 101, 99, 116, 0 };
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Link => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 76, 105, 110, 107, 0 };
        internal const uint PW_LINK_PERM_MASK = 320;
        internal const uint PW_VERSION_LINK = 3;
        internal const uint PW_LINK_CHANGE_MASK_STATE = 1;
        internal const uint PW_LINK_CHANGE_MASK_FORMAT = 2;
        internal const uint PW_LINK_CHANGE_MASK_PROPS = 4;
        internal const uint PW_LINK_CHANGE_MASK_ALL = 7;
        internal const uint PW_LINK_EVENT_INFO = 0;
        internal const uint PW_LINK_EVENT_NUM = 1;
        internal const uint PW_VERSION_LINK_EVENTS = 0;
        internal const uint PW_LINK_METHOD_ADD_LISTENER = 0;
        internal const uint PW_LINK_METHOD_NUM = 1;
        internal const uint PW_VERSION_LINK_METHODS = 0;
        internal const uint PW_VERSION_MAIN_LOOP_EVENTS = 0;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Module => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 77, 111, 100, 117, 108, 101, 0 };
        internal const uint PW_MODULE_PERM_MASK = 264;
        internal const uint PW_VERSION_MODULE = 3;
        internal const uint PW_MODULE_CHANGE_MASK_PROPS = 1;
        internal const uint PW_MODULE_CHANGE_MASK_ALL = 1;
        internal const uint PW_MODULE_EVENT_INFO = 0;
        internal const uint PW_MODULE_EVENT_NUM = 1;
        internal const uint PW_VERSION_MODULE_EVENTS = 0;
        internal const uint PW_MODULE_METHOD_ADD_LISTENER = 0;
        internal const uint PW_MODULE_METHOD_NUM = 1;
        internal const uint PW_VERSION_MODULE_METHODS = 0;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Node => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 78, 111, 100, 101, 0 };
        internal const uint PW_NODE_PERM_MASK = 472;
        internal const uint PW_VERSION_NODE = 3;
        internal const uint PW_NODE_CHANGE_MASK_INPUT_PORTS = 1;
        internal const uint PW_NODE_CHANGE_MASK_OUTPUT_PORTS = 2;
        internal const uint PW_NODE_CHANGE_MASK_STATE = 4;
        internal const uint PW_NODE_CHANGE_MASK_PROPS = 8;
        internal const uint PW_NODE_CHANGE_MASK_PARAMS = 16;
        internal const uint PW_NODE_CHANGE_MASK_ALL = 31;
        internal const uint PW_NODE_EVENT_INFO = 0;
        internal const uint PW_NODE_EVENT_PARAM = 1;
        internal const uint PW_NODE_EVENT_NUM = 2;
        internal const uint PW_VERSION_NODE_EVENTS = 0;
        internal const uint PW_NODE_METHOD_ADD_LISTENER = 0;
        internal const uint PW_NODE_METHOD_SUBSCRIBE_PARAMS = 1;
        internal const uint PW_NODE_METHOD_ENUM_PARAMS = 2;
        internal const uint PW_NODE_METHOD_SET_PARAM = 3;
        internal const uint PW_NODE_METHOD_SEND_COMMAND = 4;
        internal const uint PW_NODE_METHOD_NUM = 5;
        internal const uint PW_VERSION_NODE_METHODS = 0;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Port => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 80, 111, 114, 116, 0 };
        internal const uint PW_PORT_PERM_MASK = 328;
        internal const uint PW_VERSION_PORT = 3;
        internal const uint PW_PORT_CHANGE_MASK_PROPS = 1;
        internal const uint PW_PORT_CHANGE_MASK_PARAMS = 2;
        internal const uint PW_PORT_CHANGE_MASK_ALL = 3;
        internal const uint PW_PORT_EVENT_INFO = 0;
        internal const uint PW_PORT_EVENT_PARAM = 1;
        internal const uint PW_PORT_EVENT_NUM = 2;
        internal const uint PW_VERSION_PORT_EVENTS = 0;
        internal const uint PW_PORT_METHOD_ADD_LISTENER = 0;
        internal const uint PW_PORT_METHOD_SUBSCRIBE_PARAMS = 1;
        internal const uint PW_PORT_METHOD_ENUM_PARAMS = 2;
        internal const uint PW_PORT_METHOD_NUM = 3;
        internal const uint PW_VERSION_PORT_METHODS = 0;
        internal const uint PW_VERSION_STREAM_EVENTS = 2;
        internal const uint PW_VERSION_FILTER_EVENTS = 1;
        internal const uint PW_VERSION_THREAD_LOOP_EVENTS = 0;
        internal const uint PW_VERSION_DATA_LOOP_EVENTS = 0;
        internal static ReadOnlySpan<byte> PW_API_VERSION => new byte[] { 48, 46, 51, 0 };
        internal const uint PW_MAJOR = 1;
        internal const uint PW_MINOR = 4;
        internal const uint PW_MICRO = 2;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_ClientNode => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 67, 108, 105, 101, 110, 116, 78, 111, 100, 101, 0 };
        internal const uint PW_VERSION_CLIENT_NODE = 6;
        internal const uint PW_CLIENT_NODE_EVENT_TRANSPORT = 0;
        internal const uint PW_CLIENT_NODE_EVENT_SET_PARAM = 1;
        internal const uint PW_CLIENT_NODE_EVENT_SET_IO = 2;
        internal const uint PW_CLIENT_NODE_EVENT_EVENT = 3;
        internal const uint PW_CLIENT_NODE_EVENT_COMMAND = 4;
        internal const uint PW_CLIENT_NODE_EVENT_ADD_PORT = 5;
        internal const uint PW_CLIENT_NODE_EVENT_REMOVE_PORT = 6;
        internal const uint PW_CLIENT_NODE_EVENT_PORT_SET_PARAM = 7;
        internal const uint PW_CLIENT_NODE_EVENT_PORT_USE_BUFFERS = 8;
        internal const uint PW_CLIENT_NODE_EVENT_PORT_SET_IO = 9;
        internal const uint PW_CLIENT_NODE_EVENT_SET_ACTIVATION = 10;
        internal const uint PW_CLIENT_NODE_EVENT_PORT_SET_MIX_INFO = 11;
        internal const uint PW_CLIENT_NODE_EVENT_NUM = 12;
        internal const uint PW_VERSION_CLIENT_NODE_EVENTS = 1;
        internal const uint PW_CLIENT_NODE_METHOD_ADD_LISTENER = 0;
        internal const uint PW_CLIENT_NODE_METHOD_GET_NODE = 1;
        internal const uint PW_CLIENT_NODE_METHOD_UPDATE = 2;
        internal const uint PW_CLIENT_NODE_METHOD_PORT_UPDATE = 3;
        internal const uint PW_CLIENT_NODE_METHOD_SET_ACTIVE = 4;
        internal const uint PW_CLIENT_NODE_METHOD_EVENT = 5;
        internal const uint PW_CLIENT_NODE_METHOD_PORT_BUFFERS = 6;
        internal const uint PW_CLIENT_NODE_METHOD_NUM = 7;
        internal const uint PW_VERSION_CLIENT_NODE_METHODS = 0;
        internal const uint PW_CLIENT_NODE_UPDATE_PARAMS = 1;
        internal const uint PW_CLIENT_NODE_UPDATE_INFO = 2;
        internal const uint PW_CLIENT_NODE_PORT_UPDATE_PARAMS = 1;
        internal const uint PW_CLIENT_NODE_PORT_UPDATE_INFO = 2;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Metadata => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 77, 101, 116, 97, 100, 97, 116, 97, 0 };
        internal const uint PW_METADATA_PERM_MASK = 448;
        internal const uint PW_VERSION_METADATA = 3;
        internal const uint PW_METADATA_EVENT_PROPERTY = 0;
        internal const uint PW_METADATA_EVENT_NUM = 1;
        internal const uint PW_VERSION_METADATA_EVENTS = 0;
        internal const uint PW_METADATA_METHOD_ADD_LISTENER = 0;
        internal const uint PW_METADATA_METHOD_SET_PROPERTY = 1;
        internal const uint PW_METADATA_METHOD_CLEAR = 2;
        internal const uint PW_METADATA_METHOD_NUM = 3;
        internal const uint PW_VERSION_METADATA_METHODS = 0;
        internal static ReadOnlySpan<byte> PW_KEY_METADATA_NAME => new byte[] { 109, 101, 116, 97, 100, 97, 116, 97, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_METADATA_VALUES => new byte[] { 109, 101, 116, 97, 100, 97, 116, 97, 46, 118, 97, 108, 117, 101, 115, 0 };
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Profiler => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 80, 114, 111, 102, 105, 108, 101, 114, 0 };
        internal const uint PW_VERSION_PROFILER = 3;
        internal const uint PW_PROFILER_PERM_MASK = 256;
        internal const uint PW_PROFILER_EVENT_PROFILE = 0;
        internal const uint PW_PROFILER_EVENT_NUM = 1;
        internal const uint PW_VERSION_PROFILER_EVENTS = 0;
        internal const uint PW_PROFILER_METHOD_ADD_LISTENER = 0;
        internal const uint PW_PROFILER_METHOD_NUM = 1;
        internal const uint PW_VERSION_PROFILER_METHODS = 0;
        internal static ReadOnlySpan<byte> PW_KEY_PROFILER_NAME => new byte[] { 112, 114, 111, 102, 105, 108, 101, 114, 46, 110, 97, 109, 101, 0 };
        internal const uint PW_VERSION_CONTROL_EVENTS = 0;
        internal const uint PW_VERSION_IMPL_CORE_EVENTS = 0;
        internal const uint PW_VERSION_IMPL_DEVICE_EVENTS = 0;
        internal const uint PW_VERSION_IMPL_FACTORY_EVENTS = 0;
        internal const uint PW_VERSION_IMPL_FACTORY_IMPLEMENTATION = 0;
        internal const uint PW_VERSION_IMPL_LINK_EVENTS = 0;
        internal const uint PW_VERSION_IMPL_METADATA_EVENTS = 0;
        internal const uint PW_VERSION_IMPL_MODULE_EVENTS = 0;
        internal const uint PW_VERSION_IMPL_NODE_EVENTS = 0;
        internal const uint PW_VERSION_IMPL_NODE_RT_EVENTS = 0;
        internal const uint PW_VERSION_IMPL_PORT_EVENTS = 3;
        internal const uint PW_VERSION_GLOBAL_EVENTS = 0;
        internal const uint PW_VERSION_IMPL_CLIENT_EVENTS = 0;
        internal const uint PW_VERSION_RESOURCE_EVENTS = 0;
        internal static ReadOnlySpan<byte> PW_TYPE_INFO_PROTOCOL_Native => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 80, 114, 111, 116, 111, 99, 111, 108, 58, 78, 97, 116, 105, 118, 101, 0 };
        internal const uint PW_VERSION_PROTOCOL_NATIVE_EXT = 0;
        internal const uint PW_VERSION_SESSION_INFO = 0;
        internal const uint PW_SESSION_CHANGE_MASK_PROPS = 1;
        internal const uint PW_SESSION_CHANGE_MASK_PARAMS = 2;
        internal const uint PW_SESSION_CHANGE_MASK_ALL = 3;
        internal const uint PW_VERSION_ENDPOINT_INFO = 0;
        internal const uint PW_ENDPOINT_FLAG_PROVIDES_SESSION = 1;
        internal const uint PW_ENDPOINT_CHANGE_MASK_STREAMS = 1;
        internal const uint PW_ENDPOINT_CHANGE_MASK_SESSION = 2;
        internal const uint PW_ENDPOINT_CHANGE_MASK_PROPS = 4;
        internal const uint PW_ENDPOINT_CHANGE_MASK_PARAMS = 8;
        internal const uint PW_ENDPOINT_CHANGE_MASK_ALL = 15;
        internal const uint PW_VERSION_ENDPOINT_STREAM_INFO = 0;
        internal const uint PW_ENDPOINT_STREAM_CHANGE_MASK_LINK_PARAMS = 1;
        internal const uint PW_ENDPOINT_STREAM_CHANGE_MASK_PROPS = 2;
        internal const uint PW_ENDPOINT_STREAM_CHANGE_MASK_PARAMS = 4;
        internal const uint PW_ENDPOINT_STREAM_CHANGE_MASK_ALL = 7;
        internal const uint PW_VERSION_ENDPOINT_LINK_INFO = 0;
        internal const uint PW_ENDPOINT_LINK_CHANGE_MASK_STATE = 1;
        internal const uint PW_ENDPOINT_LINK_CHANGE_MASK_PROPS = 2;
        internal const uint PW_ENDPOINT_LINK_CHANGE_MASK_PARAMS = 4;
        internal const uint PW_ENDPOINT_LINK_CHANGE_MASK_ALL = 7;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Session => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 83, 101, 115, 115, 105, 111, 110, 0 };
        internal const uint PW_SESSION_PERM_MASK = 448;
        internal const uint PW_VERSION_SESSION = 0;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_Endpoint => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 69, 110, 100, 112, 111, 105, 110, 116, 0 };
        internal const uint PW_ENDPOINT_PERM_MASK = 448;
        internal const uint PW_VERSION_ENDPOINT = 0;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_EndpointStream => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 69, 110, 100, 112, 111, 105, 110, 116, 83, 116, 114, 101, 97, 109, 0 };
        internal const uint PW_ENDPOINT_STREAM_PERM_MASK = 448;
        internal const uint PW_VERSION_ENDPOINT_STREAM = 0;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_EndpointLink => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 69, 110, 100, 112, 111, 105, 110, 116, 76, 105, 110, 107, 0 };
        internal const uint PW_ENDPOINT_LINK_PERM_MASK = 448;
        internal const uint PW_VERSION_ENDPOINT_LINK = 0;
        internal const uint PW_SESSION_EVENT_INFO = 0;
        internal const uint PW_SESSION_EVENT_PARAM = 1;
        internal const uint PW_SESSION_EVENT_NUM = 2;
        internal const uint PW_VERSION_SESSION_EVENTS = 0;
        internal const uint PW_SESSION_METHOD_ADD_LISTENER = 0;
        internal const uint PW_SESSION_METHOD_SUBSCRIBE_PARAMS = 1;
        internal const uint PW_SESSION_METHOD_ENUM_PARAMS = 2;
        internal const uint PW_SESSION_METHOD_SET_PARAM = 3;
        internal const uint PW_SESSION_METHOD_CREATE_LINK = 4;
        internal const uint PW_SESSION_METHOD_NUM = 5;
        internal const uint PW_VERSION_SESSION_METHODS = 0;
        internal const uint PW_ENDPOINT_EVENT_INFO = 0;
        internal const uint PW_ENDPOINT_EVENT_PARAM = 1;
        internal const uint PW_ENDPOINT_EVENT_NUM = 2;
        internal const uint PW_VERSION_ENDPOINT_EVENTS = 0;
        internal const uint PW_ENDPOINT_METHOD_ADD_LISTENER = 0;
        internal const uint PW_ENDPOINT_METHOD_SUBSCRIBE_PARAMS = 1;
        internal const uint PW_ENDPOINT_METHOD_ENUM_PARAMS = 2;
        internal const uint PW_ENDPOINT_METHOD_SET_PARAM = 3;
        internal const uint PW_ENDPOINT_METHOD_CREATE_LINK = 4;
        internal const uint PW_ENDPOINT_METHOD_NUM = 5;
        internal const uint PW_VERSION_ENDPOINT_METHODS = 0;
        internal const uint PW_ENDPOINT_STREAM_EVENT_INFO = 0;
        internal const uint PW_ENDPOINT_STREAM_EVENT_PARAM = 1;
        internal const uint PW_ENDPOINT_STREAM_EVENT_NUM = 2;
        internal const uint PW_VERSION_ENDPOINT_STREAM_EVENTS = 0;
        internal const uint PW_ENDPOINT_STREAM_METHOD_ADD_LISTENER = 0;
        internal const uint PW_ENDPOINT_STREAM_METHOD_SUBSCRIBE_PARAMS = 1;
        internal const uint PW_ENDPOINT_STREAM_METHOD_ENUM_PARAMS = 2;
        internal const uint PW_ENDPOINT_STREAM_METHOD_SET_PARAM = 3;
        internal const uint PW_ENDPOINT_STREAM_METHOD_NUM = 4;
        internal const uint PW_VERSION_ENDPOINT_STREAM_METHODS = 0;
        internal const uint PW_ENDPOINT_LINK_EVENT_INFO = 0;
        internal const uint PW_ENDPOINT_LINK_EVENT_PARAM = 1;
        internal const uint PW_ENDPOINT_LINK_EVENT_NUM = 2;
        internal const uint PW_VERSION_ENDPOINT_LINK_EVENTS = 0;
        internal const uint PW_ENDPOINT_LINK_METHOD_ADD_LISTENER = 0;
        internal const uint PW_ENDPOINT_LINK_METHOD_SUBSCRIBE_PARAMS = 1;
        internal const uint PW_ENDPOINT_LINK_METHOD_ENUM_PARAMS = 2;
        internal const uint PW_ENDPOINT_LINK_METHOD_SET_PARAM = 3;
        internal const uint PW_ENDPOINT_LINK_METHOD_REQUEST_STATE = 4;
        internal const uint PW_ENDPOINT_LINK_METHOD_DESTROY = 5;
        internal const uint PW_ENDPOINT_LINK_METHOD_NUM = 6;
        internal const uint PW_VERSION_ENDPOINT_LINK_METHODS = 0;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_ClientEndpoint => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 67, 108, 105, 101, 110, 116, 69, 110, 100, 112, 111, 105, 110, 116, 0 };
        internal const uint PW_VERSION_CLIENT_ENDPOINT = 0;
        internal const uint PW_CLIENT_ENDPOINT_EVENT_SET_SESSION_ID = 0;
        internal const uint PW_CLIENT_ENDPOINT_EVENT_SET_PARAM = 1;
        internal const uint PW_CLIENT_ENDPOINT_EVENT_STREAM_SET_PARAM = 2;
        internal const uint PW_CLIENT_ENDPOINT_EVENT_CREATE_LINK = 3;
        internal const uint PW_CLIENT_ENDPOINT_EVENT_NUM = 4;
        internal const uint PW_VERSION_CLIENT_ENDPOINT_EVENTS = 0;
        internal const uint PW_CLIENT_ENDPOINT_METHOD_ADD_LISTENER = 0;
        internal const uint PW_CLIENT_ENDPOINT_METHOD_UPDATE = 1;
        internal const uint PW_CLIENT_ENDPOINT_METHOD_STREAM_UPDATE = 2;
        internal const uint PW_CLIENT_ENDPOINT_METHOD_NUM = 3;
        internal const uint PW_VERSION_CLIENT_ENDPOINT_METHODS = 0;
        internal const uint PW_CLIENT_ENDPOINT_UPDATE_PARAMS = 1;
        internal const uint PW_CLIENT_ENDPOINT_UPDATE_INFO = 2;
        internal const uint PW_CLIENT_ENDPOINT_STREAM_UPDATE_PARAMS = 1;
        internal const uint PW_CLIENT_ENDPOINT_STREAM_UPDATE_INFO = 2;
        internal const uint PW_CLIENT_ENDPOINT_STREAM_UPDATE_DESTROYED = 4;
        internal static ReadOnlySpan<byte> PW_TYPE_INTERFACE_ClientSession => new byte[] { 80, 105, 112, 101, 87, 105, 114, 101, 58, 73, 110, 116, 101, 114, 102, 97, 99, 101, 58, 67, 108, 105, 101, 110, 116, 83, 101, 115, 115, 105, 111, 110, 0 };
        internal const uint PW_VERSION_CLIENT_SESSION = 0;
        internal const uint PW_CLIENT_SESSION_EVENT_SET_PARAM = 0;
        internal const uint PW_CLIENT_SESSION_EVENT_LINK_SET_PARAM = 1;
        internal const uint PW_CLIENT_SESSION_EVENT_LINK_REQUEST_STATE = 2;
        internal const uint PW_CLIENT_SESSION_EVENT_NUM = 3;
        internal const uint PW_VERSION_CLIENT_SESSION_EVENTS = 0;
        internal const uint PW_CLIENT_SESSION_METHOD_ADD_LISTENER = 0;
        internal const uint PW_CLIENT_SESSION_METHOD_UPDATE = 1;
        internal const uint PW_CLIENT_SESSION_METHOD_LINK_UPDATE = 2;
        internal const uint PW_CLIENT_SESSION_METHOD_NUM = 3;
        internal const uint PW_VERSION_CLIENT_SESSION_METHODS = 0;
        internal const uint PW_CLIENT_SESSION_UPDATE_PARAMS = 1;
        internal const uint PW_CLIENT_SESSION_UPDATE_INFO = 2;
        internal const uint PW_CLIENT_SESSION_LINK_UPDATE_PARAMS = 1;
        internal const uint PW_CLIENT_SESSION_LINK_UPDATE_INFO = 2;
        internal const uint PW_CLIENT_SESSION_LINK_UPDATE_DESTROYED = 4;
        internal static ReadOnlySpan<byte> PW_KEY_SESSION_ID => new byte[] { 115, 101, 115, 115, 105, 111, 110, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_ID => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_NAME => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_MONITOR => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 46, 109, 111, 110, 105, 116, 111, 114, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_CLIENT_ID => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 46, 99, 108, 105, 101, 110, 116, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_ICON_NAME => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 46, 105, 99, 111, 110, 45, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_AUTOCONNECT => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 46, 97, 117, 116, 111, 99, 111, 110, 110, 101, 99, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_TARGET => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 46, 116, 97, 114, 103, 101, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_STREAM_ID => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 45, 115, 116, 114, 101, 97, 109, 46, 105, 100, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_STREAM_NAME => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 45, 115, 116, 114, 101, 97, 109, 46, 110, 97, 109, 101, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_STREAM_DESCRIPTION => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 45, 115, 116, 114, 101, 97, 109, 46, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_LINK_OUTPUT_ENDPOINT => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 45, 108, 105, 110, 107, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 100, 112, 111, 105, 110, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_LINK_OUTPUT_STREAM => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 45, 108, 105, 110, 107, 46, 111, 117, 116, 112, 117, 116, 46, 115, 116, 114, 101, 97, 109, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_LINK_INPUT_ENDPOINT => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 45, 108, 105, 110, 107, 46, 105, 110, 112, 117, 116, 46, 101, 110, 100, 112, 111, 105, 110, 116, 0 };
        internal static ReadOnlySpan<byte> PW_KEY_ENDPOINT_LINK_INPUT_STREAM => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 45, 108, 105, 110, 107, 46, 105, 110, 112, 117, 116, 46, 115, 116, 114, 101, 97, 109, 0 };
        internal const uint PW_TYPE_FIRST = 33554432;


        [DllImport(__DllName, EntryPoint = "csbindgen_spa_ptrinside", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_ptrinside(void* p1, nuint s1, void* p2, nuint s2, nuint* remaining);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_ptr_inside_and_aligned", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_ptr_inside_and_aligned(void* p1, nuint s1, void* p2, nuint s2, nuint align, nuint* remaining);

        /// <summary>
        ///  \return true if the two strings are equal, false otherwise
        /// 
        ///  If both \a a and \a b are NULL, the two are considered equal.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_streq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_streq(byte* s1, byte* s2);

        /// <summary>
        ///  \return true if the two strings are equal, false otherwise
        /// 
        ///  If both \a a and \a b are NULL, the two are considered equal.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_strneq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_strneq(byte* s1, byte* s2, nuint len);

        /// <summary>
        ///  \return true if \a s starts with the \a prefix or false otherwise.
        ///  A \a s is NULL, it never starts with the given \a prefix. A \a prefix of
        ///  NULL is a bug in the caller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_strstartswith", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_strstartswith(byte* s, byte* prefix);

        /// <summary>
        ///  \return true if \a s ends with the \a suffix or false otherwise.
        ///  A \a s is NULL, it never ends with the given \a suffix. A \a suffix of
        ///  NULL is a bug in the caller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_strendswith", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_strendswith(byte* s, byte* suffix);

        /// <summary>
        ///  Convert \a str to an int32_t with the given \a base and store the
        ///  result in \a val.
        /// 
        ///  On failure, the value of \a val is unmodified.
        /// 
        ///  \return true on success, false otherwise
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_atoi32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_atoi32(byte* str_, int* val, int @base);

        /// <summary>
        ///  Convert \a str to an uint32_t with the given \a base and store the
        ///  result in \a val.
        /// 
        ///  On failure, the value of \a val is unmodified.
        /// 
        ///  \return true on success, false otherwise
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_atou32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_atou32(byte* str_, uint* val, int @base);

        /// <summary>
        ///  Convert \a str to an int64_t with the given \a base and store the
        ///  result in \a val.
        /// 
        ///  On failure, the value of \a val is unmodified.
        /// 
        ///  \return true on success, false otherwise
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_atoi64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_atoi64(byte* str_, long* val, int @base);

        /// <summary>
        ///  Convert \a str to an uint64_t with the given \a base and store the
        ///  result in \a val.
        /// 
        ///  On failure, the value of \a val is unmodified.
        /// 
        ///  \return true on success, false otherwise
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_atou64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_atou64(byte* str_, ulong* val, int @base);

        /// <summary>
        ///  Convert \a str to a boolean. Allowed boolean values are "true" and a
        ///  literal "1", anything else is false.
        /// 
        ///  \return true on success, false otherwise
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_atob", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_atob(byte* str_);

        /// <summary>
        ///  "Safe" version of vsnprintf. Exactly the same as vsnprintf but the
        ///  returned value is clipped to `size - 1` and a negative or zero size
        ///  will abort() the program.
        /// 
        ///  \return The number of bytes printed, capped to `size-1`, or a negative
        ///  number on error.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_vscnprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_vscnprintf(byte* buffer, nuint size, byte* format, __va_list_tag* args);

        /// <summary>
        ///  Convert \a str to a float in the C locale.
        /// 
        ///  If \a endptr is not NULL, a pointer to the character after the last character
        ///  used in the conversion is stored in the location referenced by endptr.
        /// 
        ///  \return the result float.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_strtof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float spa_strtof(byte* str_, byte** endptr);

        /// <summary>
        ///  Convert \a str to a float and store the result in \a val.
        /// 
        ///  On failure, the value of \a val is unmodified.
        /// 
        ///  \return true on success, false otherwise
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_atof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_atof(byte* str_, float* val);

        /// <summary>
        ///  Convert \a str to a double in the C locale.
        /// 
        ///  If \a endptr is not NULL, a pointer to the character after the last character
        ///  used in the conversion is stored in the location referenced by endptr.
        /// 
        ///  \return the result float.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_strtod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double spa_strtod(byte* str_, byte** endptr);

        /// <summary>
        ///  Convert \a str to a double and store the result in \a val.
        /// 
        ///  On failure, the value of \a val is unmodified.
        /// 
        ///  \return true on success, false otherwise
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_atod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_atod(byte* str_, double* val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_dtoa", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_dtoa(byte* str_, nuint size, double val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_strbuf_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_strbuf_init(spa_strbuf* buf, byte* buffer, nuint maxsize);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_is_a", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_type_is_a(byte* type_, byte* parent);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_type_short_name(byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_from_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_type_from_short_name(byte* name, spa_type_info* info, uint unknown);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_to_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_type_to_name(uint type_, spa_type_info* info, byte* unknown);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_to_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_type_to_short_name(uint type_, spa_type_info* info, byte* unknown);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_meta_first", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* spa_meta_first(spa_meta* m);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_meta_end", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* spa_meta_end(spa_meta* m);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_meta_region_is_valid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_meta_region_is_valid(spa_meta_region* m);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_meta_bitmap_is_valid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_meta_bitmap_is_valid(spa_meta_bitmap* m);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_meta_cursor_is_valid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_meta_cursor_is_valid(spa_meta_cursor* m);

        /// <summary>
        ///  Find metadata in a buffer
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_buffer_find_meta", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_meta* spa_buffer_find_meta(spa_buffer* b, uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_buffer_find_meta_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* spa_buffer_find_meta_data(spa_buffer* b, uint type_, nuint size);

        /// <summary>
        ///  Fill buffer allocation information
        /// 
        ///  Fill \a info with allocation information needed to allocate buffers
        ///  with the given number of metadata and data members.
        /// 
        ///  The required size of the skeleton (the struct spa_buffer) information
        ///  and the memory (for the metadata, chunk and buffer memory) will be
        ///  calculated.
        /// 
        ///  The flags member in \a info should be configured before calling this
        ///  functions.
        /// 
        ///  \param info the information to fill
        ///  \param n_metas the number of metadatas for the buffer
        ///  \param metas an array of metadata items
        ///  \param n_datas the number of datas for the buffer
        ///  \param datas an array of \a n_datas items
        ///  \param data_aligns \a n_datas alignments
        ///  \return 0 on success.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_buffer_alloc_fill_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_buffer_alloc_fill_info(spa_buffer_alloc_info* info, uint n_metas, spa_meta* metas, uint n_datas, spa_data* datas, uint* data_aligns);

        /// <summary>
        ///  Fill skeleton and data according to the allocation info
        /// 
        ///  Use the allocation info to create a struct \ref spa_buffer into
        ///  \a skel_mem and \a data_mem.
        /// 
        ///  Depending on the flags given when calling \ref
        ///  spa_buffer_alloc_fill_info(), the buffer meta, chunk and memory
        ///  will be referenced in either skel_mem or data_mem.
        /// 
        ///  \param info an allocation info
        ///  \param skel_mem memory to hold the struct \ref spa_buffer and the
        ///   pointers to meta, chunk and memory.
        ///  \param data_mem memory to hold the meta, chunk and memory
        ///  \return a struct \ref spa_buffer in \a skel_mem
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_buffer_alloc_layout", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_buffer* spa_buffer_alloc_layout(spa_buffer_alloc_info* info, void* skel_mem, void* data_mem);

        /// <summary>
        ///  Layout an array of buffers
        /// 
        ///  Use the allocation info to layout the memory of an array of buffers.
        /// 
        ///  \a skel_mem should point to at least info-&gt;skel_size * \a n_buffers bytes
        ///  of memory.
        ///  \a data_mem should point to at least info-&gt;mem_size * \a n_buffers bytes
        ///  of memory.
        /// 
        ///  \param info the allocation info for one buffer
        ///  \param n_buffers the number of buffers to create
        ///  \param buffers a array with space to hold \a n_buffers pointers to buffers
        ///  \param skel_mem memory for the struct \ref spa_buffer
        ///  \param data_mem memory for the meta, chunk, memory of the buffer if not
        /// 		inlined in the skeleton.
        ///  \return 0 on success.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_buffer_alloc_layout_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_buffer_alloc_layout_array(spa_buffer_alloc_info* info, uint n_buffers, spa_buffer** buffers, void* skel_mem, void* data_mem);

        /// <summary>
        ///  Allocate an array of buffers
        /// 
        ///  Allocate \a n_buffers with the given metadata, memory and alignment
        ///  information.
        /// 
        ///  The buffer array, structures, data and metadata will all be allocated
        ///  in one block of memory with the proper requested alignment.
        /// 
        ///  \param n_buffers the number of buffers to create
        ///  \param flags extra flags
        ///  \param n_metas number of metadatas
        ///  \param metas \a n_metas metadata specification
        ///  \param n_datas number of datas
        ///  \param datas \a n_datas memory specification
        ///  \param data_aligns \a n_datas alignment specifications
        ///  \returns an array of \a n_buffers pointers to struct \ref spa_buffer
        ///      with the given metadata, data and alignment or NULL when
        ///      allocation failed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_buffer_alloc_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_buffer** spa_buffer_alloc_array(uint n_buffers, uint flags, uint n_metas, spa_meta* metas, uint n_datas, spa_data* datas, uint* data_aligns);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debugc_error_location", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_debugc_error_location(spa_debug_context* c, spa_error_location* loc);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debugc_mem", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debugc_mem(spa_debug_context* ctx, int indent, void* data, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_mem", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debug_mem(int indent, void* data, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_audio_format_from_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_type_audio_format_from_short_name(byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_audio_format_to_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_type_audio_format_to_short_name(uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_audio_channel_from_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_type_audio_channel_from_short_name(byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_audio_channel_to_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_type_audio_channel_to_short_name(uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_audio_iec958_codec_from_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_type_audio_iec958_codec_from_short_name(byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_audio_iec958_codec_to_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_type_audio_iec958_codec_to_short_name(uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_video_format_from_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_type_video_format_from_short_name(byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_type_video_format_to_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_type_video_format_to_short_name(uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_type_find", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_type_info* spa_debug_type_find(spa_type_info* info, uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_type_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_debug_type_short_name(byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_type_find_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_debug_type_find_name(spa_type_info* info, uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_type_find_short_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_debug_type_find_short_name(spa_type_info* info, uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_type_find_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_debug_type_find_type(spa_type_info* info, byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_type_find_short", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_type_info* spa_debug_type_find_short(spa_type_info* info, byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_type_find_type_short", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_debug_type_find_type_short(spa_type_info* info, byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debugc_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debugc_buffer(spa_debug_context* ctx, int indent, spa_buffer* buffer);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debug_buffer(int indent, spa_buffer* buffer);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_dict_item_compare", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_dict_item_compare(void* i1, void* i2);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_dict_qsort", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_dict_qsort(spa_dict* dict);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_dict_lookup_item", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_dict_item* spa_dict_lookup_item(spa_dict* dict, byte* key);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_dict_lookup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_dict_lookup(spa_dict* dict, byte* key);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debugc_dict", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debugc_dict(spa_debug_context* ctx, int indent, spa_dict* dict);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_dict", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debug_dict(int indent, spa_dict* dict);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_inside", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_pod_is_inside(void* pod, uint size, void* iter);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* spa_pod_next(void* iter);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_prop_first", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod_prop* spa_pod_prop_first(spa_pod_object_body* body);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_prop_is_inside", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_pod_prop_is_inside(spa_pod_object_body* body, uint size, spa_pod_prop* iter);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_prop_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod_prop* spa_pod_prop_next(spa_pod_prop* iter);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_control_first", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod_control* spa_pod_control_first(spa_pod_sequence_body* body);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_control_is_inside", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_pod_control_is_inside(spa_pod_sequence_body* body, uint size, spa_pod_control* iter);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_control_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod_control* spa_pod_control_next(spa_pod_control* iter);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_from_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* spa_pod_from_data(void* data, nuint maxsize, CLong offset, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_none", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_none(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_bool(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_bool(spa_pod* pod, bool* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_id(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_id(spa_pod* pod, uint* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_int", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_int(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_int", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_int(spa_pod* pod, int* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_long", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_long(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_long", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_long(spa_pod* pod, long* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_float", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_float(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_float", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_float(spa_pod* pod, float* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_double", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_double(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_double", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_double(spa_pod* pod, double* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_string(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_string(spa_pod* pod, byte** value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_copy_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_copy_string(spa_pod* pod, nuint maxlen, byte* dest);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_bytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_bytes(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_bytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_bytes(spa_pod* pod, void** value, uint* len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_pointer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_pointer(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_pointer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_pointer(spa_pod* pod, uint* type_, void** value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_fd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_fd(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_fd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_fd(spa_pod* pod, long* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_rectangle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_rectangle(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_rectangle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_rectangle(spa_pod* pod, spa_rectangle* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_fraction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_fraction(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_fraction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_get_fraction(spa_pod* pod, spa_fraction* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_bitmap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_bitmap(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_array(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* spa_pod_get_array(spa_pod* pod, uint* n_values);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_copy_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_pod_copy_array(spa_pod* pod, uint type_, void* values, uint max_values);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_choice", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_choice(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_get_values", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_pod_get_values(spa_pod* pod, uint* n_vals, uint* choice);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_struct", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_struct(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_object(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_object_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_pod_is_object_type(spa_pod* pod, uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_object_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_pod_is_object_id(spa_pod* pod, uint id);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_sequence", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_sequence(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_object_find_prop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod_prop* spa_pod_object_find_prop(spa_pod_object* pod, spa_pod_prop* start, uint key);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_find_prop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod_prop* spa_pod_find_prop(spa_pod* pod, spa_pod_prop* start, uint key);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_object_fixate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_object_fixate(spa_pod_object* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_fixate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_fixate(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_object_is_fixated", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_object_is_fixated(spa_pod_object* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_object_has_props", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_object_has_props(spa_pod_object* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_is_fixated", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_is_fixated(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_parser_init(spa_pod_parser* parser, void* data, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_pod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_parser_pod(spa_pod_parser* parser, spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_parser_get_state(spa_pod_parser* parser, spa_pod_parser_state* state);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_reset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_parser_reset(spa_pod_parser* parser, spa_pod_parser_state* state);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_deref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_pod_parser_deref(spa_pod_parser* parser, uint offset, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_frame", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_pod_parser_frame(spa_pod_parser* parser, spa_pod_frame* frame);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_push", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_parser_push(spa_pod_parser* parser, spa_pod_frame* frame, spa_pod* pod, uint offset);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_current", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_pod_parser_current(spa_pod_parser* parser);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_advance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_parser_advance(spa_pod_parser* parser, spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_pod_parser_next(spa_pod_parser* parser);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_pop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_pop(spa_pod_parser* parser, spa_pod_frame* frame);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_bool(spa_pod_parser* parser, bool* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_id(spa_pod_parser* parser, uint* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_int", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_int(spa_pod_parser* parser, int* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_long", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_long(spa_pod_parser* parser, long* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_float", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_float(spa_pod_parser* parser, float* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_double", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_double(spa_pod_parser* parser, double* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_string(spa_pod_parser* parser, byte** value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_bytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_bytes(spa_pod_parser* parser, void** value, uint* len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_pointer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_pointer(spa_pod_parser* parser, uint* type_, void** value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_fd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_fd(spa_pod_parser* parser, long* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_rectangle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_rectangle(spa_pod_parser* parser, spa_rectangle* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_fraction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_fraction(spa_pod_parser* parser, spa_fraction* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_get_pod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_get_pod(spa_pod_parser* parser, spa_pod** value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_push_struct", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_push_struct(spa_pod_parser* parser, spa_pod_frame* frame);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_push_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_push_object(spa_pod_parser* parser, spa_pod_frame* frame, uint type_, uint* id);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_can_collect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_pod_parser_can_collect(spa_pod* pod, byte type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_parser_getv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_parser_getv(spa_pod_parser* parser, __va_list_tag* args);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_parse(spa_pod* format, uint* media_type, uint* media_subtype);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_strbuf_format_value", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debug_strbuf_format_value(spa_strbuf* buffer, spa_type_info* info, uint type_, void* body, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_format_value", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debug_format_value(spa_type_info* info, uint type_, void* body, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debugc_format", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debugc_format(spa_debug_context* ctx, int indent, spa_type_info* info, spa_pod* format);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_format", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debug_format(int indent, spa_type_info* info, spa_pod* format);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_list_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_list_init(spa_list* list);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_list_is_initialized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_list_is_initialized(spa_list* list);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_list_insert", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_list_insert(spa_list* list, spa_list* elem);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_list_insert_list", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_list_insert_list(spa_list* list, spa_list* other);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_list_remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_list_remove(spa_list* elem);

        /// <summary>
        ///  Initialize a hook list to the empty list
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_hook_list_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_hook_list_init(spa_hook_list* list);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_hook_list_is_empty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_hook_list_is_empty(spa_hook_list* list);

        /// <summary>
        ///  Append a hook.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_hook_list_append", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_hook_list_append(spa_hook_list* list, spa_hook* hook, void* funcs, void* data);

        /// <summary>
        ///  Prepend a hook
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_hook_list_prepend", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_hook_list_prepend(spa_hook_list* list, spa_hook* hook, void* funcs, void* data);

        /// <summary>
        ///  Remove a hook
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_hook_remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_hook_remove(spa_hook* hook);

        /// <summary>
        ///  Remove all hooks from the list
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_hook_list_clean", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_hook_list_clean(spa_hook_list* list);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_hook_list_isolate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_hook_list_isolate(spa_hook_list* list, spa_hook_list* save, spa_hook* hook, void* funcs, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_hook_list_join", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_hook_list_join(spa_hook_list* list, spa_hook_list* save);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_add_listener(spa_node* @object, spa_hook* listener, spa_node_events* events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_set_callbacks", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_set_callbacks(spa_node* @object, spa_node_callbacks* callbacks, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_sync", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_sync(spa_node* @object, int seq);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_enum_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_enum_params(spa_node* @object, int seq, uint id, uint start, uint max, spa_pod* filter);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_set_param", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_set_param(spa_node* @object, uint id, uint flags, spa_pod* param);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_set_io", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_set_io(spa_node* @object, uint id, void* data, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_send_command", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_send_command(spa_node* @object, spa_command* command);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_add_port", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_add_port(spa_node* @object, uint direction, uint port_id, spa_dict* props);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_remove_port", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_remove_port(spa_node* @object, uint direction, uint port_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_port_enum_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_port_enum_params(spa_node* @object, int seq, uint direction, uint port_id, uint id, uint start, uint max, spa_pod* filter);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_port_set_param", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_port_set_param(spa_node* @object, uint direction, uint port_id, uint id, uint flags, spa_pod* param);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_port_use_buffers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_port_use_buffers(spa_node* @object, uint direction, uint port_id, uint flags, spa_buffer** buffers, uint n_buffers);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_port_set_io", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_port_set_io(spa_node* @object, uint direction, uint port_id, uint id, void* data, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_port_reuse_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_port_reuse_buffer(spa_node* @object, uint port_id, uint buffer_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_port_reuse_buffer_fast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_port_reuse_buffer_fast(spa_node* @object, uint port_id, uint buffer_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_process", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_process(spa_node* @object);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_process_fast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_process_fast(spa_node* @object);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debugc_port_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debugc_port_info(spa_debug_context* ctx, int indent, spa_port_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_port_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debug_port_info(int indent, spa_port_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debugc_pod_value", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debugc_pod_value(spa_debug_context* ctx, int indent, spa_type_info* info, uint type_, void* body, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debugc_pod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debugc_pod(spa_debug_context* ctx, int indent, spa_type_info* info, spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_pod_value", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debug_pod_value(int indent, spa_type_info* info, uint type_, void* body, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_debug_pod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_debug_pod(int indent, spa_type_info* info, spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_state_reset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_state_reset(spa_graph_state* state);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_link_trigger", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_graph_link_trigger(spa_graph_link* link);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_node_trigger", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_graph_node_trigger(spa_graph_node* node);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_run", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_graph_run(spa_graph* graph);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_finish", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_graph_finish(spa_graph* graph);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_link_signal_node", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_graph_link_signal_node(void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_link_signal_graph", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_graph_link_signal_graph(void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_init(spa_graph* graph, spa_graph_state* state);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_link_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_link_add(spa_graph_node* @out, spa_graph_state* state, spa_graph_link* link);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_link_remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_link_remove(spa_graph_link* link);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_node_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_node_init(spa_graph_node* node, spa_graph_state* state);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_node_impl_sub_process", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_graph_node_impl_sub_process(void* data, spa_graph_node* node);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_node_set_subgraph", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_node_set_subgraph(spa_graph_node* node, spa_graph* subgraph);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_node_set_callbacks", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_node_set_callbacks(spa_graph_node* node, spa_graph_node_callbacks* callbacks, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_node_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_node_add(spa_graph* graph, spa_graph_node* node);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_node_remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_node_remove(spa_graph_node* node);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_port_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_port_init(spa_graph_port* port, uint direction, uint port_id, uint flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_port_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_port_add(spa_graph_node* node, spa_graph_port* port);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_port_remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_port_remove(spa_graph_port* port);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_port_link", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_port_link(spa_graph_port* @out, spa_graph_port* in_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_port_unlink", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_graph_port_unlink(spa_graph_port* port);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_node_impl_process", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_graph_node_impl_process(void* data, spa_graph_node* node);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_graph_node_impl_reuse_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_graph_node_impl_reuse_buffer(void* data, spa_graph_node* node, uint port_id, uint buffer_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_device_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_device_add_listener(spa_device* @object, spa_hook* listener, spa_device_events* events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_device_sync", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_device_sync(spa_device* @object, int seq);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_device_enum_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_device_enum_params(spa_device* @object, int seq, uint id, uint index, uint max, spa_pod* filter);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_device_set_param", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_device_set_param(spa_device* @object, uint id, uint flags, spa_pod* param);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_get_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_builder_get_state(spa_pod_builder* builder, spa_pod_builder_state* state);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_set_callbacks", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_builder_set_callbacks(spa_pod_builder* builder, spa_pod_builder_callbacks* callbacks, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_reset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_builder_reset(spa_pod_builder* builder, spa_pod_builder_state* state);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_builder_init(spa_pod_builder* builder, void* data, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_deref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_pod_builder_deref(spa_pod_builder* builder, uint offset);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_frame", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_pod_builder_frame(spa_pod_builder* builder, spa_pod_frame* frame);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_push", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_pod_builder_push(spa_pod_builder* builder, spa_pod_frame* frame, spa_pod* pod, uint offset);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_raw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_raw(spa_pod_builder* builder, void* data, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_pad", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_pad(spa_pod_builder* builder, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_raw_padded", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_raw_padded(spa_pod_builder* builder, void* data, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_pop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* spa_pod_builder_pop(spa_pod_builder* builder, spa_pod_frame* frame);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_primitive", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_primitive(spa_pod_builder* builder, spa_pod* p);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_none", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_none(spa_pod_builder* builder);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_child", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_child(spa_pod_builder* builder, uint size, uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_bool(spa_pod_builder* builder, [MarshalAs(UnmanagedType.U1)] bool val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_id(spa_pod_builder* builder, uint val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_int", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_int(spa_pod_builder* builder, int val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_long", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_long(spa_pod_builder* builder, long val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_float", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_float(spa_pod_builder* builder, float val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_double", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_double(spa_pod_builder* builder, double val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_write_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_write_string(spa_pod_builder* builder, byte* str_, uint len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_string_len", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_string_len(spa_pod_builder* builder, byte* str_, uint len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_string(spa_pod_builder* builder, byte* str_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_bytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_bytes(spa_pod_builder* builder, void* bytes, uint len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_reserve_bytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* spa_pod_builder_reserve_bytes(spa_pod_builder* builder, uint len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_pointer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_pointer(spa_pod_builder* builder, uint type_, void* val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_fd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_fd(spa_pod_builder* builder, long fd);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_rectangle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_rectangle(spa_pod_builder* builder, uint width, uint height);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_fraction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_fraction(spa_pod_builder* builder, uint num, uint denom);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_push_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_push_array(spa_pod_builder* builder, spa_pod_frame* frame);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_array(spa_pod_builder* builder, uint child_size, uint child_type, uint n_elems, void* elems);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_push_choice", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_push_choice(spa_pod_builder* builder, spa_pod_frame* frame, uint type_, uint flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_push_struct", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_push_struct(spa_pod_builder* builder, spa_pod_frame* frame);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_push_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_push_object(spa_pod_builder* builder, spa_pod_frame* frame, uint type_, uint id);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_prop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_prop(spa_pod_builder* builder, uint key, uint flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_push_sequence", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_push_sequence(spa_pod_builder* builder, spa_pod_frame* frame, uint unit);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_control", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_control(spa_pod_builder* builder, uint offset, uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_choice_from_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_choice_from_id(byte id);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_builder_addv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_builder_addv(spa_pod_builder* builder, __va_list_tag* args);

        /// <summary>
        ///  Copy a pod structure
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_copy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_pod_copy(spa_pod* pod);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_result_func_device_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_result_func_device_params(void* data, int seq, int res, uint type_, void* result);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_device_enum_params_sync", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_device_enum_params_sync(spa_device* device, uint id, uint* index, spa_pod* filter, spa_pod** param, spa_pod_builder* builder);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_result_func_node_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_result_func_node_params(void* data, int seq, int res, uint type_, void* result);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_enum_params_sync", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_enum_params_sync(spa_node* node, uint id, uint* index, spa_pod* filter, spa_pod** param, spa_pod_builder* builder);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_node_port_enum_params_sync", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_node_port_enum_params_sync(spa_node* node, uint direction, uint port_id, uint id, uint* index, spa_pod* filter, spa_pod** param, spa_pod_builder* builder);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_latency_info_compare", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_latency_info_compare(spa_latency_info* a, spa_latency_info* b);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_latency_info_combine_start", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_latency_info_combine_start(spa_latency_info* info, uint direction);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_latency_info_combine_finish", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_latency_info_combine_finish(spa_latency_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_latency_info_combine", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_latency_info_combine(spa_latency_info* info, spa_latency_info* other);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_latency_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_latency_parse(spa_pod* latency, spa_latency_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_latency_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_latency_build(spa_pod_builder* builder, uint id, spa_latency_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_process_latency_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_process_latency_parse(spa_pod* latency, spa_process_latency_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_process_latency_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_process_latency_build(spa_pod_builder* builder, uint id, spa_process_latency_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_process_latency_info_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_process_latency_info_add(spa_process_latency_info* process, spa_latency_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_process_latency_info_compare", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_process_latency_info_compare(spa_process_latency_info* a, spa_process_latency_info* b);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_raw_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_raw_parse(spa_pod* format, spa_audio_info_raw* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_raw_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_raw_build(spa_pod_builder* builder, uint id, spa_audio_info_raw* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_dsp_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_dsp_parse(spa_pod* format, spa_audio_info_dsp* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_dsp_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_dsp_build(spa_pod_builder* builder, uint id, spa_audio_info_dsp* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_iec958_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_iec958_parse(spa_pod* format, spa_audio_info_iec958* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_iec958_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_iec958_build(spa_pod_builder* builder, uint id, spa_audio_info_iec958* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_dsd_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_dsd_parse(spa_pod* format, spa_audio_info_dsd* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_dsd_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_dsd_build(spa_pod_builder* builder, uint id, spa_audio_info_dsd* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_mp3_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_mp3_parse(spa_pod* format, spa_audio_info_mp3* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_mp3_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_mp3_build(spa_pod_builder* builder, uint id, spa_audio_info_mp3* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_aac_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_aac_parse(spa_pod* format, spa_audio_info_aac* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_aac_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_aac_build(spa_pod_builder* builder, uint id, spa_audio_info_aac* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_vorbis_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_vorbis_parse(spa_pod* format, spa_audio_info_vorbis* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_vorbis_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_vorbis_build(spa_pod_builder* builder, uint id, spa_audio_info_vorbis* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_wma_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_wma_parse(spa_pod* format, spa_audio_info_wma* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_wma_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_wma_build(spa_pod_builder* builder, uint id, spa_audio_info_wma* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_ra_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_ra_parse(spa_pod* format, spa_audio_info_ra* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_ra_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_ra_build(spa_pod_builder* builder, uint id, spa_audio_info_ra* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_amr_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_amr_parse(spa_pod* format, spa_audio_info_amr* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_amr_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_amr_build(spa_pod_builder* builder, uint id, spa_audio_info_amr* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_alac_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_alac_parse(spa_pod* format, spa_audio_info_alac* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_alac_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_alac_build(spa_pod_builder* builder, uint id, spa_audio_info_alac* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_flac_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_flac_parse(spa_pod* format, spa_audio_info_flac* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_flac_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_flac_build(spa_pod_builder* builder, uint id, spa_audio_info_flac* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_ape_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_ape_parse(spa_pod* format, spa_audio_info_ape* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_ape_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_ape_build(spa_pod_builder* builder, uint id, spa_audio_info_ape* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_audio_parse(spa_pod* format, spa_audio_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_audio_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_audio_build(spa_pod_builder* builder, uint id, spa_audio_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_video_raw_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_video_raw_parse(spa_pod* format, spa_video_info_raw* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_video_raw_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_video_raw_build(spa_pod_builder* builder, uint id, spa_video_info_raw* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_video_dsp_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_video_dsp_parse(spa_pod* format, spa_video_info_dsp* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_video_dsp_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_video_dsp_build(spa_pod_builder* builder, uint id, spa_video_info_dsp* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_video_h264_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_video_h264_parse(spa_pod* format, spa_video_info_h264* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_video_h264_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_video_h264_build(spa_pod_builder* builder, uint id, spa_video_info_h264* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_video_mjpg_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_video_mjpg_parse(spa_pod* format, spa_video_info_mjpg* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_video_mjpg_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_video_mjpg_build(spa_pod_builder* builder, uint id, spa_video_info_mjpg* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_video_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_format_video_parse(spa_pod* format, spa_video_info* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_format_video_build", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_pod* spa_format_video_build(spa_pod_builder* builder, uint id, spa_video_info* info);

        /// <summary>
        ///  \addtogroup spa_pod
        ///  \{
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_compare_value", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_compare_value(uint type_, void* r1, void* r2, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_compare", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_compare(spa_pod* pod1, spa_pod* pod2);

        /// <summary>
        ///  \addtogroup spa_pod
        ///  \{
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_choice_fix_default", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_choice_fix_default(spa_pod_choice* choice);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_filter_flags_value", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_filter_flags_value(spa_pod_builder* b, uint type_, void* r1, void* r2, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_filter_is_step_of", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_filter_is_step_of(uint type_, void* r1, void* r2, uint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_filter_prop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_filter_prop(spa_pod_builder* b, spa_pod_prop* p1, spa_pod_prop* p2);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_filter_part", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_filter_part(spa_pod_builder* b, spa_pod* pod, uint pod_size, spa_pod* filter, uint filter_size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_pod_filter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_pod_filter(spa_pod_builder* b, spa_pod** result, spa_pod* pod, spa_pod* filter);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_cpu_vm_type_to_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_cpu_vm_type_to_string(uint vm_type);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_cpu_get_flags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_cpu_get_flags(spa_cpu* c);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_cpu_force_flags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_cpu_force_flags(spa_cpu* c, uint flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_cpu_get_count", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_cpu_get_count(spa_cpu* c);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_cpu_get_max_align", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_cpu_get_max_align(spa_cpu* c);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_cpu_get_vm_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint spa_cpu_get_vm_type(spa_cpu* c);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_cpu_zero_denormals", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_cpu_zero_denormals(spa_cpu* c, [MarshalAs(UnmanagedType.U1)] bool enable);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_read", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint spa_system_read(spa_system* @object, int fd, void* buf, nuint count);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_write", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint spa_system_write(spa_system* @object, int fd, void* buf, nuint count);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_close", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_close(spa_system* @object, int fd);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_clock_gettime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_clock_gettime(spa_system* @object, int clockid, timespec* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_clock_getres", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_clock_getres(spa_system* @object, int clockid, timespec* res);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_pollfd_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_pollfd_create(spa_system* @object, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_pollfd_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_pollfd_add(spa_system* @object, int pfd, int fd, uint events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_pollfd_mod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_pollfd_mod(spa_system* @object, int pfd, int fd, uint events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_pollfd_del", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_pollfd_del(spa_system* @object, int pfd, int fd);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_pollfd_wait", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_pollfd_wait(spa_system* @object, int pfd, spa_poll_event* ev, int n_ev, int timeout);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_timerfd_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_timerfd_create(spa_system* @object, int clockid, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_timerfd_settime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_timerfd_settime(spa_system* @object, int fd, int flags, itimerspec* new_value, itimerspec* old_value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_timerfd_gettime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_timerfd_gettime(spa_system* @object, int fd, itimerspec* curr_value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_timerfd_read", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_timerfd_read(spa_system* @object, int fd, ulong* expirations);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_eventfd_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_eventfd_create(spa_system* @object, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_eventfd_write", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_eventfd_write(spa_system* @object, int fd, ulong count);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_eventfd_read", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_eventfd_read(spa_system* @object, int fd, ulong* count);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_signalfd_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_signalfd_create(spa_system* @object, int signal, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_system_signalfd_read", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_system_signalfd_read(spa_system* @object, int fd, int* signal);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_add_source", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_add_source(spa_loop* @object, spa_source* source);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_update_source", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_update_source(spa_loop* @object, spa_source* source);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_remove_source", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_remove_source(spa_loop* @object, spa_source* source);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_invoke", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_invoke(spa_loop* @object, delegate* unmanaged[Cdecl]<spa_loop*, bool, uint, void*, nuint, void*, int> func, uint seq, void* data, nuint size, [MarshalAs(UnmanagedType.U1)] bool block, void* user_data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_control_hook_before", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_loop_control_hook_before(spa_hook_list* l);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_control_hook_after", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_loop_control_hook_after(spa_hook_list* l);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_control_get_fd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_control_get_fd(spa_loop_control* @object);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_control_add_hook", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_loop_control_add_hook(spa_loop_control* @object, spa_hook* hook, spa_loop_control_hooks* hooks, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_control_enter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_loop_control_enter(spa_loop_control* @object);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_control_leave", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_loop_control_leave(spa_loop_control* @object);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_control_iterate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_control_iterate(spa_loop_control* @object, int timeout);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_control_iterate_fast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_control_iterate_fast(spa_loop_control* @object, int timeout);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_control_check", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_control_check(spa_loop_control* @object);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_utils_add_io", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_source* spa_loop_utils_add_io(spa_loop_utils* @object, int fd, uint mask, [MarshalAs(UnmanagedType.U1)] bool close, delegate* unmanaged[Cdecl]<void*, int, uint, void> func, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_utils_update_io", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_utils_update_io(spa_loop_utils* @object, spa_source* source, uint mask);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_utils_add_idle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_source* spa_loop_utils_add_idle(spa_loop_utils* @object, [MarshalAs(UnmanagedType.U1)] bool enabled, delegate* unmanaged[Cdecl]<void*, void> func, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_utils_enable_idle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_utils_enable_idle(spa_loop_utils* @object, spa_source* source, [MarshalAs(UnmanagedType.U1)] bool enabled);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_utils_add_event", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_source* spa_loop_utils_add_event(spa_loop_utils* @object, delegate* unmanaged[Cdecl]<void*, ulong, void> func, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_utils_signal_event", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_utils_signal_event(spa_loop_utils* @object, spa_source* source);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_utils_add_timer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_source* spa_loop_utils_add_timer(spa_loop_utils* @object, delegate* unmanaged[Cdecl]<void*, ulong, void> func, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_utils_update_timer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_loop_utils_update_timer(spa_loop_utils* @object, spa_source* source, timespec* value, timespec* interval, [MarshalAs(UnmanagedType.U1)] bool absolute);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_utils_add_signal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_source* spa_loop_utils_add_signal(spa_loop_utils* @object, int signal_number, delegate* unmanaged[Cdecl]<void*, int, void> func, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_loop_utils_destroy_source", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_loop_utils_destroy_source(spa_loop_utils* @object, spa_source* source);

        /// <summary>
        ///  \copydoc spa_dbus_connection.get
        ///  \sa spa_dbus_connection.get
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_dbus_connection_get", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* spa_dbus_connection_get(spa_dbus_connection* conn);

        /// <summary>
        ///  \copydoc spa_dbus_connection.destroy
        ///  \sa spa_dbus_connection.destroy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_dbus_connection_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_dbus_connection_destroy(spa_dbus_connection* conn);

        /// <summary>
        ///  \copydoc spa_dbus_connection.add_listener
        ///  \sa spa_dbus_connection.add_listener
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_dbus_connection_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_dbus_connection_add_listener(spa_dbus_connection* conn, spa_hook* listener, spa_dbus_connection_events* events, void* data);

        /// <summary>
        ///  \copydoc spa_dbus_methods.get_connection
        ///  \sa spa_dbus_methods.get_connection
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_dbus_get_connection", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_dbus_connection* spa_dbus_get_connection(spa_dbus* dbus, uint type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_i18n_text", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_i18n_text(spa_i18n* i18n, byte* msgid);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_i18n_ntext", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_i18n_ntext(spa_i18n* i18n, byte* msgid, byte* msgid_plural, CULong n);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_log_topic_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_log_topic_init(spa_log* log, spa_log_topic* topic);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_log_level_topic_enabled", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_log_level_topic_enabled(spa_log* log, spa_log_topic* topic, uint level);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_log_logtv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_log_logtv(spa_log* l, uint level, spa_log_topic* topic, byte* file, int line, byte* func, byte* fmt, __va_list_tag* args);

        /// <summary>
        ///  \addtogroup spa_log
        ///  \{
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_log_impl_logtv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_log_impl_logtv(void* @object, uint level, spa_log_topic* topic, byte* file, int line, byte* func, byte* fmt, __va_list_tag* args);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_log_impl_logv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_log_impl_logv(void* @object, uint level, byte* file, int line, byte* func, byte* fmt, __va_list_tag* args);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_log_impl_topic_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_log_impl_topic_init(void* @object, spa_log_topic* topic);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_plugin_loader_load", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_handle* spa_plugin_loader_load(spa_plugin_loader* loader, byte* factory_name, spa_dict* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_plugin_loader_unload", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_plugin_loader_unload(spa_plugin_loader* loader, spa_handle* handle);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_handle_get_interface", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_handle_get_interface(spa_handle* @object, byte* type_, void** iface);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_handle_clear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_handle_clear(spa_handle* @object);

        /// <summary>
        ///  Find a support item of the given type
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_support_find", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* spa_support_find(spa_support* support, uint n_support, byte* type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_handle_factory_get_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint spa_handle_factory_get_size(spa_handle_factory* @object, spa_dict* @params);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_handle_factory_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_handle_factory_init(spa_handle_factory* @object, spa_handle* handle, spa_dict* info, spa_support* support, uint n_support);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_handle_factory_enum_interface_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_handle_factory_enum_interface_info(spa_handle_factory* @object, spa_interface_info** info, uint* index);

        /// <summary>
        ///  \copydoc spa_thread_utils_methods.create
        ///  \sa spa_thread_utils_methods.create
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_thread_utils_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_thread* spa_thread_utils_create(spa_thread_utils* o, spa_dict* props, delegate* unmanaged[Cdecl]<void*, void*> start_routine, void* arg);

        /// <summary>
        ///  \copydoc spa_thread_utils_methods.join
        ///  \sa spa_thread_utils_methods.join
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_thread_utils_join", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_thread_utils_join(spa_thread_utils* o, spa_thread* thread, void** retval);

        /// <summary>
        ///  \copydoc spa_thread_utils_methods.get_rt_range
        ///  \sa spa_thread_utils_methods.get_rt_range
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_thread_utils_get_rt_range", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_thread_utils_get_rt_range(spa_thread_utils* o, spa_dict* props, int* min, int* max);

        /// <summary>
        ///  \copydoc spa_thread_utils_methods.acquire_rt
        ///  \sa spa_thread_utils_methods.acquire_rt
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_thread_utils_acquire_rt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_thread_utils_acquire_rt(spa_thread_utils* o, spa_thread* thread, int priority);

        /// <summary>
        ///  \copydoc spa_thread_utils_methods.drop_rt
        ///  \sa spa_thread_utils_methods.drop_rt
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_thread_utils_drop_rt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_thread_utils_drop_rt(spa_thread_utils* o, spa_thread* thread);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_json_init(spa_json* iter, byte* data, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_enter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_json_enter(spa_json* iter, spa_json* sub);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_save", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_json_save(spa_json* iter, spa_json* save);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_start", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_json_start(spa_json* iter, spa_json* sub, byte* pos);

        /// <summary>
        ///  Get the next token. \a value points to the token and the return value
        ///  is the length. Returns -1 on parse error, 0 on end of input.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_next(spa_json* iter, byte** value);

        /// <summary>
        ///  Return if there was a parse error, and its possible location.
        /// 
        ///  \since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_get_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_json_get_error(spa_json* iter, byte* start, spa_error_location* loc);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_is_container", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_is_container(byte* val, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_is_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_is_object(byte* val, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_is_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_json_is_array(byte* val, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_is_null", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_json_is_null(byte* val, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_parse_float", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_parse_float(byte* val, int len, float* result);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_is_float", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_json_is_float(byte* val, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_format_float", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_json_format_float(byte* str_, int size, float val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_parse_int", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_parse_int(byte* val, int len, int* result);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_is_int", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_json_is_int(byte* val, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_is_true", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_json_is_true(byte* val, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_is_false", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_json_is_false(byte* val, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_is_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_json_is_bool(byte* val, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_parse_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_parse_bool(byte* val, int len, bool* result);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_is_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool spa_json_is_string(byte* val, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_parse_hex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_parse_hex(byte* p, int num, uint* res);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_parse_stringn", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_parse_stringn(byte* val, int len, byte* result, int maxlen);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_parse_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_parse_string(byte* val, int len, byte* result);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_encode_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_encode_string(byte* str_, int size, byte* val);

        /// <summary>
        ///  \addtogroup spa_json
        ///  \{
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_begin", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_begin(spa_json* iter, byte* data, nuint size, byte** val);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_get_float", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_get_float(spa_json* iter, float* res);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_get_int", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_get_int(spa_json* iter, int* res);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_get_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_get_bool(spa_json* iter, bool* res);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_get_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_get_string(spa_json* iter, byte* res, int maxlen);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_enter_container", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_enter_container(spa_json* iter, spa_json* sub, byte type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_begin_container", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_begin_container(spa_json* iter, byte* data, nuint size, byte type_, [MarshalAs(UnmanagedType.U1)] bool relax);

        /// <summary>
        ///  Return length of container at current position, starting at \a value.
        /// 
        ///  \return Length of container including {} or [], or 0 on error.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_container_len", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_container_len(spa_json* iter, byte* value, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_enter_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_enter_object(spa_json* iter, spa_json* sub);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_begin_object_relax", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_begin_object_relax(spa_json* iter, byte* data, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_begin_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_begin_object(spa_json* iter, byte* data, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_object_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_object_next(spa_json* iter, byte* key, int maxkeylen, byte** value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_object_find", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_object_find(spa_json* iter, byte* key, byte** value);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_str_object_find", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_str_object_find(byte* obj, nuint obj_len, byte* key, byte* value, nuint maxlen);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_enter_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_enter_array(spa_json* iter, spa_json* sub);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_begin_array_relax", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_begin_array_relax(spa_json* iter, byte* data, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_begin_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_begin_array(spa_json* iter, byte* data, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_json_str_array_uint32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_json_str_array_uint32(byte* arr, nuint arr_len, uint* values, nuint max);

        [DllImport(__DllName, EntryPoint = "csbindgen_spa_strerror", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* spa_strerror(int err);

        /// <summary>
        ///  Initialize a spa_ringbuffer with \a size.
        /// 
        ///  \param rbuf a spa_ringbuffer
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_ringbuffer_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_ringbuffer_init(spa_ringbuffer* rbuf);

        /// <summary>
        ///  Sets the pointers so that the ringbuffer contains \a size bytes.
        /// 
        ///  \param rbuf a spa_ringbuffer
        ///  \param size the target size of \a rbuf
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_ringbuffer_set_avail", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_ringbuffer_set_avail(spa_ringbuffer* rbuf, uint size);

        /// <summary>
        ///  Get the read index and available bytes for reading.
        /// 
        ///  \param rbuf a  spa_ringbuffer
        ///  \param index the value of readindex, should be taken modulo the size of the
        ///          ringbuffer memory to get the offset in the ringbuffer memory
        ///  \return number of available bytes to read. values &lt; 0 mean
        ///          there was an underrun. values &gt; rbuf-&gt;size means there
        ///          was an overrun.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_ringbuffer_get_read_index", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_ringbuffer_get_read_index(spa_ringbuffer* rbuf, uint* index);

        /// <summary>
        ///  Read \a len bytes from \a rbuf starting \a offset. \a offset must be taken
        ///  modulo \a size and len should be smaller than \a size.
        /// 
        ///  \param rbuf a struct \ref spa_ringbuffer
        ///  \param buffer memory to read from
        ///  \param size the size of \a buffer
        ///  \param offset offset in \a buffer to read from
        ///  \param data destination memory
        ///  \param len number of bytes to read
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_ringbuffer_read_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_ringbuffer_read_data(spa_ringbuffer* rbuf, void* buffer, uint size, uint offset, void* data, uint len);

        /// <summary>
        ///  Update the read pointer to \a index.
        /// 
        ///  \param rbuf a spa_ringbuffer
        ///  \param index new index
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_ringbuffer_read_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_ringbuffer_read_update(spa_ringbuffer* rbuf, int index);

        /// <summary>
        ///  Get the write index and the number of bytes inside the ringbuffer.
        /// 
        ///  \param rbuf a  spa_ringbuffer
        ///  \param index the value of writeindex, should be taken modulo the size of the
        ///          ringbuffer memory to get the offset in the ringbuffer memory
        ///  \return the fill level of \a rbuf. values &lt; 0 mean
        ///          there was an underrun. values &gt; rbuf-&gt;size means there
        ///          was an overrun. Subtract from the buffer size to get
        ///          the number of bytes available for writing.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_ringbuffer_get_write_index", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int spa_ringbuffer_get_write_index(spa_ringbuffer* rbuf, uint* index);

        /// <summary>
        ///  Write \a len bytes to \a buffer starting \a offset. \a offset must be taken
        ///  modulo \a size and len should be smaller than \a size.
        /// 
        ///  \param rbuf a spa_ringbuffer
        ///  \param buffer memory to write to
        ///  \param size the size of \a buffer
        ///  \param offset offset in \a buffer to write to
        ///  \param data source memory
        ///  \param len number of bytes to write
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_ringbuffer_write_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_ringbuffer_write_data(spa_ringbuffer* rbuf, void* buffer, uint size, uint offset, void* data, uint len);

        /// <summary>
        ///  Update the write pointer to \a index
        /// 
        ///  \param rbuf a spa_ringbuffer
        ///  \param index new index
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_spa_ringbuffer_write_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void spa_ringbuffer_write_update(spa_ringbuffer* rbuf, int index);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_type_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_type_info* pw_type_info();

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_properties_new(byte* key);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_new_dict", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_properties_new_dict(spa_dict* dict);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_new_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_properties_new_string(byte* args);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_new_string_checked", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_properties_new_string_checked(byte* args, nuint size, spa_error_location* loc);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_copy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_properties_copy(pw_properties* properties);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_update_keys", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_update_keys(pw_properties* props, spa_dict* dict, byte** keys);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_update_ignore", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_update_ignore(pw_properties* props, spa_dict* dict, byte** ignore);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_update(pw_properties* props, spa_dict* dict);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_update_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_update_string(pw_properties* props, byte* str_, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_update_string_checked", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_update_string_checked(pw_properties* props, byte* str_, nuint size, spa_error_location* loc);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_add(pw_properties* oldprops, spa_dict* dict);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_add_keys", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_add_keys(pw_properties* oldprops, spa_dict* dict, byte** keys);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_clear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_properties_clear(pw_properties* properties);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_properties_free(pw_properties* properties);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_set", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_set(pw_properties* properties, byte* key, byte* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_setf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_setf(pw_properties* properties, byte* key, byte* format);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_setva", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_setva(pw_properties* properties, byte* key, byte* format, __va_list_tag* args);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_get", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_properties_get(pw_properties* properties, byte* key);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_fetch_uint32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_fetch_uint32(pw_properties* properties, byte* key, uint* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_fetch_int32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_fetch_int32(pw_properties* properties, byte* key, int* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_fetch_uint64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_fetch_uint64(pw_properties* properties, byte* key, ulong* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_fetch_int64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_fetch_int64(pw_properties* properties, byte* key, long* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_fetch_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_fetch_bool(pw_properties* properties, byte* key, bool* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_iterate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_properties_iterate(pw_properties* properties, void** state);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_properties_serialize_dict", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_properties_serialize_dict(_IO_FILE* f, spa_dict* dict, uint flags);

        /// <summary>
        ///  Update an existing \ref pw_core_info with \a update with reset. When info is NULL,
        ///  a new one will be allocated. Returns NULL on failure.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_info_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_core_info* pw_core_info_update(pw_core_info* info, pw_core_info* update);

        /// <summary>
        ///  Update an existing \ref pw_core_info with \a update. When info is NULL, a new one
        ///  will be allocated. Returns NULL on failure
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_info_merge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_core_info* pw_core_info_merge(pw_core_info* info, pw_core_info* update, [MarshalAs(UnmanagedType.U1)] bool reset);

        /// <summary>
        ///  Free a \ref pw_core_info
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_info_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_core_info_free(pw_core_info* info);

        /// <summary>
        ///  Connect to a PipeWire instance
        /// 
        ///  \param context a \ref pw_context
        ///  \param properties optional properties, ownership of the properties is
        /// 	taken.
        ///  \param user_data_size extra user data size
        /// 
        ///  \return a \ref pw_core on success or NULL with errno set on error. The core
        ///  will have an id of \ref PW_ID_CORE (0)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_connect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_core* pw_context_connect(pw_context* context, pw_properties* properties, nuint user_data_size);

        /// <summary>
        ///  Connect to a PipeWire instance on the given socket
        /// 
        ///  \param context a \ref pw_context
        ///  \param fd the connected socket to use, the socket will be closed
        /// 	automatically on disconnect or error.
        ///  \param properties optional properties, ownership of the properties is
        /// 	taken.
        ///  \param user_data_size extra user data size
        /// 
        ///  \return a \ref pw_core on success or NULL with errno set on error
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_connect_fd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_core* pw_context_connect_fd(pw_context* context, int fd, pw_properties* properties, nuint user_data_size);

        /// <summary>
        ///  Connect to a given PipeWire instance
        /// 
        ///  \param context a \ref pw_context to connect to
        ///  \param properties optional properties, ownership of the properties is
        /// 	taken.
        ///  \param user_data_size extra user data size
        /// 
        ///  \return a \ref pw_core on success or NULL with errno set on error
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_connect_self", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_core* pw_context_connect_self(pw_context* context, pw_properties* properties, nuint user_data_size);

        /// <summary>
        ///  Steal the fd of the core connection or &lt; 0 on error. The core
        ///  will be disconnected after this call.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_steal_fd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_core_steal_fd(pw_core* core);

        /// <summary>
        ///  Pause or resume the core. When the core is paused, no new events
        ///   will be dispatched until the core is resumed again.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_set_paused", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_core_set_paused(pw_core* core, [MarshalAs(UnmanagedType.U1)] bool paused);

        /// <summary>
        ///  disconnect and destroy a core
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_disconnect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_core_disconnect(pw_core* core);

        /// <summary>
        ///  Get the user_data. It is of the size specified when this object was
        ///  constructed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_core_get_user_data(pw_core* core);

        /// <summary>
        ///  Get the client proxy of the connected core. This will have the id
        ///  of PW_ID_CLIENT (1)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_get_client", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_client* pw_core_get_client(pw_core* core);

        /// <summary>
        ///  Get the context object used to created this core
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_get_context", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_context* pw_core_get_context(pw_core* core);

        /// <summary>
        ///  Get properties from the core
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_core_get_properties(pw_core* core);

        /// <summary>
        ///  Update the core properties. This updates the properties
        ///  of the associated client.
        ///  \return the number of properties that were updated
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_core_update_properties(pw_core* core, spa_dict* dict);

        /// <summary>
        ///  Get the core mempool object
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_get_mempool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_mempool* pw_core_get_mempool(pw_core* core);

        /// <summary>
        ///  Get the proxy with the given id
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_find_proxy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_proxy* pw_core_find_proxy(pw_core* core, uint id);

        /// <summary>
        ///  Export an object into the PipeWire instance associated with core
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_core_export", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_proxy* pw_core_export(pw_core* core, byte* type_, spa_dict* props, void* @object, nuint user_data_size);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_loop_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_loop* pw_loop_new(spa_dict* props);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_loop_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_loop_destroy(pw_loop* loop_);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_loop_set_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_loop_set_name(pw_loop* loop_, byte* name);

        /// <summary>
        ///  Make a new context object for a given main_loop. Ownership of the properties is taken, even
        ///  if the function returns NULL.
        /// 
        ///  \param main_loop A main loop to run in. This must stay alive unil pw_context_destroy() is called.
        ///  \param props extra properties
        ///  \param user_data_size extra user data size
        ///  \return The context object on success, or NULL on failure, in which case errno is set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_context* pw_context_new(pw_loop* main_loop, pw_properties* props, nuint user_data_size);

        /// <summary>
        ///  destroy a context object, all resources except the main_loop will be destroyed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_context_destroy(pw_context* context);

        /// <summary>
        ///  Get the context user data
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_context_get_user_data(pw_context* context);

        /// <summary>
        ///  Add a new event listener to a context
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_context_add_listener(pw_context* context, spa_hook* listener, pw_context_events* events, void* data);

        /// <summary>
        ///  Get the context properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_context_get_properties(pw_context* context);

        /// <summary>
        ///  Update the context properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_context_update_properties(pw_context* context, spa_dict* dict);

        /// <summary>
        ///  Get a config section for this context. Since 0.3.22, deprecated,
        ///  use pw_context_conf_section_for_each().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_get_conf_section", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_context_get_conf_section(pw_context* context, byte* section);

        /// <summary>
        ///  Parse a standard config section for this context. Since 0.3.22
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_parse_conf_section", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_context_parse_conf_section(pw_context* context, pw_properties* conf, byte* section);

        /// <summary>
        ///  update properties from a section into props. Since 0.3.45
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_conf_update_props", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_context_conf_update_props(pw_context* context, byte* section, pw_properties* props);

        /// <summary>
        ///  emit callback for all config sections. Since 0.3.45
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_conf_section_for_each", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_context_conf_section_for_each(pw_context* context, byte* section, delegate* unmanaged[Cdecl]<void*, byte*, byte*, byte*, nuint, int> callback, void* data);

        /// <summary>
        ///  emit callback for all matched properties. Since 0.3.46
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_conf_section_match_rules", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_context_conf_section_match_rules(pw_context* context, byte* section, spa_dict* props, delegate* unmanaged[Cdecl]<void*, byte*, byte*, byte*, nuint, int> callback, void* data);

        /// <summary>
        ///  Get the context support objects
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_get_support", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_support* pw_context_get_support(pw_context* context, uint* n_support);

        /// <summary>
        ///  Get the context main loop. Returns the value passed to pw_context_new().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_get_main_loop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_loop* pw_context_get_main_loop(pw_context* context);

        /// <summary>
        ///  Get the context data loop. This loop runs on the realtime thread. This
        ///  acquires a loop from the generic data.rt class. Use pw_context_acquire_loop() instead.
        ///  Since 0.3.56
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_get_data_loop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_data_loop* pw_context_get_data_loop(pw_context* context);

        /// <summary>
        ///  Get a data-loop.
        ///  Since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_acquire_loop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_loop* pw_context_acquire_loop(pw_context* context, spa_dict* props);

        /// <summary>
        ///  Release a data-loop.
        ///  Since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_release_loop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_context_release_loop(pw_context* context, pw_loop* loop_);

        /// <summary>
        ///  Get the work queue from the context: Since 0.3.26
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_get_work_queue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_work_queue* pw_context_get_work_queue(pw_context* context);

        /// <summary>
        ///  Get the memory pool from the context: Since 0.3.74
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_get_mempool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_mempool* pw_context_get_mempool(pw_context* context);

        /// <summary>
        ///  Iterate the globals of the context. The callback should return
        ///  0 to fetch the next item, any other value stops the iteration and returns
        ///  the value. When all callbacks return 0, this function returns 0 when all
        ///  globals are iterated.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_for_each_global", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_context_for_each_global(pw_context* context, delegate* unmanaged[Cdecl]<void*, pw_global*, int> callback, void* data);

        /// <summary>
        ///  Find a context global by id.
        /// 
        ///  \return The global on success, or NULL on failure. If id is \ref PW_ID_CORE,
        ///          this function will always return a non-NULL value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_find_global", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_global* pw_context_find_global(pw_context* context, uint id);

        /// <summary>
        ///  add a spa library for the given factory_name regex
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_add_spa_lib", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_context_add_spa_lib(pw_context* context, byte* factory_regex, byte* lib);

        /// <summary>
        ///  find the library name for a spa factory
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_find_spa_lib", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_context_find_spa_lib(pw_context* context, byte* factory_name);

        /// <summary>
        ///  Load a SPA handle from a context. On failure returns NULL and sets errno.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_load_spa_handle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_handle* pw_context_load_spa_handle(pw_context* context, byte* factory_name, spa_dict* info);

        /// <summary>
        ///  register a type that can be exported on a context_proxy. This is usually used by
        ///  extension modules
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_register_export_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_context_register_export_type(pw_context* context, pw_export_type* type_);

        /// <summary>
        ///  find information about registered export type
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_find_export_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_export_type* pw_context_find_export_type(pw_context* context, byte* type_);

        /// <summary>
        ///  add an object to the context
        /// 
        ///  \param context The context.
        ///  \param type The type of the object, usually a `TYPE_INTERFACE_` value.
        ///  \param value The object value. Must last as long as the context and must
        ///               be of the type corresponding to the type.
        ///  \return A negative number on failure (out of memory).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_set_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_context_set_object(pw_context* context, byte* type_, void* value);

        /// <summary>
        ///  get an object from the context
        /// 
        ///  \param context The context.
        ///  \param type The string corresponding to the object's interface.
        ///  \return The object, or NULL if the object does not exist.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_get_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_context_get_object(pw_context* context, byte* type_);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_split_walk", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_split_walk(byte* str_, byte* delimiter, nuint* len, byte** state);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_split_strv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte** pw_split_strv(byte* str_, byte* delimiter, int max_tokens, int* n_tokens);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_split_ip", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_split_ip(byte* str_, byte* delimiter, int max_tokens, byte** tokens);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_strv_parse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte** pw_strv_parse(byte* val, nuint len, int max_tokens, int* n_tokens);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_strv_find", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_strv_find(byte** a, byte* b);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_strv_find_common", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_strv_find_common(byte** a, byte** b);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_free_strv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_free_strv(byte** str_);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_strip", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_strip(byte* str_, byte* whitespace);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_getrandom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint pw_getrandom(void* buf, nuint buflen, uint flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_random", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_random(void* buf, nuint buflen);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_reallocarray", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_reallocarray(void* ptr, nuint nmemb, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_protocol_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_protocol* pw_protocol_new(pw_context* context, byte* name, nuint user_data_size);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_protocol_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_protocol_destroy(pw_protocol* protocol);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_protocol_get_context", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_context* pw_protocol_get_context(pw_protocol* protocol);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_protocol_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_protocol_get_user_data(pw_protocol* protocol);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_protocol_get_implementation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_protocol_implementation* pw_protocol_get_implementation(pw_protocol* protocol);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_protocol_get_extension", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_protocol_get_extension(pw_protocol* protocol);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_protocol_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_protocol_add_listener(pw_protocol* protocol, spa_hook* listener, pw_protocol_events* events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_protocol_add_marshal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_protocol_add_marshal(pw_protocol* protocol, pw_protocol_marshal* marshal);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_protocol_get_marshal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_protocol_marshal* pw_protocol_get_marshal(pw_protocol* protocol, byte* type_, uint version, uint flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_find_protocol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_protocol* pw_context_find_protocol(pw_context* context, byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_proxy* pw_proxy_new(pw_proxy* factory, byte* type_, uint version, nuint user_data_size);

        /// <summary>
        ///  Add an event listener to proxy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_proxy_add_listener(pw_proxy* proxy, spa_hook* listener, pw_proxy_events* events, void* data);

        /// <summary>
        ///  Add a listener for the events received from the remote object. The
        ///  events depend on the type of the remote object type.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_add_object_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_proxy_add_object_listener(pw_proxy* proxy, spa_hook* listener, void* funcs, void* data);

        /// <summary>
        ///  destroy a proxy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_proxy_destroy(pw_proxy* proxy);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_ref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_proxy_ref(pw_proxy* proxy);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_unref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_proxy_unref(pw_proxy* proxy);

        /// <summary>
        ///  Get the user_data. The size was given in \ref pw_proxy_new
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_proxy_get_user_data(pw_proxy* proxy);

        /// <summary>
        ///  Get the local id of the proxy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_get_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_proxy_get_id(pw_proxy* proxy);

        /// <summary>
        ///  Get the type and version of the proxy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_get_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_proxy_get_type(pw_proxy* proxy, uint* version);

        /// <summary>
        ///  Get the protocol used for the proxy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_get_protocol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_protocol* pw_proxy_get_protocol(pw_proxy* proxy);

        /// <summary>
        ///  Generate an sync method for a proxy. This will generate a done event
        ///  with the same seq number of the reply.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_sync", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_proxy_sync(pw_proxy* proxy, int seq);

        /// <summary>
        ///  Set the global id this proxy is bound to. This is usually used internally
        ///  and will also emit the bound event
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_set_bound_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_proxy_set_bound_id(pw_proxy* proxy, uint global_id);

        /// <summary>
        ///  Get the global id bound to this proxy of SPA_ID_INVALID when not bound
        ///  to a global
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_get_bound_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_proxy_get_bound_id(pw_proxy* proxy);

        /// <summary>
        ///  Generate an error for a proxy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_proxy_error(pw_proxy* proxy, int res, byte* error);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_errorf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_proxy_errorf(pw_proxy* proxy, int res, byte* error);

        /// <summary>
        ///  Get the listener of proxy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_get_object_listeners", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_hook_list* pw_proxy_get_object_listeners(pw_proxy* proxy);

        /// <summary>
        ///  Get the marshal functions for the proxy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_get_marshal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_protocol_marshal* pw_proxy_get_marshal(pw_proxy* proxy);

        /// <summary>
        ///  Install a marshal function on a proxy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_proxy_install_marshal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_proxy_install_marshal(pw_proxy* proxy, [MarshalAs(UnmanagedType.U1)] bool implementor);

        /// <summary>
        ///  Update an existing \ref pw_client_info with \a update with reset
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_client_info_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_client_info* pw_client_info_update(pw_client_info* info, pw_client_info* update);

        /// <summary>
        ///  Merge an existing \ref pw_client_info with \a update
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_client_info_merge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_client_info* pw_client_info_merge(pw_client_info* info, pw_client_info* update, [MarshalAs(UnmanagedType.U1)] bool reset);

        /// <summary>
        ///  Free a \ref pw_client_info
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_client_info_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_client_info_free(pw_client_info* info);

        /// <summary>
        ///  \addtogroup pw_conf
        ///  \{
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_conf_load_conf_for_context", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_conf_load_conf_for_context(pw_properties* props, pw_properties* conf);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_conf_load_conf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_conf_load_conf(byte* prefix, byte* name, pw_properties* conf);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_conf_load_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_conf_load_state(byte* prefix, byte* name, pw_properties* conf);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_conf_save_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_conf_save_state(byte* prefix, byte* name, pw_properties* conf);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_conf_find_match", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_conf_find_match(spa_json* arr, spa_dict* props, [MarshalAs(UnmanagedType.U1)] bool condition);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_conf_section_update_props", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_conf_section_update_props(spa_dict* conf, byte* section, pw_properties* props);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_conf_section_update_props_rules", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_conf_section_update_props_rules(spa_dict* conf, spa_dict* context, byte* section, pw_properties* props);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_conf_section_for_each", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_conf_section_for_each(spa_dict* conf, byte* section, delegate* unmanaged[Cdecl]<void*, byte*, byte*, byte*, nuint, int> callback, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_conf_match_rules", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_conf_match_rules(byte* str_, nuint len, byte* location, spa_dict* props, delegate* unmanaged[Cdecl]<void*, byte*, byte*, byte*, nuint, int> callback, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_conf_section_match_rules", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_conf_section_match_rules(spa_dict* conf, byte* section, spa_dict* props, delegate* unmanaged[Cdecl]<void*, byte*, byte*, byte*, nuint, int> callback, void* data);

        /// <summary>
        ///  Update and existing \ref pw_device_info with \a update and reset
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_device_info_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_device_info* pw_device_info_update(pw_device_info* info, pw_device_info* update);

        /// <summary>
        ///  Merge and existing \ref pw_device_info with \a update
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_device_info_merge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_device_info* pw_device_info_merge(pw_device_info* info, pw_device_info* update, [MarshalAs(UnmanagedType.U1)] bool reset);

        /// <summary>
        ///  Free a \ref pw_device_info
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_device_info_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_device_info_free(pw_device_info* info);

        /// <summary>
        ///  Create a new memory pool
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_mempool* pw_mempool_new(pw_properties* props);

        /// <summary>
        ///  Listen for events
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_mempool_add_listener(pw_mempool* pool, spa_hook* listener, pw_mempool_events* events, void* data);

        /// <summary>
        ///  Clear a pool
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_clear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_mempool_clear(pw_mempool* pool);

        /// <summary>
        ///  Clear and destroy a pool
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_mempool_destroy(pw_mempool* pool);

        /// <summary>
        ///  Allocate a memory block from the pool
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_memblock* pw_mempool_alloc(pw_mempool* pool, uint flags, uint type_, nuint size);

        /// <summary>
        ///  Import a block from another pool
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_import_block", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_memblock* pw_mempool_import_block(pw_mempool* pool, pw_memblock* mem);

        /// <summary>
        ///  Import an fd into the pool
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_import", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_memblock* pw_mempool_import(pw_mempool* pool, uint flags, uint type_, int fd);

        /// <summary>
        ///  Free a memblock regardless of the refcount and destroy all mappings
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_memblock_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_memblock_free(pw_memblock* mem);

        /// <summary>
        ///  Remove a memblock for given \a id
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_remove_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_mempool_remove_id(pw_mempool* pool, uint id);

        /// <summary>
        ///  Find memblock for given \a ptr
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_find_ptr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_memblock* pw_mempool_find_ptr(pw_mempool* pool, void* ptr);

        /// <summary>
        ///  Find memblock for given \a id
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_find_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_memblock* pw_mempool_find_id(pw_mempool* pool, uint id);

        /// <summary>
        ///  Find memblock for given \a fd
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_find_fd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_memblock* pw_mempool_find_fd(pw_mempool* pool, int fd);

        /// <summary>
        ///  Map a region of a memory block
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_memblock_map", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_memmap* pw_memblock_map(pw_memblock* block, uint flags, uint offset, uint size, uint* tag);

        /// <summary>
        ///  Map a region of a memory block with \a id
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_map_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_memmap* pw_mempool_map_id(pw_mempool* pool, uint id, uint flags, uint offset, uint size, uint* tag);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_import_map", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_memmap* pw_mempool_import_map(pw_mempool* pool, pw_mempool* other, void* data, uint size, uint* tag);

        /// <summary>
        ///  find a map with the given tag
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_mempool_find_tag", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_memmap* pw_mempool_find_tag(pw_mempool* pool, uint* tag, nuint size);

        /// <summary>
        ///  Unmap a region
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_memmap_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_memmap_free(pw_memmap* map);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_buffers_negotiate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_buffers_negotiate(pw_context* context, uint flags, spa_node* outnode, uint out_port_id, spa_node* innode, uint in_port_id, pw_buffers* result);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_buffers_clear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_buffers_clear(pw_buffers* buffers);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_factory_info_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_factory_info* pw_factory_info_update(pw_factory_info* info, pw_factory_info* update);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_factory_info_merge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_factory_info* pw_factory_info_merge(pw_factory_info* info, pw_factory_info* update, [MarshalAs(UnmanagedType.U1)] bool reset);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_factory_info_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_factory_info_free(pw_factory_info* info);

        /// <summary>
        ///  Configure a logging module. This is usually done automatically
        ///  in pw_init() but you can install a custom logger before calling
        ///  pw_init().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_log_set", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_log_set(spa_log* log);

        /// <summary>
        ///  Get the log interface
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_log_get", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_log* pw_log_get();

        /// <summary>
        ///  Configure the logging level
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_log_set_level", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_log_set_level(uint level);

        /// <summary>
        ///  Configure the logging level using a string
        ///  in PIPEWIRE_DEBUG format.
        /// 
        ///  \since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_log_set_level_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_log_set_level_string(byte* str_);

        /// <summary>
        ///  Log a message for a topic
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_log_logt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_log_logt(uint level, spa_log_topic* topic, byte* file, int line, byte* func, byte* fmt);

        /// <summary>
        ///  Log a message for a topic
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_log_logtv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_log_logtv(uint level, spa_log_topic* topic, byte* file, int line, byte* func, byte* fmt, __va_list_tag* args);

        /// <summary>
        ///  Log a message for the default topic
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_log_log", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_log_log(uint level, byte* file, int line, byte* func, byte* fmt);

        /// <summary>
        ///  Log a message for the default topic
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_log_logv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_log_logv(uint level, byte* file, int line, byte* func, byte* fmt, __va_list_tag* args);

        /// <summary>
        ///  Register log topic with the logger, to enable dynamic log levels.
        ///  Topic must be unregistered before freeing it or plugin unload.
        ///  May be used instead of \ref PW_LOG_TOPIC_INIT
        ///  This function is threadsafe.
        /// 
        ///  \since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_log_topic_register", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_log_topic_register(spa_log_topic* t);

        /// <summary>
        ///  Unregister log topic. This function is threadsafe.
        /// 
        ///  \since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_log_topic_unregister", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_log_topic_unregister(spa_log_topic* t);

        /// <summary>
        ///  Convert a \ref pw_link_state to a readable string
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_link_state_as_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_link_state_as_string(int state);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_link_info_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_link_info* pw_link_info_update(pw_link_info* info, pw_link_info* update);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_link_info_merge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_link_info* pw_link_info_merge(pw_link_info* info, pw_link_info* update, [MarshalAs(UnmanagedType.U1)] bool reset);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_link_info_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_link_info_free(pw_link_info* info);

        /// <summary>
        ///  Create a new main loop.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_main_loop_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_main_loop* pw_main_loop_new(spa_dict* props);

        /// <summary>
        ///  Add an event listener
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_main_loop_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_main_loop_add_listener(pw_main_loop* loop_, spa_hook* listener, pw_main_loop_events* events, void* data);

        /// <summary>
        ///  Get the loop implementation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_main_loop_get_loop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_loop* pw_main_loop_get_loop(pw_main_loop* loop_);

        /// <summary>
        ///  Destroy a loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_main_loop_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_main_loop_destroy(pw_main_loop* loop_);

        /// <summary>
        ///  Run a main loop. This blocks until \ref pw_main_loop_quit is called.
        /// 
        ///  @return 0 on success, otherwise a negative number.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_main_loop_run", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_main_loop_run(pw_main_loop* loop_);

        /// <summary>
        ///  Quit a main loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_main_loop_quit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_main_loop_quit(pw_main_loop* loop_);

        /// <summary>
        ///  Update and existing \ref pw_module_info with \a update with reset
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_module_info_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_module_info* pw_module_info_update(pw_module_info* info, pw_module_info* update);

        /// <summary>
        ///  Merge and existing \ref pw_module_info with \a update
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_module_info_merge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_module_info* pw_module_info_merge(pw_module_info* info, pw_module_info* update, [MarshalAs(UnmanagedType.U1)] bool reset);

        /// <summary>
        ///  Free a \ref pw_module_info
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_module_info_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_module_info_free(pw_module_info* info);

        /// <summary>
        ///  Convert a \ref pw_node_state to a readable string
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_node_state_as_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_node_state_as_string(int state);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_node_info_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_node_info* pw_node_info_update(pw_node_info* info, pw_node_info* update);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_node_info_merge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_node_info* pw_node_info_merge(pw_node_info* info, pw_node_info* update, [MarshalAs(UnmanagedType.U1)] bool reset);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_node_info_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_node_info_free(pw_node_info* info);

        /// <summary>
        ///  Convert a \ref pw_direction to a readable string
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_direction_as_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_direction_as_string(uint direction);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_port_info_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_port_info* pw_port_info_update(pw_port_info* info, pw_port_info* update);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_port_info_merge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_port_info* pw_port_info_merge(pw_port_info* info, pw_port_info* update, [MarshalAs(UnmanagedType.U1)] bool reset);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_port_info_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_port_info_free(pw_port_info* info);

        /// <summary>
        ///  Convert a stream state to a readable string
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_state_as_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_stream_state_as_string(int state);

        /// <summary>
        ///  Create a new unconnected \ref pw_stream
        ///  \return a newly allocated \ref pw_stream
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_stream* pw_stream_new(pw_core* core, byte* name, pw_properties* props);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_new_simple", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_stream* pw_stream_new_simple(pw_loop* loop_, byte* name, pw_properties* props, pw_stream_events* events, void* data);

        /// <summary>
        ///  Destroy a stream
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_stream_destroy(pw_stream* stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_stream_add_listener(pw_stream* stream, spa_hook* listener, pw_stream_events* events, void* data);

        /// <summary>
        ///  Get the current stream state. Since 1.4 this also sets errno when the
        ///  state is PW_STREAM_STATE_ERROR
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_get_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_get_state(pw_stream* stream, byte** error);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_get_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_stream_get_name(pw_stream* stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_get_core", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_core* pw_stream_get_core(pw_stream* stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_stream_get_properties(pw_stream* stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_update_properties(pw_stream* stream, spa_dict* dict);

        /// <summary>
        ///  Connect a stream for input or output on \a port_path.
        ///  \return 0 on success &lt; 0 on error.
        /// 
        ///  You should connect to the process event and use pw_stream_dequeue_buffer()
        ///  to get the latest metadata and data.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_connect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_connect(pw_stream* stream, uint direction, uint target_id, uint flags, spa_pod** @params, uint n_params);

        /// <summary>
        ///  Get the node ID of the stream.
        ///  \return node ID.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_get_node_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_stream_get_node_id(pw_stream* stream);

        /// <summary>
        ///  Disconnect \a stream
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_disconnect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_disconnect(pw_stream* stream);

        /// <summary>
        ///  Set the stream in error state
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_set_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_set_error(pw_stream* stream, int res, byte* error);

        /// <summary>
        ///  Update the param exposed on the stream.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_update_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_update_params(pw_stream* stream, spa_pod** @params, uint n_params);

        /// <summary>
        ///  Set a parameter on the stream. This is like pw_stream_set_control() but with
        ///  a complete spa_pod param. It can also be called from the param_changed event handler
        ///  to intercept and modify the param for the adapter. Since 0.3.70
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_set_param", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_set_param(pw_stream* stream, uint id, spa_pod* param);

        /// <summary>
        ///  Get control values
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_get_control", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_stream_control* pw_stream_get_control(pw_stream* stream, uint id);

        /// <summary>
        ///  Set control values
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_set_control", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_set_control(pw_stream* stream, uint id, uint n_values, float* values);

        /// <summary>
        ///  Query the time on the stream, RT safe
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_get_time_n", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_get_time_n(pw_stream* stream, pw_time* time, nuint size);

        /// <summary>
        ///  Get the current time in nanoseconds. This value can be compared with
        ///  the \ref pw_time.now value. RT safe. Since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_get_nsec", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong pw_stream_get_nsec(pw_stream* stream);

        /// <summary>
        ///  Get the data loop that is doing the processing of this stream. This loop
        ///  is assigned after pw_stream_connect().  * Since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_get_data_loop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_loop* pw_stream_get_data_loop(pw_stream* stream);

        /// <summary>
        ///  Query the time on the stream, deprecated since 0.3.50,
        ///  use pw_stream_get_time_n() to get the fields added since 0.3.50. RT safe.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_get_time", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_get_time(pw_stream* stream, pw_time* time);

        /// <summary>
        ///  Get a buffer that can be filled for playback streams or consumed
        ///  for capture streams. RT safe.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_dequeue_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_buffer* pw_stream_dequeue_buffer(pw_stream* stream);

        /// <summary>
        ///  Submit a buffer for playback or recycle a buffer for capture. RT safe.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_queue_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_queue_buffer(pw_stream* stream, pw_buffer* buffer);

        /// <summary>
        ///  Return a buffer to the queue without using it. This makes the buffer
        ///  immediately available to dequeue again. RT safe.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_return_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_return_buffer(pw_stream* stream, pw_buffer* buffer);

        /// <summary>
        ///  Activate or deactivate the stream
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_set_active", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_set_active(pw_stream* stream, [MarshalAs(UnmanagedType.U1)] bool active);

        /// <summary>
        ///  Flush a stream. When \a drain is true, the drained callback will
        ///  be called when all data is played or recorded. The stream can be resumed
        ///  after the drain by setting it active again with
        ///  \ref pw_stream_set_active(). A flush without a drain is mostly useful afer
        ///  a state change to PAUSED, to flush any remaining data from the queues and
        ///  the converters. RT safe.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_flush", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_flush(pw_stream* stream, [MarshalAs(UnmanagedType.U1)] bool drain);

        /// <summary>
        ///  Check if the stream is driving. The stream needs to have the
        ///  PW_STREAM_FLAG_DRIVER set. When the stream is driving,
        ///  pw_stream_trigger_process() needs to be called when data is
        ///  available (output) or needed (input). Since 0.3.34
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_is_driving", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_stream_is_driving(pw_stream* stream);

        /// <summary>
        ///  Check if the graph is using lazy scheduling. If the stream is
        ///  driving according to \ref pw_stream_is_driving(), then it should
        ///  consider taking into account the RequestProcess commands when
        ///  driving the graph.
        /// 
        ///  If the stream is not driving, it should send out RequestProcess
        ///  events with \ref pw_stream_emit_event() or indirectly with
        ///  \ref pw_stream_trigger_process() to suggest a new graph cycle
        ///  to the driver.
        /// 
        ///  It is not a requirement that all RequestProcess events/commands
        ///  need to start a graph cycle.
        ///  Since 1.4.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_is_lazy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_stream_is_lazy(pw_stream* stream);

        /// <summary>
        ///  Trigger a push/pull on the stream. One iteration of the graph will
        ///  be scheduled when the stream is driving according to
        ///  \ref pw_stream_is_driving(). If it successfully finishes, process()
        ///  will be called and the trigger_done event will be emitted. It is
        ///  possible for the graph iteration to not finish, so
        ///  pw_stream_trigger_process() needs to be called again even if process()
        ///  and trigger_done is not called.
        /// 
        ///  If there is a deadline after which the stream will have xrun,
        ///  pw_stream_trigger_process() should be called then, whether or not
        ///  process()/trigger_done has been called. Sound hardware will xrun if
        ///  there is any delay in audio processing, so the ALSA plugin triggers the
        ///  graph every quantum to ensure audio keeps flowing. Drivers that
        ///  do not have a deadline, such as the freewheel driver, should
        ///  use a timeout to ensure that forward progress keeps being made.
        ///  A reasonable choice of deadline is three times the quantum: if
        ///  the graph is taking 3x longer than normal, it is likely that it
        ///  is hung and should be retriggered.
        /// 
        ///  Streams that are not drivers according to \ref pw_stream_is_driving()
        ///  can also call this method. The result is that a RequestProcess event
        ///  is sent to the driver. If the graph is lazy scheduling according to
        ///  \ref pw_stream_is_lazy(), this might result in a graph cycle by the
        ///  driver. If the graph is not lazy scheduling and the stream is not a
        ///  driver, this method will have no effect.
        /// 
        ///  RT safe.
        /// 
        ///  Since 0.3.34
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_trigger_process", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_trigger_process(pw_stream* stream);

        /// <summary>
        ///  Emit an event from this stream. RT safe.
        ///  Since 1.2.6
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_emit_event", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_emit_event(pw_stream* stream, spa_event* @event);

        /// <summary>
        ///  Adjust the rate of the stream.
        ///  When the stream is using an adaptive resampler, adjust the resampler rate.
        ///  When there is no resampler, -ENOTSUP is returned. Activating the adaptive
        ///  resampler will add a small amount of delay to the samples, you can deactivate
        ///  it again by setting a value &lt;= 0.0. RT safe.
        ///  Since 1.4.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_stream_set_rate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_stream_set_rate(pw_stream* stream, double rate);

        /// <summary>
        ///  Convert a filter state to a readable string
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_state_as_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_filter_state_as_string(int state);

        /// <summary>
        ///  Create a new unconnected \ref pw_filter
        ///  \return a newly allocated \ref pw_filter
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_filter* pw_filter_new(pw_core* core, byte* name, pw_properties* props);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_new_simple", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_filter* pw_filter_new_simple(pw_loop* loop_, byte* name, pw_properties* props, pw_filter_events* events, void* data);

        /// <summary>
        ///  Destroy a filter
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_filter_destroy(pw_filter* filter);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_filter_add_listener(pw_filter* filter, spa_hook* listener, pw_filter_events* events, void* data);

        /// <summary>
        ///  Get the current filter state. Since 1.4 this also sets errno when the
        ///  state is PW_FILTER_STATE_ERROR
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_get_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_get_state(pw_filter* filter, byte** error);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_get_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_filter_get_name(pw_filter* filter);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_get_core", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_core* pw_filter_get_core(pw_filter* filter);

        /// <summary>
        ///  Connect a filter for processing.
        ///  \return 0 on success &lt; 0 on error.
        /// 
        ///  You should connect to the process event and use pw_filter_dequeue_buffer()
        ///  to get the latest metadata and data.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_connect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_connect(pw_filter* filter, uint flags, spa_pod** @params, uint n_params);

        /// <summary>
        ///  Get the node ID of the filter.
        ///  \return node ID.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_get_node_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_filter_get_node_id(pw_filter* filter);

        /// <summary>
        ///  Disconnect \a filter
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_disconnect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_disconnect(pw_filter* filter);

        /// <summary>
        ///  add a port to the filter, returns user data of port_data_size.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_add_port", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_filter_add_port(pw_filter* filter, uint direction, uint flags, nuint port_data_size, pw_properties* props, spa_pod** @params, uint n_params);

        /// <summary>
        ///  remove a port from the filter
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_remove_port", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_remove_port(void* port_data);

        /// <summary>
        ///  get properties, port_data of NULL will give global properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_filter_get_properties(pw_filter* filter, void* port_data);

        /// <summary>
        ///  Update properties, use NULL port_data for global filter properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_update_properties(pw_filter* filter, void* port_data, spa_dict* dict);

        /// <summary>
        ///  Set the filter in error state
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_set_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_set_error(pw_filter* filter, int res, byte* error);

        /// <summary>
        ///  Update params, use NULL port_data for global filter params
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_update_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_update_params(pw_filter* filter, void* port_data, spa_pod** @params, uint n_params);

        /// <summary>
        ///  Query the time on the filter, deprecated, use the spa_io_position in the
        ///  process() method for timing information. RT safe.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_get_time", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_get_time(pw_filter* filter, pw_time* time);

        /// <summary>
        ///  Get the current time in nanoseconds. This value can be compared with
        ///  the nsec value in the spa_io_position. RT safe. Since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_get_nsec", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong pw_filter_get_nsec(pw_filter* filter);

        /// <summary>
        ///  Get the data loop that is doing the processing of this filter. This loop
        ///  is assigned after pw_filter_connect(). Since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_get_data_loop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_loop* pw_filter_get_data_loop(pw_filter* filter);

        /// <summary>
        ///  Get a buffer that can be filled for output ports or consumed
        ///  for input ports. RT safe.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_dequeue_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_buffer* pw_filter_dequeue_buffer(void* port_data);

        /// <summary>
        ///  Submit a buffer for playback or recycle a buffer for capture. RT safe.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_queue_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_queue_buffer(void* port_data, pw_buffer* buffer);

        /// <summary>
        ///  Get a data pointer to the buffer data. RT safe.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_get_dsp_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_filter_get_dsp_buffer(void* port_data, uint n_samples);

        /// <summary>
        ///  Activate or deactivate the filter
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_set_active", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_set_active(pw_filter* filter, [MarshalAs(UnmanagedType.U1)] bool active);

        /// <summary>
        ///  Flush a filter. When \a drain is true, the drained callback will
        ///  be called when all data is played or recorded. The filter can be resumed
        ///  after the drain by setting it active again with
        ///  \ref pw_filter_set_active(). A flush without a drain is mostly useful afer
        ///  a state change to PAUSED, to flush any remaining data from the queues.
        ///  RT safe.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_flush", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_flush(pw_filter* filter, [MarshalAs(UnmanagedType.U1)] bool drain);

        /// <summary>
        ///  Check if the filter is driving. The filter needs to have the
        ///  PW_FILTER_FLAG_DRIVER set. When the filter is driving,
        ///  pw_filter_trigger_process() needs to be called when data is
        ///  available (output) or needed (input). Since 0.3.66
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_is_driving", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_filter_is_driving(pw_filter* filter);

        /// <summary>
        ///  Check if the graph is using lazy scheduling.
        ///  Since 1.4.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_is_lazy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_filter_is_lazy(pw_filter* filter);

        /// <summary>
        ///  Trigger a push/pull on the filter. One iteration of the graph will
        ///  be scheduled and process() will be called. RT safe. Since 0.3.66
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_trigger_process", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_trigger_process(pw_filter* filter);

        /// <summary>
        ///  Emit an event from this filter. RT safe.
        ///  Since 1.2.6
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_filter_emit_event", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_filter_emit_event(pw_filter* filter, spa_event* @event);

        /// <summary>
        ///  Make a new thread loop with the given name and optional properties.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_thread_loop* pw_thread_loop_new(byte* name, spa_dict* props);

        /// <summary>
        ///  Make a new thread loop with the given loop, name and optional properties.
        ///  When \a loop is NULL, a new loop will be created.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_new_full", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_thread_loop* pw_thread_loop_new_full(pw_loop* loop_, byte* name, spa_dict* props);

        /// <summary>
        ///  Destroy a thread loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_thread_loop_destroy(pw_thread_loop* loop_);

        /// <summary>
        ///  Add an event listener
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_thread_loop_add_listener(pw_thread_loop* loop_, spa_hook* listener, pw_thread_loop_events* events, void* data);

        /// <summary>
        ///  Get the loop implementation of the thread loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_get_loop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_loop* pw_thread_loop_get_loop(pw_thread_loop* loop_);

        /// <summary>
        ///  Start the thread loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_start", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_thread_loop_start(pw_thread_loop* loop_);

        /// <summary>
        ///  Stop the thread loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_stop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_thread_loop_stop(pw_thread_loop* loop_);

        /// <summary>
        ///  Lock the loop. This ensures exclusive ownership of the loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_lock", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_thread_loop_lock(pw_thread_loop* loop_);

        /// <summary>
        ///  Unlock the loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_unlock", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_thread_loop_unlock(pw_thread_loop* loop_);

        /// <summary>
        ///  Release the lock and wait until some thread calls \ref pw_thread_loop_signal
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_wait", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_thread_loop_wait(pw_thread_loop* loop_);

        /// <summary>
        ///  Release the lock and wait a maximum of 'wait_max_sec' seconds
        ///   until some thread calls \ref pw_thread_loop_signal or time out
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_timed_wait", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_thread_loop_timed_wait(pw_thread_loop* loop_, int wait_max_sec);

        /// <summary>
        ///  Get a struct timespec suitable for \ref pw_thread_loop_timed_wait_full.
        ///  Since: 0.3.7
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_get_time", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_thread_loop_get_time(pw_thread_loop* loop_, timespec* abstime, long timeout);

        /// <summary>
        ///  Release the lock and wait up to \a abstime until some thread calls
        ///  \ref pw_thread_loop_signal. Use \ref pw_thread_loop_get_time to make a timeout.
        ///  Since: 0.3.7
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_timed_wait_full", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_thread_loop_timed_wait_full(pw_thread_loop* loop_, timespec* abstime);

        /// <summary>
        ///  Signal all threads waiting with \ref pw_thread_loop_wait
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_signal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_thread_loop_signal(pw_thread_loop* loop_, [MarshalAs(UnmanagedType.U1)] bool wait_for_accept);

        /// <summary>
        ///  Signal all threads executing \ref pw_thread_loop_signal with wait_for_accept
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_accept", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_thread_loop_accept(pw_thread_loop* loop_);

        /// <summary>
        ///  Check if inside the thread
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_thread_loop_in_thread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_thread_loop_in_thread(pw_thread_loop* loop_);

        /// <summary>
        ///  Make a new loop.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_data_loop* pw_data_loop_new(spa_dict* props);

        /// <summary>
        ///  Add an event listener to loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_data_loop_add_listener(pw_data_loop* loop_, spa_hook* listener, pw_data_loop_events* events, void* data);

        /// <summary>
        ///  wait for activity on the loop up to \a timeout milliseconds.
        ///  Should be called from the loop function
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_wait", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_data_loop_wait(pw_data_loop* loop_, int timeout);

        /// <summary>
        ///  make sure the thread will exit. Can be called from a loop callback
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_exit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_data_loop_exit(pw_data_loop* loop_);

        /// <summary>
        ///  Get the loop implementation of this data loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_get_loop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_loop* pw_data_loop_get_loop(pw_data_loop* loop_);

        /// <summary>
        ///  Get the loop name. Since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_get_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_data_loop_get_name(pw_data_loop* loop_);

        /// <summary>
        ///  Get the loop class. Since 1.1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_get_class", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_data_loop_get_class(pw_data_loop* loop_);

        /// <summary>
        ///  Destroy the loop
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_data_loop_destroy(pw_data_loop* loop_);

        /// <summary>
        ///  Start the processing thread
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_start", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_data_loop_start(pw_data_loop* loop_);

        /// <summary>
        ///  Stop the processing thread
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_stop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_data_loop_stop(pw_data_loop* loop_);

        /// <summary>
        ///  Check if the current thread is the processing thread.
        ///  May be called from any thread.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_in_thread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_data_loop_in_thread(pw_data_loop* loop_);

        /// <summary>
        ///  Get the thread object
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_get_thread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_thread* pw_data_loop_get_thread(pw_data_loop* loop_);

        /// <summary>
        ///  invoke func in the context of the thread or in the caller thread when
        ///  the loop is not running. May be called from the loop's thread, but otherwise
        ///  can only be called by a single thread at a time.
        ///  If called from the loop's thread, all callbacks previously queued with
        ///  pw_data_loop_invoke() will be run synchronously, which might cause
        ///  unexpected reentrancy problems.
        /// 
        ///  \param[in] loop The loop to invoke func on.
        ///  \param func The function to be invoked.
        ///  \param seq A sequence number, opaque to PipeWire. This will be made
        ///             available to func.
        ///  \param[in] data Data that will be copied into the internal ring buffer and made
        ///              available to func. Because this data is copied, it is okay to
        ///              pass a pointer to a local variable, but do not pass a pointer to
        ///              an object that has identity.
        ///  \param size The size of data to copy.
        ///  \param block If \true, do not return until func has been called. Otherwise,
        ///               returns immediately. Passing \true does not risk a deadlock because
        ///               the data thread is never allowed to wait on any other thread.
        ///  \param user_data An opaque pointer passed to func.
        ///  \return `-EPIPE` if the internal ring buffer filled up,
        ///          if block is \false, 0 is returned when seq is SPA_ID_INVALID or the
        ///          sequence number with the ASYNC bit set otherwise. When block is \true,
        ///          the return value of func is returned.
        /// 
        ///  Since 0.3.3
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_invoke", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_data_loop_invoke(pw_data_loop* loop_, delegate* unmanaged[Cdecl]<spa_loop*, bool, uint, void*, nuint, void*, int> func, uint seq, void* data, nuint size, [MarshalAs(UnmanagedType.U1)] bool block, void* user_data);

        /// <summary>
        ///  Set a custom spa_thread_utils for this loop. Setting NULL restores the
        ///  system default implementation. Since 0.3.50
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_data_loop_set_thread_utils", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_data_loop_set_thread_utils(pw_data_loop* loop_, spa_thread_utils* impl_);

        /// <summary>
        ///  Return the version of the library the current application is
        ///  linked to.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_get_library_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_get_library_version();

        /// <summary>
        ///  Return TRUE if the currently linked PipeWire library version is equal
        ///  or newer than the specified version. Since 0.3.75
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_check_library_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_check_library_version(int major, int minor, int micro);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
		internal static extern void pw_init();

		[DllImport(__DllName, EntryPoint = "csbindgen_pw_deinit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_deinit();

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_debug_is_category_enabled", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_debug_is_category_enabled(byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_get_application_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_get_application_name();

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_get_prgname", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_get_prgname();

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_get_user_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_get_user_name();

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_get_host_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_get_host_name();

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_get_client_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_get_client_name();

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_check_option", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_check_option(byte* option, byte* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_direction_reverse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_direction_reverse(uint direction);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_set_domain", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_set_domain(byte* domain);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_get_domain", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_get_domain();

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_get_support", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_get_support(spa_support* support, uint max_support);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_load_spa_handle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_handle* pw_load_spa_handle(byte* lib, byte* factory_name, spa_dict* info, uint n_support, spa_support* support);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_unload_spa_handle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_unload_spa_handle(spa_handle* handle);

        /// <summary>
        ///  Get the control parent port or NULL when not set
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_control_get_port", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_port* pw_control_get_port(pw_control* control);

        /// <summary>
        ///  Add an event listener on the control. May be called multiple times.
        ///  Each listener must be removed, but they may be removed in any order.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_control_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_control_add_listener(pw_control* control, spa_hook* listener, pw_control_events* events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_create_core", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_core* pw_context_create_core(pw_context* context, pw_properties* properties, nuint user_data_size);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_get_default_core", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_core* pw_context_get_default_core(pw_context* context);

        /// <summary>
        ///  Get the core properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_core_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_impl_core_get_properties(pw_impl_core* core);

        /// <summary>
        ///  Update the core properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_core_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_core_update_properties(pw_impl_core* core, spa_dict* dict);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_core_register", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_core_register(pw_impl_core* core, pw_properties* properties);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_core_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_core_destroy(pw_impl_core* core);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_core_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_impl_core_get_user_data(pw_impl_core* core);

        /// <summary>
        ///  Get the global of this core
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_core_get_global", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_global* pw_impl_core_get_global(pw_impl_core* core);

        /// <summary>
        ///  Add an event listener
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_core_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_core_add_listener(pw_impl_core* core, spa_hook* listener, pw_impl_core_events* events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_create_device", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_device* pw_context_create_device(pw_context* context, pw_properties* properties, nuint user_data_size);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_device_register", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_device_register(pw_impl_device* device, pw_properties* properties);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_device_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_device_destroy(pw_impl_device* device);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_device_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_impl_device_get_user_data(pw_impl_device* device);

        /// <summary>
        ///  Set the device implementation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_device_set_implementation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_device_set_implementation(pw_impl_device* device, spa_device* spa_device);

        /// <summary>
        ///  Get the device implementation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_device_get_implementation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_device* pw_impl_device_get_implementation(pw_impl_device* device);

        /// <summary>
        ///  Get the global of this device
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_device_get_global", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_global* pw_impl_device_get_global(pw_impl_device* device);

        /// <summary>
        ///  Add an event listener
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_device_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_device_add_listener(pw_impl_device* device, spa_hook* listener, pw_impl_device_events* events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_device_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_device_update_properties(pw_impl_device* device, spa_dict* dict);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_device_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_impl_device_get_properties(pw_impl_device* device);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_device_for_each_param", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_device_for_each_param(pw_impl_device* device, int seq, uint param_id, uint index, uint max, spa_pod* filter, delegate* unmanaged[Cdecl]<void*, int, uint, uint, uint, spa_pod*, int> callback, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_create_factory", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_factory* pw_context_create_factory(pw_context* context, byte* name, byte* type_, uint version, pw_properties* properties, nuint user_data_size);

        /// <summary>
        ///  Get the factory properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_factory_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_impl_factory_get_properties(pw_impl_factory* factory);

        /// <summary>
        ///  Get the factory info
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_factory_get_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_factory_info* pw_impl_factory_get_info(pw_impl_factory* factory);

        /// <summary>
        ///  Update the factory properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_factory_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_factory_update_properties(pw_impl_factory* factory, spa_dict* dict);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_factory_register", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_factory_register(pw_impl_factory* factory, pw_properties* properties);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_factory_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_factory_destroy(pw_impl_factory* factory);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_factory_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_impl_factory_get_user_data(pw_impl_factory* factory);

        /// <summary>
        ///  Get the global of this factory
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_factory_get_global", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_global* pw_impl_factory_get_global(pw_impl_factory* factory);

        /// <summary>
        ///  Add an event listener
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_factory_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_factory_add_listener(pw_impl_factory* factory, spa_hook* listener, pw_impl_factory_events* events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_factory_set_implementation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_factory_set_implementation(pw_impl_factory* factory, pw_impl_factory_implementation* implementation, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_factory_create_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_impl_factory_create_object(pw_impl_factory* factory, pw_resource* resource, byte* type_, uint version, pw_properties* properties, uint new_id);

        /// <summary>
        ///  Find a factory by name
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_find_factory", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_factory* pw_context_find_factory(pw_context* context, byte* name);

        /// <summary>
        ///  Make a new link between two ports
        ///  \return a newly allocated link
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_create_link", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_link* pw_context_create_link(pw_context* context, pw_impl_port* output, pw_impl_port* input, spa_pod* format_filter, pw_properties* properties, nuint user_data_size);

        /// <summary>
        ///  Destroy a link
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_link_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_link_destroy(pw_impl_link* link);

        /// <summary>
        ///  Add an event listener to \a link
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_link_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_link_add_listener(pw_impl_link* link, spa_hook* listener, pw_impl_link_events* events, void* data);

        /// <summary>
        ///  Finish link configuration and register
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_link_register", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_link_register(pw_impl_link* link, pw_properties* properties);

        /// <summary>
        ///  Get the context of a link
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_link_get_context", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_context* pw_impl_link_get_context(pw_impl_link* link);

        /// <summary>
        ///  Get the user_data of a link, the size of the memory is given when
        ///  constructing the link
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_link_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_impl_link_get_user_data(pw_impl_link* link);

        /// <summary>
        ///  Get the link info
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_link_get_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_link_info* pw_impl_link_get_info(pw_impl_link* link);

        /// <summary>
        ///  Get the global of the link
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_link_get_global", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_global* pw_impl_link_get_global(pw_impl_link* link);

        /// <summary>
        ///  Get the output port of the link
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_link_get_output", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_port* pw_impl_link_get_output(pw_impl_link* link);

        /// <summary>
        ///  Get the input port of the link
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_link_get_input", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_port* pw_impl_link_get_input(pw_impl_link* link);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_create_metadata", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_metadata* pw_context_create_metadata(pw_context* context, byte* name, pw_properties* properties, nuint user_data_size);

        /// <summary>
        ///  Get the metadata properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_metadata_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_impl_metadata_get_properties(pw_impl_metadata* metadata);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_metadata_register", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_metadata_register(pw_impl_metadata* metadata, pw_properties* properties);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_metadata_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_metadata_destroy(pw_impl_metadata* metadata);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_metadata_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_impl_metadata_get_user_data(pw_impl_metadata* metadata);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_metadata_set_implementation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_metadata_set_implementation(pw_impl_metadata* metadata, pw_metadata* impl_);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_metadata_get_implementation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_metadata* pw_impl_metadata_get_implementation(pw_impl_metadata* metadata);

        /// <summary>
        ///  Get the global of this metadata
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_metadata_get_global", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_global* pw_impl_metadata_get_global(pw_impl_metadata* metadata);

        /// <summary>
        ///  Add an event listener
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_metadata_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_metadata_add_listener(pw_impl_metadata* metadata, spa_hook* listener, pw_impl_metadata_events* events, void* data);

        /// <summary>
        ///  Set a property
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_metadata_set_property", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_metadata_set_property(pw_impl_metadata* metadata, uint subject, byte* key, byte* type_, byte* value);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_metadata_set_propertyf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_metadata_set_propertyf(pw_impl_metadata* metadata, uint subject, byte* key, byte* type_, byte* fmt);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_load_module", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_module* pw_context_load_module(pw_context* context, byte* name, byte* args, pw_properties* properties);

        /// <summary>
        ///  Get the context of a module
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_module_get_context", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_context* pw_impl_module_get_context(pw_impl_module* module);

        /// <summary>
        ///  Get the global of a module
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_module_get_global", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_global* pw_impl_module_get_global(pw_impl_module* module);

        /// <summary>
        ///  Get the module properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_module_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_impl_module_get_properties(pw_impl_module* module);

        /// <summary>
        ///  Update the module properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_module_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_module_update_properties(pw_impl_module* module, spa_dict* dict);

        /// <summary>
        ///  Get the module info
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_module_get_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_module_info* pw_impl_module_get_info(pw_impl_module* module);

        /// <summary>
        ///  Add an event listener to a module
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_module_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_module_add_listener(pw_impl_module* module, spa_hook* listener, pw_impl_module_events* events, void* data);

        /// <summary>
        ///  Destroy a module
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_module_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_module_destroy(pw_impl_module* module);

        /// <summary>
        ///  Schedule a destroy later on the main thread
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_module_schedule_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_module_schedule_destroy(pw_impl_module* module);

        /// <summary>
        ///  Create a new node
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_create_node", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_node* pw_context_create_node(pw_context* context, pw_properties* properties, nuint user_data_size);

        /// <summary>
        ///  Complete initialization of the node and register
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_register", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_node_register(pw_impl_node* node, pw_properties* properties);

        /// <summary>
        ///  Destroy a node
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_node_destroy(pw_impl_node* node);

        /// <summary>
        ///  Get the node info
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_get_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_node_info* pw_impl_node_get_info(pw_impl_node* node);

        /// <summary>
        ///  Get node user_data. The size of the memory was given in \ref pw_context_create_node
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_impl_node_get_user_data(pw_impl_node* node);

        /// <summary>
        ///  Get the context of this node
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_get_context", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_context* pw_impl_node_get_context(pw_impl_node* node);

        /// <summary>
        ///  Get the global of this node
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_get_global", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_global* pw_impl_node_get_global(pw_impl_node* node);

        /// <summary>
        ///  Get the node properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_impl_node_get_properties(pw_impl_node* node);

        /// <summary>
        ///  Update the node properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_node_update_properties(pw_impl_node* node, spa_dict* dict);

        /// <summary>
        ///  Set the node implementation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_set_implementation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_node_set_implementation(pw_impl_node* node, spa_node* spa_node);

        /// <summary>
        ///  Get the node implementation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_get_implementation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_node* pw_impl_node_get_implementation(pw_impl_node* node);

        /// <summary>
        ///  Add an event listener
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_node_add_listener(pw_impl_node* node, spa_hook* listener, pw_impl_node_events* events, void* data);

        /// <summary>
        ///  Add an rt_event listener
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_add_rt_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_node_add_rt_listener(pw_impl_node* node, spa_hook* listener, pw_impl_node_rt_events* events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_remove_rt_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_node_remove_rt_listener(pw_impl_node* node, spa_hook* listener);

        /// <summary>
        ///  Iterate the ports in the given direction. The callback should return
        ///  0 to fetch the next item, any other value stops the iteration and returns
        ///  the value. When all callbacks return 0, this function returns 0 when all
        ///  items are iterated.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_for_each_port", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_node_for_each_port(pw_impl_node* node, uint direction, delegate* unmanaged[Cdecl]<void*, pw_impl_port*, int> callback, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_for_each_param", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_node_for_each_param(pw_impl_node* node, int seq, uint param_id, uint index, uint max, spa_pod* filter, delegate* unmanaged[Cdecl]<void*, int, uint, uint, uint, spa_pod*, int> callback, void* data);

        /// <summary>
        ///  Find the port with direction and port_id or NULL when not found. Passing
        ///  PW_ID_ANY for port_id will return any port, preferably an unlinked one.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_find_port", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_port* pw_impl_node_find_port(pw_impl_node* node, uint direction, uint port_id);

        /// <summary>
        ///  Get a free unused port_id from the node
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_get_free_port_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_impl_node_get_free_port_id(pw_impl_node* node, uint direction);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_initialized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_node_initialized(pw_impl_node* node);

        /// <summary>
        ///  Set a node active. This will start negotiation with all linked active
        ///  nodes and start data transport
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_set_active", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_node_set_active(pw_impl_node* node, [MarshalAs(UnmanagedType.U1)] bool active);

        /// <summary>
        ///  Check if a node is active
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_is_active", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_impl_node_is_active(pw_impl_node* node);

        /// <summary>
        ///  Check if a node is active, Since 0.3.39
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_send_command", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_node_send_command(pw_impl_node* node, spa_command* command);

        /// <summary>
        ///  Set a param on the node, Since 0.3.65
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_node_set_param", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_node_set_param(pw_impl_node* node, uint id, uint flags, spa_pod* param);

        /// <summary>
        ///  Create a new port
        ///  \return a newly allocated port
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_create_port", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_port* pw_context_create_port(pw_context* context, uint direction, uint port_id, spa_port_info* info, nuint user_data_size);

        /// <summary>
        ///  Get the port direction
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_port_get_direction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_impl_port_get_direction(pw_impl_port* port);

        /// <summary>
        ///  Get the port properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_port_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_impl_port_get_properties(pw_impl_port* port);

        /// <summary>
        ///  Update the port properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_port_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_port_update_properties(pw_impl_port* port, spa_dict* dict);

        /// <summary>
        ///  Get the port info
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_port_get_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_port_info* pw_impl_port_get_info(pw_impl_port* port);

        /// <summary>
        ///  Get the port id
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_port_get_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_impl_port_get_id(pw_impl_port* port);

        /// <summary>
        ///  Get the port parent node or NULL when not yet set
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_port_get_node", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_node* pw_impl_port_get_node(pw_impl_port* port);

        /// <summary>
        ///  check is a port has links, return 0 if not, 1 if it is linked
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_port_is_linked", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_port_is_linked(pw_impl_port* port);

        /// <summary>
        ///  Add a port to a node
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_port_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_port_add(pw_impl_port* port, pw_impl_node* node);

        /// <summary>
        ///  Add an event listener on the port
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_port_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_port_add_listener(pw_impl_port* port, spa_hook* listener, pw_impl_port_events* events, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_work_queue_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_work_queue_add(pw_work_queue* queue, void* obj, int res, delegate* unmanaged[Cdecl]<void*, void*, int, uint, void> func, void* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_work_queue_cancel", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_work_queue_cancel(pw_work_queue* queue, void* obj, uint id);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_work_queue_complete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_work_queue_complete(pw_work_queue* queue, void* obj, uint seq, int res);

        /// <summary>
        ///  Create a new global object
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_global* pw_global_new(pw_context* context, byte* type_, uint version, uint permission_mask, pw_properties* properties, delegate* unmanaged[Cdecl]<void*, pw_impl_client*, uint, uint, uint, int> func, void* @object);

        /// <summary>
        ///  Register a global object to the context registry
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_register", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_global_register(pw_global* global);

        /// <summary>
        ///  Add an event listener on the global
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_global_add_listener(pw_global* global, spa_hook* listener, pw_global_events* events, void* data);

        /// <summary>
        ///  Get the permissions of the global for a given client
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_get_permissions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_global_get_permissions(pw_global* global, pw_impl_client* client);

        /// <summary>
        ///  Get the context object of this global
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_get_context", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_context* pw_global_get_context(pw_global* global);

        /// <summary>
        ///  Get the global type
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_get_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_global_get_type(pw_global* global);

        /// <summary>
        ///  Check a global type
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_is_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool pw_global_is_type(pw_global* global, byte* type_);

        /// <summary>
        ///  Get the global version
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_get_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_global_get_version(pw_global* global);

        /// <summary>
        ///  Get the global properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_global_get_properties(pw_global* global);

        /// <summary>
        ///  Update the global properties, must be done when unregistered
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_update_keys", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_global_update_keys(pw_global* global, spa_dict* dict, byte** keys);

        /// <summary>
        ///  Get the object associated with the global. This depends on the type of the
        ///  global
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_get_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_global_get_object(pw_global* global);

        /// <summary>
        ///  Get the unique id of the global
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_get_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_global_get_id(pw_global* global);

        /// <summary>
        ///  Get the serial number of the global
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_get_serial", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong pw_global_get_serial(pw_global* global);

        /// <summary>
        ///  Add a resource to a global
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_add_resource", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_global_add_resource(pw_global* global, pw_resource* resource);

        /// <summary>
        ///  Iterate all resources added to the global The callback should return
        ///  0 to fetch the next item, any other value stops the iteration and returns
        ///  the value. When all callbacks return 0, this function returns 0 when all
        ///  items are iterated.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_for_each_resource", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_global_for_each_resource(pw_global* global, delegate* unmanaged[Cdecl]<void*, pw_resource*, int> callback, void* data);

        /// <summary>
        ///  Let a client bind to a global
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_bind", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_global_bind(pw_global* global, pw_impl_client* client, uint permissions, uint version, uint id);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_update_permissions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_global_update_permissions(pw_global* global, pw_impl_client* client, uint old_permissions, uint new_permissions);

        /// <summary>
        ///  Destroy a global
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_global_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_global_destroy(pw_global* global);

        /// <summary>
        ///  Create a new client. This is mainly used by protocols.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_context_create_client", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_client* pw_context_create_client(pw_impl_core* core, pw_protocol* protocol, pw_properties* properties, nuint user_data_size);

        /// <summary>
        ///  Destroy a previously created client
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_client_destroy(pw_impl_client* client);

        /// <summary>
        ///  Finish configuration and register a client
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_register", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_client_register(pw_impl_client* client, pw_properties* properties);

        /// <summary>
        ///  Get the client user data
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_impl_client_get_user_data(pw_impl_client* client);

        /// <summary>
        ///  Get the client information
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_get_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_client_info* pw_impl_client_get_info(pw_impl_client* client);

        /// <summary>
        ///  Update the client properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_update_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_client_update_properties(pw_impl_client* client, spa_dict* dict);

        /// <summary>
        ///  Update the client permissions
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_update_permissions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_client_update_permissions(pw_impl_client* client, uint n_permissions, pw_permission* permissions);

        /// <summary>
        ///  check if a client has permissions for global_id, Since 0.3.9
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_check_permissions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_impl_client_check_permissions(pw_impl_client* client, uint global_id, uint permissions);

        /// <summary>
        ///  Get the client properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_get_properties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_properties* pw_impl_client_get_properties(pw_impl_client* client);

        /// <summary>
        ///  Get the context used to create this client
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_get_context", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_context* pw_impl_client_get_context(pw_impl_client* client);

        /// <summary>
        ///  Get the protocol used to create this client
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_get_protocol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_protocol* pw_impl_client_get_protocol(pw_impl_client* client);

        /// <summary>
        ///  Get the client core resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_get_core_resource", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_resource* pw_impl_client_get_core_resource(pw_impl_client* client);

        /// <summary>
        ///  Get a resource with the given id
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_find_resource", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_resource* pw_impl_client_find_resource(pw_impl_client* client, uint id);

        /// <summary>
        ///  Get the global associated with this client
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_get_global", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_global* pw_impl_client_get_global(pw_impl_client* client);

        /// <summary>
        ///  Get the mempool associated with this client, Since 0.3.74
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_get_mempool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_mempool* pw_impl_client_get_mempool(pw_impl_client* client);

        /// <summary>
        ///  listen to events from this client
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_client_add_listener(pw_impl_client* client, spa_hook* listener, pw_impl_client_events* events, void* data);

        /// <summary>
        ///  Mark the client busy. This can be used when an asynchronous operation is
        ///  started and no further processing is allowed to happen for the client
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_impl_client_set_busy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_impl_client_set_busy(pw_impl_client* client, [MarshalAs(UnmanagedType.U1)] bool busy);

        /// <summary>
        ///  Make a new resource for client
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_resource* pw_resource_new(pw_impl_client* client, uint id, uint permissions, byte* type_, uint version, nuint user_data_size);

        /// <summary>
        ///  Destroy a resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_resource_destroy(pw_resource* resource);

        /// <summary>
        ///  Remove a resource, like pw_resource_destroy but without sending a
        ///  remove_id message to the client
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_resource_remove(pw_resource* resource);

        /// <summary>
        ///  Get the client owning this resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_get_client", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_impl_client* pw_resource_get_client(pw_resource* resource);

        /// <summary>
        ///  Get the unique id of this resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_get_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_resource_get_id(pw_resource* resource);

        /// <summary>
        ///  Get the permissions of this resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_get_permissions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_resource_get_permissions(pw_resource* resource);

        /// <summary>
        ///  Get the type and optionally the version of this resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_get_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* pw_resource_get_type(pw_resource* resource, uint* version);

        /// <summary>
        ///  Get the protocol used for this resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_get_protocol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_protocol* pw_resource_get_protocol(pw_resource* resource);

        /// <summary>
        ///  Get the user data for the resource, the size was given in \ref pw_resource_new
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_get_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* pw_resource_get_user_data(pw_resource* resource);

        /// <summary>
        ///  Add an event listener
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_add_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_resource_add_listener(pw_resource* resource, spa_hook* listener, pw_resource_events* events, void* data);

        /// <summary>
        ///  Set the resource implementation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_add_object_listener", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_resource_add_object_listener(pw_resource* resource, spa_hook* listener, void* funcs, void* data);

        /// <summary>
        ///  Generate an ping event for a resource. This will generate a pong event
        ///  with the same \a sequence number in the return value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_ping", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_resource_ping(pw_resource* resource, int seq);

        /// <summary>
        ///  ref/unref a resource, Since 0.3.52
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_ref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_resource_ref(pw_resource* resource);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_unref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_resource_unref(pw_resource* resource);

        /// <summary>
        ///  Notify global id this resource is bound to
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_set_bound_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_resource_set_bound_id(pw_resource* resource, uint global_id);

        /// <summary>
        ///  Get the global id this resource is bound to or SPA_ID_INVALID when not bound
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_get_bound_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint pw_resource_get_bound_id(pw_resource* resource);

        /// <summary>
        ///  Generate an error for a resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_resource_error(pw_resource* resource, int res, byte* error);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_errorf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_resource_errorf(pw_resource* resource, int res, byte* error);

        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_errorf_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void pw_resource_errorf_id(pw_resource* resource, uint id, int res, byte* error);

        /// <summary>
        ///  Get the list of object listeners from a resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_get_object_listeners", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern spa_hook_list* pw_resource_get_object_listeners(pw_resource* resource);

        /// <summary>
        ///  Get the marshal functions for the resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_get_marshal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern pw_protocol_marshal* pw_resource_get_marshal(pw_resource* resource);

        /// <summary>
        ///  install a marshal function on a resource
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_pw_resource_install_marshal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int pw_resource_install_marshal(pw_resource* resource, [MarshalAs(UnmanagedType.U1)] bool implementor);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct timespec
    {
        public CLong tv_sec;
        public CLong tv_nsec;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_rectangle
    {
        public uint width;
        public uint height;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_point
    {
        public int x;
        public int y;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_region
    {
        public spa_point position;
        public spa_rectangle size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_fraction
    {
        public uint num;
        public uint denom;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_error_location
    {
        public int line;
        public int col;
        public nuint len;
        public byte* location;
        public byte* reason;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_strbuf
    {
        public byte* buffer;
        public nuint maxsize;
        public nuint pos;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_type_info
    {
        public uint type_;
        public uint parent;
        public byte* name;
        public spa_type_info* values;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod
    {
        public uint size;
        public uint type_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_choice_body
    {
        public uint type_;
        public uint flags;
        public spa_pod child;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_choice
    {
        public spa_pod pod;
        public spa_pod_choice_body body;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_object_body
    {
        public uint type_;
        public uint id;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_object
    {
        public spa_pod pod;
        public spa_pod_object_body body;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_prop
    {
        public uint key;
        public uint flags;
        public spa_pod value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_control
    {
        public uint offset;
        public uint type_;
        public spa_pod value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_sequence_body
    {
        public uint unit;
        public uint pad;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_meta
    {
        public uint type_;
        public uint size;
        public void* data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_meta_region
    {
        public spa_region region;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_meta_bitmap
    {
        public uint format;
        public spa_rectangle size;
        public int stride;
        public uint offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_meta_cursor
    {
        public uint id;
        public uint flags;
        public spa_point position;
        public spa_point hotspot;
        public uint bitmap_offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_chunk
    {
        public uint offset;
        public uint size;
        public int stride;
        public int flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_data
    {
        public uint type_;
        public uint flags;
        public long fd;
        public uint mapoffset;
        public uint maxsize;
        public void* data;
        public spa_chunk* chunk;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_buffer
    {
        public uint n_metas;
        public uint n_datas;
        public spa_meta* metas;
        public spa_data* datas;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_buffer_alloc_info
    {
        public uint flags;
        public uint max_align;
        public uint n_metas;
        public uint n_datas;
        public spa_meta* metas;
        public spa_data* datas;
        public uint* data_aligns;
        public nuint skel_size;
        public nuint meta_size;
        public nuint chunk_size;
        public nuint data_size;
        public nuint mem_size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_debug_context
    {
        public delegate* unmanaged[Cdecl]<spa_debug_context*, byte*, void> log;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_event_body
    {
        public spa_pod_object_body body;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_event
    {
        public spa_pod pod;
        public spa_event_body body;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_command_body
    {
        public spa_pod_object_body body;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_command
    {
        public spa_pod pod;
        public spa_command_body body;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_io_clock
    {
        public uint flags;
        public uint id;
        public fixed byte name[64];
        public ulong nsec;
        public spa_fraction rate;
        public ulong position;
        public ulong duration;
        public long delay;
        public double rate_diff;
        public ulong next_nsec;
        public spa_fraction target_rate;
        public ulong target_duration;
        public uint target_seq;
        public uint cycle;
        public ulong xrun;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_io_video_size
    {
        public uint flags;
        public uint stride;
        public spa_rectangle size;
        public spa_fraction framerate;
        public fixed uint padding[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_io_segment_bar
    {
        public uint flags;
        public uint offset;
        public float signature_num;
        public float signature_denom;
        public double bpm;
        public double beat;
        public double bar_start_tick;
        public double ticks_per_beat;
        public fixed uint padding[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_io_segment_video
    {
        public uint flags;
        public uint offset;
        public spa_fraction framerate;
        public uint hours;
        public uint minutes;
        public uint seconds;
        public uint frames;
        public uint field_count;
        public fixed uint padding[11];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_io_segment
    {
        public uint version;
        public uint flags;
        public ulong start;
        public ulong duration;
        public double rate;
        public ulong position;
        public spa_io_segment_bar bar;
        public spa_io_segment_video video;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_io_position
    {
        public spa_io_clock clock;
        public spa_io_video_size video;
        public long offset;
        public uint state;
        public uint n_segments;
        public fixed byte/* spa_io_segment, this length is invalid so must keep pointer and can't edit from C# */ segments[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_param_info
    {
        public uint id;
        public uint flags;
        public uint user;
        public int seq;
        public fixed uint padding[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_raw
    {
        public uint format;
        public uint flags;
        public uint rate;
        public uint channels;
        public fixed uint position[64];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_iec958
    {
        public uint codec;
        public uint flags;
        public uint rate;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_mp3
    {
        public uint rate;
        public uint channels;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_aac
    {
        public uint rate;
        public uint channels;
        public uint bitrate;
        public uint stream_format;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_wma
    {
        public uint rate;
        public uint channels;
        public uint bitrate;
        public uint block_align;
        public uint profile;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_amr
    {
        public uint rate;
        public uint channels;
        public uint band_mode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_video_info_raw
    {
        public uint format;
        public uint flags;
        public ulong modifier;
        public spa_rectangle size;
        public spa_fraction framerate;
        public spa_fraction max_framerate;
        public uint views;
        public uint interlace_mode;
        public spa_fraction pixel_aspect_ratio;
        public int multiview_mode;
        public uint multiview_flags;
        public uint chroma_site;
        public uint color_range;
        public uint color_matrix;
        public uint transfer_function;
        public uint color_primaries;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_latency_info
    {
        public uint direction;
        public float min_quantum;
        public float max_quantum;
        public int min_rate;
        public int max_rate;
        public long min_ns;
        public long max_ns;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_process_latency_info
    {
        public float quantum;
        public int rate;
        public long ns;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_dict_item
    {
        public byte* key;
        public byte* value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_dict
    {
        public uint flags;
        public uint n_items;
        public spa_dict_item* items;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_frame
    {
        public spa_pod pod;
        public spa_pod_frame* parent;
        public uint offset;
        public uint flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_parser_state
    {
        public uint offset;
        public uint flags;
        public spa_pod_frame* frame;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_parser
    {
        public void* data;
        public uint size;
        public uint _padding;
        public spa_pod_parser_state state;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_list
    {
        public spa_list* next;
        public spa_list* prev;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_callbacks
    {
        public void* funcs;
        public void* data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_interface
    {
        public byte* type_;
        public uint version;
        public spa_callbacks cb;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_hook_list
    {
        public spa_list list;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_hook
    {
        public spa_list link;
        public spa_callbacks cb;
        public delegate* unmanaged[Cdecl]<spa_hook*, void> removed;
        public void* priv_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_node
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_node_info
    {
        public uint max_input_ports;
        public uint max_output_ports;
        public ulong change_mask;
        public ulong flags;
        public spa_dict* props;
        public spa_param_info* @params;
        public uint n_params;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_port_info
    {
        public ulong change_mask;
        public ulong flags;
        public spa_fraction rate;
        public spa_dict* props;
        public spa_param_info* @params;
        public uint n_params;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_node_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, spa_node_info*, void> info;
        public delegate* unmanaged[Cdecl]<void*, uint, uint, spa_port_info*, void> port_info;
        public delegate* unmanaged[Cdecl]<void*, int, int, uint, void*, void> result;
        public delegate* unmanaged[Cdecl]<void*, spa_event*, void> @event;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_node_callbacks
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, int, int> ready;
        public delegate* unmanaged[Cdecl]<void*, uint, uint, int> reuse_buffer;
        public delegate* unmanaged[Cdecl]<void*, ulong, ulong, spa_pod*, int> xrun;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_graph_state
    {
        public int status;
        public int required;
        public int pending;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_graph_link
    {
        public spa_list link;
        public spa_graph_state* state;
        public delegate* unmanaged[Cdecl]<void*, int> signal;
        public void* signal_data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_graph
    {
        public uint flags;
        public spa_graph_node* parent;
        public spa_graph_state* state;
        public spa_list nodes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_graph_node_callbacks
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, spa_graph_node*, int> process;
        public delegate* unmanaged[Cdecl]<void*, spa_graph_node*, uint, uint, int> reuse_buffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_graph_node
    {
        public spa_list link;
        public spa_graph* graph;
        public fixed byte/* spa_list, this length is invalid so must keep pointer and can't edit from C# */ ports[2];
        public spa_list links;
        public uint flags;
        public spa_graph_state* state;
        public spa_graph_link graph_link;
        public spa_graph* subgraph;
        public spa_callbacks callbacks;
        public spa_list sched_link;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_graph_port
    {
        public spa_list link;
        public spa_graph_node* node;
        public uint direction;
        public uint port_id;
        public uint flags;
        public spa_graph_port* peer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_device
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_device_info
    {
        public uint version;
        public ulong change_mask;
        public ulong flags;
        public spa_dict* props;
        public spa_param_info* @params;
        public uint n_params;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_device_object_info
    {
        public uint version;
        public byte* type_;
        public byte* factory_name;
        public ulong change_mask;
        public ulong flags;
        public spa_dict* props;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_device_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, spa_device_info*, void> info;
        public delegate* unmanaged[Cdecl]<void*, int, int, uint, void*, void> result;
        public delegate* unmanaged[Cdecl]<void*, spa_event*, void> @event;
        public delegate* unmanaged[Cdecl]<void*, uint, spa_device_object_info*, void> object_info;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_builder_state
    {
        public uint offset;
        public uint flags;
        public spa_pod_frame* frame;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_builder_callbacks
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, uint, int> overflow;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_pod_builder
    {
        public void* data;
        public uint size;
        public uint _padding;
        public spa_pod_builder_state state;
        public spa_callbacks callbacks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_dsd
    {
        public uint bitorder;
        public uint flags;
        public int interleave;
        public uint rate;
        public uint channels;
        public fixed uint position[64];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_dsp
    {
        public uint format;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_vorbis
    {
        public uint rate;
        public uint channels;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_ra
    {
        public uint rate;
        public uint channels;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_alac
    {
        public uint rate;
        public uint channels;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_flac
    {
        public uint rate;
        public uint channels;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info_ape
    {
        public uint rate;
        public uint channels;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_audio_info
    {
        public uint media_type;
        public uint media_subtype;
        public spa_audio_info__bindgen_ty_1 info;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal unsafe partial struct spa_audio_info__bindgen_ty_1
    {
        [FieldOffset(0)]
        public spa_audio_info_raw raw;
        [FieldOffset(0)]
        public spa_audio_info_dsp dsp;
        [FieldOffset(0)]
        public spa_audio_info_iec958 iec958;
        [FieldOffset(0)]
        public spa_audio_info_dsd dsd;
        [FieldOffset(0)]
        public spa_audio_info_mp3 mp3;
        [FieldOffset(0)]
        public spa_audio_info_aac aac;
        [FieldOffset(0)]
        public spa_audio_info_vorbis vorbis;
        [FieldOffset(0)]
        public spa_audio_info_wma wma;
        [FieldOffset(0)]
        public spa_audio_info_ra ra;
        [FieldOffset(0)]
        public spa_audio_info_amr amr;
        [FieldOffset(0)]
        public spa_audio_info_alac alac;
        [FieldOffset(0)]
        public spa_audio_info_flac flac;
        [FieldOffset(0)]
        public spa_audio_info_ape ape;
        [FieldOffset(0)]
        public spa_audio_info_ape opus;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_video_info_h264
    {
        public spa_rectangle size;
        public spa_fraction framerate;
        public spa_fraction max_framerate;
        public uint stream_format;
        public uint alignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_video_info_mjpg
    {
        public spa_rectangle size;
        public spa_fraction framerate;
        public spa_fraction max_framerate;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_video_info_dsp
    {
        public uint format;
        public uint flags;
        public ulong modifier;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_video_info
    {
        public uint media_type;
        public uint media_subtype;
        public spa_video_info__bindgen_ty_1 info;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal unsafe partial struct spa_video_info__bindgen_ty_1
    {
        [FieldOffset(0)]
        public spa_video_info_raw raw;
        [FieldOffset(0)]
        public spa_video_info_dsp dsp;
        [FieldOffset(0)]
        public spa_video_info_h264 h264;
        [FieldOffset(0)]
        public spa_video_info_mjpg mjpg;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_cpu
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct itimerspec
    {
        public timespec it_interval;
        public timespec it_value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_system
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_poll_event
    {
        public uint events;
        public void* data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_loop
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_loop_control
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_loop_utils
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_source
    {
        public spa_loop* loop_;
        public delegate* unmanaged[Cdecl]<spa_source*, void> func;
        public void* data;
        public int fd;
        public uint mask;
        public uint rmask;
        public void* priv_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_loop_control_hooks
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> before;
        public delegate* unmanaged[Cdecl]<void*, void> after;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_dbus
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_dbus_connection_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> disconnected;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_dbus_connection
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<spa_dbus_connection*, void*> get;
        public delegate* unmanaged[Cdecl]<spa_dbus_connection*, void> destroy;
        public delegate* unmanaged[Cdecl]<spa_dbus_connection*, spa_hook*, spa_dbus_connection_events*, void*, void> add_listener;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_i18n
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_log
    {
        public spa_interface iface;
        public uint level;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_log_topic
    {
        public uint version;
        public byte* topic;
        public uint level;
        [MarshalAs(UnmanagedType.U1)] public bool has_custom_level;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_plugin_loader
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_handle
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<spa_handle*, byte*, void**, int> get_interface;
        public delegate* unmanaged[Cdecl]<spa_handle*, int> clear;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_interface_info
    {
        public byte* type_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_support
    {
        public byte* type_;
        public void* data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_handle_factory
    {
        public uint version;
        public byte* name;
        public spa_dict* info;
        public delegate* unmanaged[Cdecl]<spa_handle_factory*, spa_dict*, nuint> get_size;
        public delegate* unmanaged[Cdecl]<spa_handle_factory*, spa_handle*, spa_dict*, spa_support*, uint, int> init;
        public delegate* unmanaged[Cdecl]<spa_handle_factory*, spa_interface_info**, uint*, int> enum_interface_info;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_thread
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_thread_utils
    {
        public spa_interface iface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_json
    {
        public byte* cur;
        public byte* end;
        public spa_json* parent;
        public uint state;
        public uint depth;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct spa_ringbuffer
    {
        public uint readindex;
        public uint writeindex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct __va_list_tag
    {
        public uint gp_offset;
        public uint fp_offset;
        public void* overflow_arg_area;
        public void* reg_save_area;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct __BindgenBitfieldUnit
    {
        public fixed byte storage[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct _IO_marker
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct _IO_codecvt
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct _IO_wide_data
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct _IO_FILE
    {
        public int _flags;
        public byte* _IO_read_ptr;
        public byte* _IO_read_end;
        public byte* _IO_read_base;
        public byte* _IO_write_base;
        public byte* _IO_write_ptr;
        public byte* _IO_write_end;
        public byte* _IO_buf_base;
        public byte* _IO_buf_end;
        public byte* _IO_save_base;
        public byte* _IO_backup_base;
        public byte* _IO_save_end;
        public _IO_marker* _markers;
        public _IO_FILE* _chain;
        public int _fileno;
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public fixed byte _short_backupbuf[1];
        public CLong _old_offset;
        public ushort _cur_column;
        public sbyte _vtable_offset;
        public fixed byte _shortbuf[1];
        public void* _lock;
        public CLong _offset;
        public _IO_codecvt* _codecvt;
        public _IO_wide_data* _wide_data;
        public _IO_FILE* _freeres_list;
        public void* _freeres_buf;
        public _IO_FILE** _prevchain;
        public int _mode;
        public fixed byte _unused2[20];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_proxy
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_protocol
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_context
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_global
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_client
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_node
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_core
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_core_info
    {
        public uint id;
        public uint cookie;
        public byte* user_name;
        public byte* host_name;
        public byte* version;
        public byte* name;
        public ulong change_mask;
        public spa_dict* props;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_properties
    {
        public spa_dict dict;
        public uint flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_client
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_loop
    {
        public spa_system* system;
        public spa_loop* loop_;
        public spa_loop_control* control;
        public spa_loop_utils* utils;
        public byte* name;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_context_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_client*, void> check_access;
        public delegate* unmanaged[Cdecl]<void*, pw_global*, void> global_added;
        public delegate* unmanaged[Cdecl]<void*, pw_global*, void> global_removed;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_node*, void> driver_added;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_node*, void> driver_removed;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_data_loop
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_work_queue
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_export_type
    {
        public spa_list link;
        public byte* type_;
        public delegate* unmanaged[Cdecl]<pw_core*, byte*, spa_dict*, void*, nuint, pw_proxy*> func;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_protocol_client
    {
        public spa_list link;
        public pw_protocol* protocol;
        public pw_core* core;
        public delegate* unmanaged[Cdecl]<pw_protocol_client*, spa_dict*, delegate* unmanaged[Cdecl]<void*, int, void>, void*, int> connect;
        public delegate* unmanaged[Cdecl]<pw_protocol_client*, int, bool, int> connect_fd;
        public delegate* unmanaged[Cdecl]<pw_protocol_client*, int> steal_fd;
        public delegate* unmanaged[Cdecl]<pw_protocol_client*, void> disconnect;
        public delegate* unmanaged[Cdecl]<pw_protocol_client*, void> destroy;
        public delegate* unmanaged[Cdecl]<pw_protocol_client*, bool, int> set_paused;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_protocol_server
    {
        public spa_list link;
        public pw_protocol* protocol;
        public pw_impl_core* core;
        public spa_list client_list;
        public delegate* unmanaged[Cdecl]<pw_protocol_server*, void> destroy;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_protocol_marshal
    {
        public byte* type_;
        public uint version;
        public uint flags;
        public uint n_client_methods;
        public uint n_server_methods;
        public void* client_marshal;
        public void* server_demarshal;
        public void* server_marshal;
        public void* client_demarshal;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_protocol_implementation
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<pw_protocol*, pw_core*, spa_dict*, pw_protocol_client*> new_client;
        public delegate* unmanaged[Cdecl]<pw_protocol*, pw_impl_core*, spa_dict*, pw_protocol_server*> add_server;
        public delegate* unmanaged[Cdecl]<pw_protocol*, pw_impl_core*, int, int, spa_dict*, pw_protocol_server*> add_fd_server;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_protocol_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_proxy_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, uint, void> bound;
        public delegate* unmanaged[Cdecl]<void*, void> removed;
        public delegate* unmanaged[Cdecl]<void*, int, void> done;
        public delegate* unmanaged[Cdecl]<void*, int, int, byte*, void> error;
        public delegate* unmanaged[Cdecl]<void*, uint, spa_dict*, void> bound_props;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_permission
    {
        public uint id;
        public uint permissions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_client_info
    {
        public uint id;
        public ulong change_mask;
        public spa_dict* props;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_device_info
    {
        public uint id;
        public ulong change_mask;
        public spa_dict* props;
        public spa_param_info* @params;
        public uint n_params;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_mempool
    {
        public pw_properties* props;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_memblock
    {
        public pw_mempool* pool;
        public uint id;
        public int ref_;
        public uint flags;
        public uint type_;
        public int fd;
        public uint size;
        public pw_memmap* map;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_memmap
    {
        public pw_memblock* block;
        public void* ptr;
        public uint flags;
        public uint offset;
        public uint size;
        public fixed uint tag[5];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_mempool_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, pw_memblock*, void> added;
        public delegate* unmanaged[Cdecl]<void*, pw_memblock*, void> removed;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_buffers
    {
        public pw_memblock* mem;
        public spa_buffer** buffers;
        public uint n_buffers;
        public uint flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_factory_info
    {
        public uint id;
        public byte* name;
        public byte* type_;
        public uint version;
        public ulong change_mask;
        public spa_dict* props;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_link_info
    {
        public uint id;
        public uint output_node_id;
        public uint output_port_id;
        public uint input_node_id;
        public uint input_port_id;
        public ulong change_mask;
        public int state;
        public byte* error;
        public spa_pod* format;
        public spa_dict* props;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_main_loop
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_main_loop_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_module_info
    {
        public uint id;
        public byte* name;
        public byte* filename;
        public byte* args;
        public ulong change_mask;
        public spa_dict* props;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_node_info
    {
        public uint id;
        public uint max_input_ports;
        public uint max_output_ports;
        public ulong change_mask;
        public uint n_input_ports;
        public uint n_output_ports;
        public int state;
        public byte* error;
        public spa_dict* props;
        public spa_param_info* @params;
        public uint n_params;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_port_info
    {
        public uint id;
        public uint direction;
        public ulong change_mask;
        public spa_dict* props;
        public spa_param_info* @params;
        public uint n_params;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_stream
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_buffer
    {
        public spa_buffer* buffer;
        public void* user_data;
        public ulong size;
        public ulong requested;
        public ulong time;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_stream_control
    {
        public byte* name;
        public uint flags;
        public float def;
        public float min;
        public float max;
        public float* values;
        public uint n_values;
        public uint max_values;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_time
    {
        public long now;
        public spa_fraction rate;
        public ulong ticks;
        public long delay;
        public ulong queued;
        public ulong buffered;
        public uint queued_buffers;
        public uint avail_buffers;
        public ulong size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_stream_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, int, int, byte*, void> state_changed;
        public delegate* unmanaged[Cdecl]<void*, uint, pw_stream_control*, void> control_info;
        public delegate* unmanaged[Cdecl]<void*, uint, void*, uint, void> io_changed;
        public delegate* unmanaged[Cdecl]<void*, uint, spa_pod*, void> param_changed;
        public delegate* unmanaged[Cdecl]<void*, pw_buffer*, void> add_buffer;
        public delegate* unmanaged[Cdecl]<void*, pw_buffer*, void> remove_buffer;
        public delegate* unmanaged[Cdecl]<void*, void> process;
        public delegate* unmanaged[Cdecl]<void*, void> drained;
        public delegate* unmanaged[Cdecl]<void*, spa_command*, void> command;
        public delegate* unmanaged[Cdecl]<void*, void> trigger_done;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_filter
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_filter_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, int, int, byte*, void> state_changed;
        public delegate* unmanaged[Cdecl]<void*, void*, uint, void*, uint, void> io_changed;
        public delegate* unmanaged[Cdecl]<void*, void*, uint, spa_pod*, void> param_changed;
        public delegate* unmanaged[Cdecl]<void*, void*, pw_buffer*, void> add_buffer;
        public delegate* unmanaged[Cdecl]<void*, void*, pw_buffer*, void> remove_buffer;
        public delegate* unmanaged[Cdecl]<void*, spa_io_position*, void> process;
        public delegate* unmanaged[Cdecl]<void*, void> drained;
        public delegate* unmanaged[Cdecl]<void*, spa_command*, void> command;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_thread_loop
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_thread_loop_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_data_loop_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_metadata
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_resource
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_module
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_port
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_control
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_control_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, pw_control*, void> linked;
        public delegate* unmanaged[Cdecl]<void*, pw_control*, void> unlinked;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_core
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_core_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, void> initialized;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_device
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_device_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, void> initialized;
        public delegate* unmanaged[Cdecl]<void*, pw_device_info*, void> info_changed;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_factory
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_factory_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, void> initialized;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_factory_implementation
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, pw_resource*, byte*, uint, pw_properties*, uint, void*> create_object;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_link
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_link_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, void> initialized;
        public delegate* unmanaged[Cdecl]<void*, pw_link_info*, void> info_changed;
        public delegate* unmanaged[Cdecl]<void*, int, int, byte*, void> state_changed;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_port*, void> port_unlinked;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_metadata
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_metadata_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, uint, byte*, byte*, byte*, int> property;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_module_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, void> initialized;
        public delegate* unmanaged[Cdecl]<void*, void> registered;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_node_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, void> initialized;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_port*, void> port_init;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_port*, void> port_added;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_port*, void> port_removed;
        public delegate* unmanaged[Cdecl]<void*, pw_node_info*, void> info_changed;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_port*, pw_port_info*, void> port_info_changed;
        public delegate* unmanaged[Cdecl]<void*, bool, void> active_changed;
        public delegate* unmanaged[Cdecl]<void*, int, void> state_request;
        public delegate* unmanaged[Cdecl]<void*, int, int, byte*, void> state_changed;
        public delegate* unmanaged[Cdecl]<void*, int, int, uint, void*, void> result;
        public delegate* unmanaged[Cdecl]<void*, spa_event*, void> @event;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_node*, pw_impl_node*, void> driver_changed;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_node*, void> peer_added;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_node*, void> peer_removed;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_node_rt_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> drained;
        public delegate* unmanaged[Cdecl]<void*, void> xrun;
        public delegate* unmanaged[Cdecl]<void*, void> start;
        public delegate* unmanaged[Cdecl]<void*, void> complete;
        public delegate* unmanaged[Cdecl]<void*, void> incomplete;
        public delegate* unmanaged[Cdecl]<void*, void> timeout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_port_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, void> initialized;
        public delegate* unmanaged[Cdecl]<void*, pw_port_info*, void> info_changed;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_link*, void> link_added;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_link*, void> link_removed;
        public delegate* unmanaged[Cdecl]<void*, int, int, byte*, void> state_changed;
        public delegate* unmanaged[Cdecl]<void*, pw_control*, void> control_added;
        public delegate* unmanaged[Cdecl]<void*, pw_control*, void> control_removed;
        public delegate* unmanaged[Cdecl]<void*, uint, void> param_changed;
        public delegate* unmanaged[Cdecl]<void*, void> latency_changed;
        public delegate* unmanaged[Cdecl]<void*, void> tag_changed;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_global_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, pw_impl_client*, uint, uint, void> permissions_changed;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_impl_client_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, void> free;
        public delegate* unmanaged[Cdecl]<void*, void> initialized;
        public delegate* unmanaged[Cdecl]<void*, pw_client_info*, void> info_changed;
        public delegate* unmanaged[Cdecl]<void*, pw_resource*, void> resource_added;
        public delegate* unmanaged[Cdecl]<void*, pw_resource*, void> resource_removed;
        public delegate* unmanaged[Cdecl]<void*, bool, void> busy_changed;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct pw_resource_events
    {
        public uint version;
        public delegate* unmanaged[Cdecl]<void*, void> destroy;
        public delegate* unmanaged[Cdecl]<void*, int, void> pong;
        public delegate* unmanaged[Cdecl]<void*, int, int, byte*, void> error;
    }



}
